<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 1.47%)</title><rect x="922.4" y="85" width="17.3" height="15.0" fill="rgb(220,102,13)" rx="2" ry="2" />
<text  x="925.36" y="95.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="27.5" y="325" width="0.2" height="15.0" fill="rgb(206,86,19)" rx="2" ry="2" />
<text  x="30.54" y="335.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (6,188 samples, 99.97%)</title><rect x="10.4" y="533" width="1179.6" height="15.0" fill="rgb(210,111,29)" rx="2" ry="2" />
<text  x="13.38" y="543.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.13%)</title><rect x="1188.5" y="325" width="1.5" height="15.0" fill="rgb(249,54,19)" rx="2" ry="2" />
<text  x="1191.47" y="335.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (15 samples, 0.24%)</title><rect x="1024.3" y="405" width="2.9" height="15.0" fill="rgb(245,119,30)" rx="2" ry="2" />
<text  x="1027.34" y="415.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (3 samples, 0.05%)</title><rect x="1101.2" y="357" width="0.5" height="15.0" fill="rgb(228,101,28)" rx="2" ry="2" />
<text  x="1104.17" y="367.5" ></text>
</g>
<g >
<title>core::str::from_utf8 (21 samples, 0.34%)</title><rect x="17.8" y="373" width="4.0" height="15.0" fill="rgb(225,133,11)" rx="2" ry="2" />
<text  x="20.82" y="383.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (97 samples, 1.57%)</title><rect x="994.6" y="293" width="18.5" height="15.0" fill="rgb(230,62,37)" rx="2" ry="2" />
<text  x="997.60" y="303.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (95 samples, 1.53%)</title><rect x="530.4" y="181" width="18.1" height="15.0" fill="rgb(221,121,30)" rx="2" ry="2" />
<text  x="533.42" y="191.5" ></text>
</g>
<g >
<title>alloc::str::join_generic_copy::_$u7b$$u7b$closure$u7d$$u7d$::h814dba5ec5b72c63 (21 samples, 0.34%)</title><rect x="87.4" y="341" width="4.0" height="15.0" fill="rgb(212,188,52)" rx="2" ry="2" />
<text  x="90.40" y="351.5" ></text>
</g>
<g >
<title>__rust_maybe_catch_panic (6,188 samples, 99.97%)</title><rect x="10.4" y="501" width="1179.6" height="15.0" fill="rgb(218,185,12)" rx="2" ry="2" />
<text  x="13.38" y="511.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (1 samples, 0.02%)</title><rect x="114.5" y="309" width="0.2" height="15.0" fill="rgb(207,48,28)" rx="2" ry="2" />
<text  x="117.47" y="319.5" ></text>
</g>
<g >
<title>structopt::StructOpt::from_args (1 samples, 0.02%)</title><rect x="10.2" y="581" width="0.2" height="15.0" fill="rgb(226,49,52)" rx="2" ry="2" />
<text  x="13.19" y="591.5" ></text>
</g>
<g >
<title>__rust_realloc (1 samples, 0.02%)</title><rect x="752.3" y="229" width="0.2" height="15.0" fill="rgb(211,37,7)" rx="2" ry="2" />
<text  x="755.31" y="239.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="114.5" y="341" width="0.2" height="15.0" fill="rgb(220,44,15)" rx="2" ry="2" />
<text  x="117.47" y="351.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice (4,729 samples, 76.40%)</title><rect x="122.9" y="405" width="901.4" height="15.0" fill="rgb(242,199,48)" rx="2" ry="2" />
<text  x="125.85" y="415.5" >choose::choice::Choice::get_choice_slice</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (43 samples, 0.69%)</title><rect x="914.2" y="101" width="8.2" height="15.0" fill="rgb(210,15,4)" rx="2" ry="2" />
<text  x="917.16" y="111.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.03%)</title><rect x="548.1" y="133" width="0.4" height="15.0" fill="rgb(213,108,30)" rx="2" ry="2" />
<text  x="551.15" y="143.5" ></text>
</g>
<g >
<title>std::sys::unix::cvt (1 samples, 0.02%)</title><rect x="1152.3" y="197" width="0.1" height="15.0" fill="rgb(221,104,4)" rx="2" ry="2" />
<text  x="1155.26" y="207.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find::_$u7b$$u7b$closure$u7d$$u7d$::h7b07eff99fc35911 (88 samples, 1.42%)</title><rect x="862.9" y="117" width="16.8" height="15.0" fill="rgb(215,82,0)" rx="2" ry="2" />
<text  x="865.88" y="127.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::find (315 samples, 5.09%)</title><rect x="879.7" y="133" width="60.0" height="15.0" fill="rgb(212,80,40)" rx="2" ry="2" />
<text  x="882.65" y="143.5" >regex:..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.34%)</title><rect x="87.4" y="309" width="4.0" height="15.0" fill="rgb(221,143,49)" rx="2" ry="2" />
<text  x="90.40" y="319.5" ></text>
</g>
<g >
<title>alloc::slice::&lt;impl [T]&gt;::join (434 samples, 7.01%)</title><rect x="40.1" y="405" width="82.8" height="15.0" fill="rgb(253,221,37)" rx="2" ry="2" />
<text  x="43.12" y="415.5" >alloc::sl..</text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (19 samples, 0.31%)</title><rect x="958.4" y="181" width="3.6" height="15.0" fill="rgb(253,47,30)" rx="2" ry="2" />
<text  x="961.38" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.10%)</title><rect x="62.6" y="325" width="1.2" height="15.0" fill="rgb(248,166,36)" rx="2" ry="2" />
<text  x="65.61" y="335.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="22.8" y="309" width="0.2" height="15.0" fill="rgb(253,120,41)" rx="2" ry="2" />
<text  x="25.77" y="319.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (6,188 samples, 99.97%)</title><rect x="10.4" y="549" width="1179.6" height="15.0" fill="rgb(238,37,11)" rx="2" ry="2" />
<text  x="13.38" y="559.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.03%)</title><rect x="58.4" y="357" width="0.4" height="15.0" fill="rgb(224,52,20)" rx="2" ry="2" />
<text  x="61.42" y="367.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (180 samples, 2.91%)</title><rect x="1136.6" y="357" width="34.3" height="15.0" fill="rgb(241,182,45)" rx="2" ry="2" />
<text  x="1139.62" y="367.5" >st..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.37%)</title><rect x="1164.3" y="293" width="4.3" height="15.0" fill="rgb(235,197,19)" rx="2" ry="2" />
<text  x="1167.26" y="303.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next (920 samples, 14.86%)</title><rect x="777.9" y="229" width="175.3" height="15.0" fill="rgb(217,174,54)" rx="2" ry="2" />
<text  x="780.86" y="239.5" >&lt;regex::re_unicode::Ma..</text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(234,140,18)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,272 samples, 36.70%)</title><rect x="161.7" y="309" width="433.2" height="15.0" fill="rgb(231,76,9)" rx="2" ry="2" />
<text  x="164.74" y="319.5" >&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iter..</text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (2 samples, 0.03%)</title><rect x="1180.7" y="421" width="0.3" height="15.0" fill="rgb(239,116,4)" rx="2" ry="2" />
<text  x="1183.66" y="431.5" ></text>
</g>
<g >
<title>core::ptr::write (4 samples, 0.06%)</title><rect x="1013.1" y="341" width="0.8" height="15.0" fill="rgb(248,158,50)" rx="2" ry="2" />
<text  x="1016.10" y="351.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find (2,272 samples, 36.70%)</title><rect x="161.7" y="277" width="433.2" height="15.0" fill="rgb(239,144,51)" rx="2" ry="2" />
<text  x="164.74" y="287.5" >core::iter::traits::iterator::Iterator::find</text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find (430 samples, 6.95%)</title><rect x="857.7" y="149" width="82.0" height="15.0" fill="rgb(219,142,16)" rx="2" ry="2" />
<text  x="860.73" y="159.5" >regex::li..</text>
</g>
<g >
<title>core::ptr::drop_in_place (391 samples, 6.32%)</title><rect x="1027.2" y="405" width="74.5" height="15.0" fill="rgb(209,221,7)" rx="2" ry="2" />
<text  x="1030.20" y="415.5" >core::pt..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find (1,222 samples, 19.74%)</title><rect x="761.7" y="309" width="232.9" height="15.0" fill="rgb(251,209,26)" rx="2" ry="2" />
<text  x="764.65" y="319.5" >core::iter::traits::iterator::..</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.05%)</title><rect x="1021.7" y="277" width="0.5" height="15.0" fill="rgb(221,130,30)" rx="2" ry="2" />
<text  x="1024.67" y="287.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (4 samples, 0.06%)</title><rect x="760.9" y="293" width="0.8" height="15.0" fill="rgb(224,67,10)" rx="2" ry="2" />
<text  x="763.89" y="303.5" ></text>
</g>
<g >
<title>_$LT$choose..config..Opt$u20$as$u20$structopt..StructOpt$GT$::from_clap::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hf93e98cea11c4767 (1 samples, 0.02%)</title><rect x="10.2" y="389" width="0.2" height="15.0" fill="rgb(247,209,18)" rx="2" ry="2" />
<text  x="13.19" y="399.5" ></text>
</g>
<g >
<title>std::memchr::memrchr (2 samples, 0.03%)</title><rect x="1155.3" y="277" width="0.4" height="15.0" fill="rgb(231,87,35)" rx="2" ry="2" />
<text  x="1158.31" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="1128.2" y="309" width="0.2" height="15.0" fill="rgb(232,29,45)" rx="2" ry="2" />
<text  x="1131.24" y="319.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (4 samples, 0.06%)</title><rect x="1179.9" y="389" width="0.8" height="15.0" fill="rgb(248,194,31)" rx="2" ry="2" />
<text  x="1182.90" y="399.5" ></text>
</g>
<g >
<title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (2 samples, 0.03%)</title><rect x="19.0" y="357" width="0.3" height="15.0" fill="rgb(230,152,31)" rx="2" ry="2" />
<text  x="21.96" y="367.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::hc5536b4b8270958d (4 samples, 0.06%)</title><rect x="963.9" y="229" width="0.8" height="15.0" fill="rgb(235,41,35)" rx="2" ry="2" />
<text  x="966.91" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (2,011 samples, 32.49%)</title><rect x="168.0" y="213" width="383.4" height="15.0" fill="rgb(249,181,26)" rx="2" ry="2" />
<text  x="171.03" y="223.5" >&lt;regex::re_unicode::Split as core::iter::traits::ite..</text>
</g>
<g >
<title>choose::config::Opt::augment_clap::_$u7b$$u7b$closure$u7d$$u7d$::hb500c0d719e572f1 (1 samples, 0.02%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(250,50,30)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="1170.7" y="261" width="0.2" height="15.0" fill="rgb(218,205,17)" rx="2" ry="2" />
<text  x="1173.75" y="271.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::find_at (1,312 samples, 21.20%)</title><rect x="276.1" y="165" width="250.1" height="15.0" fill="rgb(215,1,52)" rx="2" ry="2" />
<text  x="279.12" y="175.5" >&lt;regex::exec::ExecNoSyncStr as re..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 0.08%)</title><rect x="552.0" y="165" width="0.9" height="15.0" fill="rgb(216,22,33)" rx="2" ry="2" />
<text  x="554.96" y="175.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="1128.0" y="357" width="0.4" height="15.0" fill="rgb(220,7,3)" rx="2" ry="2" />
<text  x="1131.05" y="367.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,222 samples, 19.74%)</title><rect x="761.7" y="325" width="232.9" height="15.0" fill="rgb(237,210,19)" rx="2" ry="2" />
<text  x="764.65" y="335.5" >&lt;core::iter::adapters::Filter&lt;..</text>
</g>
<g >
<title>regex::exec::Exec::searcher_str (21 samples, 0.34%)</title><rect x="1020.3" y="357" width="4.0" height="15.0" fill="rgb(230,195,33)" rx="2" ry="2" />
<text  x="1023.34" y="367.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="117.7" y="325" width="0.2" height="15.0" fill="rgb(216,135,43)" rx="2" ry="2" />
<text  x="120.71" y="335.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="10.2" y="549" width="0.2" height="15.0" fill="rgb(251,76,31)" rx="2" ry="2" />
<text  x="13.19" y="559.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (190 samples, 3.07%)</title><rect x="558.4" y="165" width="36.3" height="15.0" fill="rgb(245,154,6)" rx="2" ry="2" />
<text  x="561.44" y="175.5" >cor..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.29%)</title><rect x="24.1" y="325" width="3.4" height="15.0" fill="rgb(211,7,3)" rx="2" ry="2" />
<text  x="27.11" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_free (59 samples, 0.95%)</title><rect x="1028.9" y="325" width="11.3" height="15.0" fill="rgb(205,182,45)" rx="2" ry="2" />
<text  x="1031.92" y="335.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_desugared (3,169 samples, 51.20%)</title><rect x="157.5" y="325" width="604.2" height="15.0" fill="rgb(239,32,37)" rx="2" ry="2" />
<text  x="160.55" y="335.5" >alloc::vec::Vec&lt;T&gt;::extend_desugared</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="27.2" y="213" width="0.1" height="15.0" fill="rgb(236,55,21)" rx="2" ry="2" />
<text  x="30.16" y="223.5" ></text>
</g>
<g >
<title>__rdl_alloc (13 samples, 0.21%)</title><rect x="84.2" y="277" width="2.4" height="15.0" fill="rgb(222,147,44)" rx="2" ry="2" />
<text  x="87.16" y="287.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (414 samples, 6.69%)</title><rect x="1101.7" y="405" width="79.0" height="15.0" fill="rgb(205,153,2)" rx="2" ry="2" />
<text  x="1104.74" y="415.5" >std::io::..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.2" y="501" width="0.2" height="15.0" fill="rgb(219,37,11)" rx="2" ry="2" />
<text  x="13.19" y="511.5" ></text>
</g>
<g >
<title>regex::cache::imp::Cached&lt;T&gt;::get_or (21 samples, 0.34%)</title><rect x="1020.3" y="325" width="4.0" height="15.0" fill="rgb(222,126,24)" rx="2" ry="2" />
<text  x="1023.34" y="335.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (18 samples, 0.29%)</title><rect x="740.7" y="181" width="3.4" height="15.0" fill="rgb(206,3,37)" rx="2" ry="2" />
<text  x="743.68" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (806 samples, 13.02%)</title><rect x="598.9" y="245" width="153.6" height="15.0" fill="rgb(221,26,43)" rx="2" ry="2" />
<text  x="601.86" y="255.5" >alloc::alloc::realloc</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (6 samples, 0.10%)</title><rect x="752.5" y="261" width="1.1" height="15.0" fill="rgb(253,159,4)" rx="2" ry="2" />
<text  x="755.50" y="271.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.08%)</title><rect x="856.8" y="117" width="0.9" height="15.0" fill="rgb(249,38,6)" rx="2" ry="2" />
<text  x="859.78" y="127.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(213,28,31)" rx="2" ry="2" />
<text  x="1192.81" y="303.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (14 samples, 0.23%)</title><rect x="1152.4" y="213" width="2.7" height="15.0" fill="rgb(207,168,7)" rx="2" ry="2" />
<text  x="1155.45" y="223.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="10.2" y="421" width="0.2" height="15.0" fill="rgb(240,217,38)" rx="2" ry="2" />
<text  x="13.19" y="431.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="10.2" y="453" width="0.2" height="15.0" fill="rgb(237,7,32)" rx="2" ry="2" />
<text  x="13.19" y="463.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.06%)</title><rect x="1023.2" y="245" width="0.8" height="15.0" fill="rgb(251,126,5)" rx="2" ry="2" />
<text  x="1026.20" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (69 samples, 1.11%)</title><rect x="996.7" y="261" width="13.2" height="15.0" fill="rgb(226,170,15)" rx="2" ry="2" />
<text  x="999.70" y="271.5" ></text>
</g>
<g >
<title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2 samples, 0.03%)</title><rect x="15.3" y="389" width="0.4" height="15.0" fill="rgb(216,211,0)" rx="2" ry="2" />
<text  x="18.34" y="399.5" ></text>
</g>
<g >
<title>std::io::append_to_string (87 samples, 1.41%)</title><rect x="15.7" y="389" width="16.6" height="15.0" fill="rgb(215,16,44)" rx="2" ry="2" />
<text  x="18.72" y="399.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_one (1 samples, 0.02%)</title><rect x="10.2" y="293" width="0.2" height="15.0" fill="rgb(243,64,20)" rx="2" ry="2" />
<text  x="13.19" y="303.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (10 samples, 0.16%)</title><rect x="951.3" y="213" width="1.9" height="15.0" fill="rgb(221,59,28)" rx="2" ry="2" />
<text  x="954.33" y="223.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::hb4c0dd73b12d69ab (4 samples, 0.06%)</title><rect x="963.9" y="245" width="0.8" height="15.0" fill="rgb(230,93,5)" rx="2" ry="2" />
<text  x="966.91" y="255.5" ></text>
</g>
<g >
<title>_int_free (122 samples, 1.97%)</title><rect x="662.1" y="197" width="23.3" height="15.0" fill="rgb(242,208,9)" rx="2" ry="2" />
<text  x="665.15" y="207.5" >_..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1,218 samples, 19.68%)</title><rect x="762.4" y="261" width="232.2" height="15.0" fill="rgb(227,135,18)" rx="2" ry="2" />
<text  x="765.42" y="271.5" >core::iter::traits::iterator::..</text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (26 samples, 0.42%)</title><rect x="1150.3" y="277" width="5.0" height="15.0" fill="rgb(241,19,27)" rx="2" ry="2" />
<text  x="1153.35" y="287.5" ></text>
</g>
<g >
<title>std::memchr::memchr (24 samples, 0.39%)</title><rect x="27.7" y="341" width="4.6" height="15.0" fill="rgb(212,147,53)" rx="2" ry="2" />
<text  x="30.73" y="351.5" ></text>
</g>
<g >
<title>_int_realloc (608 samples, 9.82%)</title><rect x="629.5" y="213" width="116.0" height="15.0" fill="rgb(251,178,47)" rx="2" ry="2" />
<text  x="632.55" y="223.5" >_int_realloc</text>
</g>
<g >
<title>alloc::alloc::alloc (12 samples, 0.19%)</title><rect x="25.1" y="245" width="2.2" height="15.0" fill="rgb(252,178,46)" rx="2" ry="2" />
<text  x="28.06" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (8 samples, 0.13%)</title><rect x="1126.9" y="373" width="1.5" height="15.0" fill="rgb(219,209,6)" rx="2" ry="2" />
<text  x="1129.90" y="383.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (202 samples, 3.26%)</title><rect x="360.4" y="101" width="38.5" height="15.0" fill="rgb(251,36,17)" rx="2" ry="2" />
<text  x="363.38" y="111.5" >cor..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (19 samples, 0.31%)</title><rect x="23.9" y="341" width="3.6" height="15.0" fill="rgb(226,7,54)" rx="2" ry="2" />
<text  x="26.92" y="351.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="533" width="0.2" height="15.0" fill="rgb(222,168,2)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.36%)</title><rect x="347.2" y="37" width="4.2" height="15.0" fill="rgb(231,85,15)" rx="2" ry="2" />
<text  x="350.22" y="47.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.03%)</title><rect x="962.0" y="149" width="0.4" height="15.0" fill="rgb(236,183,38)" rx="2" ry="2" />
<text  x="965.01" y="159.5" ></text>
</g>
<g >
<title>std::io::append_to_string (1 samples, 0.02%)</title><rect x="21.8" y="357" width="0.2" height="15.0" fill="rgb(241,40,16)" rx="2" ry="2" />
<text  x="24.82" y="367.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (1 samples, 0.02%)</title><rect x="1183.5" y="373" width="0.2" height="15.0" fill="rgb(211,98,49)" rx="2" ry="2" />
<text  x="1186.52" y="383.5" ></text>
</g>
<g >
<title>&lt;str as core::fmt::Display&gt;::fmt (3 samples, 0.05%)</title><rect x="1170.9" y="373" width="0.6" height="15.0" fill="rgb(205,108,12)" rx="2" ry="2" />
<text  x="1173.94" y="383.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (14 samples, 0.23%)</title><rect x="24.9" y="277" width="2.6" height="15.0" fill="rgb(228,109,45)" rx="2" ry="2" />
<text  x="27.87" y="287.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (22 samples, 0.36%)</title><rect x="347.2" y="69" width="4.2" height="15.0" fill="rgb(240,17,41)" rx="2" ry="2" />
<text  x="350.22" y="79.5" ></text>
</g>
<g >
<title>core::slice::Iter&lt;T&gt;::post_inc_start (6 samples, 0.10%)</title><rect x="90.1" y="277" width="1.1" height="15.0" fill="rgb(211,75,11)" rx="2" ry="2" />
<text  x="93.06" y="287.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.08%)</title><rect x="856.8" y="101" width="0.9" height="15.0" fill="rgb(212,135,11)" rx="2" ry="2" />
<text  x="859.78" y="111.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(252,200,18)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (8 samples, 0.13%)</title><rect x="1165.0" y="277" width="1.6" height="15.0" fill="rgb(216,106,53)" rx="2" ry="2" />
<text  x="1168.03" y="287.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.16%)</title><rect x="516.7" y="117" width="1.9" height="15.0" fill="rgb(217,49,53)" rx="2" ry="2" />
<text  x="519.69" y="127.5" ></text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (418 samples, 6.75%)</title><rect x="43.2" y="389" width="79.7" height="15.0" fill="rgb(217,50,7)" rx="2" ry="2" />
<text  x="46.17" y="399.5" >alloc::st..</text>
</g>
<g >
<title>__rdl_alloc (2 samples, 0.03%)</title><rect x="27.0" y="229" width="0.3" height="15.0" fill="rgb(205,42,51)" rx="2" ry="2" />
<text  x="29.97" y="239.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,272 samples, 36.70%)</title><rect x="161.7" y="261" width="433.2" height="15.0" fill="rgb(225,122,1)" rx="2" ry="2" />
<text  x="164.74" y="271.5" >&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::..</text>
</g>
<g >
<title>_int_realloc (1 samples, 0.02%)</title><rect x="27.3" y="213" width="0.2" height="15.0" fill="rgb(222,220,51)" rx="2" ry="2" />
<text  x="30.35" y="223.5" ></text>
</g>
<g >
<title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="17.1" y="357" width="0.5" height="15.0" fill="rgb(232,102,13)" rx="2" ry="2" />
<text  x="20.05" y="367.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.2" y="373" width="0.2" height="15.0" fill="rgb(212,60,21)" rx="2" ry="2" />
<text  x="13.19" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (9 samples, 0.15%)</title><rect x="25.3" y="229" width="1.7" height="15.0" fill="rgb(206,158,40)" rx="2" ry="2" />
<text  x="28.25" y="239.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,272 samples, 36.70%)</title><rect x="161.7" y="293" width="433.2" height="15.0" fill="rgb(207,6,46)" rx="2" ry="2" />
<text  x="164.74" y="303.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::i..</text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.2" y="341" width="0.2" height="15.0" fill="rgb(240,131,25)" rx="2" ry="2" />
<text  x="13.19" y="351.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (11 samples, 0.18%)</title><rect x="1150.3" y="245" width="2.1" height="15.0" fill="rgb(225,129,2)" rx="2" ry="2" />
<text  x="1153.35" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (31 samples, 0.50%)</title><rect x="1157.6" y="309" width="5.9" height="15.0" fill="rgb(245,222,12)" rx="2" ry="2" />
<text  x="1160.59" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="1128.2" y="325" width="0.2" height="15.0" fill="rgb(214,40,22)" rx="2" ry="2" />
<text  x="1131.24" y="335.5" ></text>
</g>
<g >
<title>__memrchr_avx2 (2 samples, 0.03%)</title><rect x="1155.3" y="229" width="0.4" height="15.0" fill="rgb(207,177,52)" rx="2" ry="2" />
<text  x="1158.31" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.11%)</title><rect x="1165.2" y="261" width="1.4" height="15.0" fill="rgb(230,70,25)" rx="2" ry="2" />
<text  x="1168.22" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::hd38a2ab49ba52c64 (5 samples, 0.08%)</title><rect x="552.0" y="181" width="0.9" height="15.0" fill="rgb(238,196,11)" rx="2" ry="2" />
<text  x="554.96" y="191.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="10.2" y="437" width="0.2" height="15.0" fill="rgb(217,39,2)" rx="2" ry="2" />
<text  x="13.19" y="447.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (88 samples, 1.42%)</title><rect x="862.9" y="133" width="16.8" height="15.0" fill="rgb(251,163,9)" rx="2" ry="2" />
<text  x="865.88" y="143.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::h14d7ae7514331ff4 (218 samples, 3.52%)</title><rect x="553.1" y="197" width="41.6" height="15.0" fill="rgb(207,80,11)" rx="2" ry="2" />
<text  x="556.11" y="207.5" >_$L..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="555.4" y="181" width="0.2" height="15.0" fill="rgb(222,204,48)" rx="2" ry="2" />
<text  x="558.39" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="15.1" y="389" width="0.2" height="15.0" fill="rgb(247,190,36)" rx="2" ry="2" />
<text  x="18.15" y="399.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(248,197,46)" rx="2" ry="2" />
<text  x="1192.81" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (389 samples, 6.28%)</title><rect x="1027.6" y="373" width="74.1" height="15.0" fill="rgb(213,195,37)" rx="2" ry="2" />
<text  x="1030.58" y="383.5" >alloc::r..</text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1 samples, 0.02%)</title><rect x="135.1" y="357" width="0.1" height="15.0" fill="rgb(216,7,4)" rx="2" ry="2" />
<text  x="138.05" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1155.1" y="181" width="0.2" height="15.0" fill="rgb(253,86,54)" rx="2" ry="2" />
<text  x="1158.11" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (1 samples, 0.02%)</title><rect x="27.3" y="261" width="0.2" height="15.0" fill="rgb(250,96,14)" rx="2" ry="2" />
<text  x="30.35" y="271.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.71%)</title><rect x="399.1" y="85" width="8.4" height="15.0" fill="rgb(209,149,2)" rx="2" ry="2" />
<text  x="402.08" y="95.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="856.8" y="69" width="0.9" height="15.0" fill="rgb(238,57,23)" rx="2" ry="2" />
<text  x="859.78" y="79.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,272 samples, 36.70%)</title><rect x="161.7" y="245" width="433.2" height="15.0" fill="rgb(231,154,40)" rx="2" ry="2" />
<text  x="164.74" y="255.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::i..</text>
</g>
<g >
<title>alloc::str::join_generic_copy (348 samples, 5.62%)</title><rect x="51.6" y="373" width="66.3" height="15.0" fill="rgb(243,15,23)" rx="2" ry="2" />
<text  x="54.56" y="383.5" >alloc::..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.02%)</title><rect x="10.2" y="405" width="0.2" height="15.0" fill="rgb(234,119,22)" rx="2" ry="2" />
<text  x="13.19" y="415.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="945.0" y="149" width="0.6" height="15.0" fill="rgb(214,161,2)" rx="2" ry="2" />
<text  x="948.04" y="159.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.05%)</title><rect x="1168.1" y="229" width="0.5" height="15.0" fill="rgb(241,193,20)" rx="2" ry="2" />
<text  x="1171.08" y="239.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (22 samples, 0.36%)</title><rect x="347.2" y="117" width="4.2" height="15.0" fill="rgb(215,195,1)" rx="2" ry="2" />
<text  x="350.22" y="127.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.03%)</title><rect x="1170.6" y="277" width="0.3" height="15.0" fill="rgb(244,52,32)" rx="2" ry="2" />
<text  x="1173.56" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (4,609 samples, 74.46%)</title><rect x="135.2" y="389" width="878.7" height="15.0" fill="rgb(221,73,3)" rx="2" ry="2" />
<text  x="138.24" y="399.5" >core::iter::traits::iterator::Iterator::collect</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="1128.4" y="373" width="0.4" height="15.0" fill="rgb(223,98,54)" rx="2" ry="2" />
<text  x="1131.43" y="383.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="10.2" y="517" width="0.2" height="15.0" fill="rgb(205,220,36)" rx="2" ry="2" />
<text  x="13.19" y="527.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::hf75378fdeeb87fb3 (219 samples, 3.54%)</title><rect x="553.1" y="213" width="41.8" height="15.0" fill="rgb(254,80,18)" rx="2" ry="2" />
<text  x="556.11" y="223.5" >cor..</text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals (492 samples, 7.95%)</title><rect x="845.9" y="165" width="93.8" height="15.0" fill="rgb(206,0,33)" rx="2" ry="2" />
<text  x="848.91" y="175.5" >regex::exec..</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::and_then (21 samples, 0.34%)</title><rect x="87.4" y="357" width="4.0" height="15.0" fill="rgb(230,142,20)" rx="2" ry="2" />
<text  x="90.40" y="367.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.10%)</title><rect x="90.1" y="261" width="1.1" height="15.0" fill="rgb(249,86,30)" rx="2" ry="2" />
<text  x="93.06" y="271.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::_find (549 samples, 8.87%)</title><rect x="407.5" y="85" width="104.6" height="15.0" fill="rgb(214,143,39)" rx="2" ry="2" />
<text  x="410.46" y="95.5" >regex::liter..</text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h9f7f6e9e068e95d2 (6,188 samples, 99.97%)</title><rect x="10.4" y="453" width="1179.6" height="15.0" fill="rgb(251,111,1)" rx="2" ry="2" />
<text  x="13.38" y="463.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h9f7f6e9e068e95d2</text>
</g>
<g >
<title>std::io::Write::write_fmt (33 samples, 0.53%)</title><rect x="1183.7" y="421" width="6.3" height="15.0" fill="rgb(237,123,40)" rx="2" ry="2" />
<text  x="1186.71" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (5 samples, 0.08%)</title><rect x="1181.0" y="341" width="1.0" height="15.0" fill="rgb(247,160,8)" rx="2" ry="2" />
<text  x="1184.04" y="351.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.03%)</title><rect x="548.1" y="117" width="0.4" height="15.0" fill="rgb(245,27,18)" rx="2" ry="2" />
<text  x="551.15" y="127.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.05%)</title><rect x="1168.1" y="213" width="0.5" height="15.0" fill="rgb(239,94,49)" rx="2" ry="2" />
<text  x="1171.08" y="223.5" ></text>
</g>
<g >
<title>choose::choice::Choice::is_reverse_range (63 samples, 1.02%)</title><rect x="582.7" y="133" width="12.0" height="15.0" fill="rgb(211,33,52)" rx="2" ry="2" />
<text  x="585.65" y="143.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect x="964.5" y="197" width="0.2" height="15.0" fill="rgb(213,139,36)" rx="2" ry="2" />
<text  x="967.48" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.05%)</title><rect x="1188.9" y="293" width="0.5" height="15.0" fill="rgb(223,195,16)" rx="2" ry="2" />
<text  x="1191.86" y="303.5" ></text>
</g>
<g >
<title>__rust_alloc (6 samples, 0.10%)</title><rect x="1012.0" y="261" width="1.1" height="15.0" fill="rgb(218,85,43)" rx="2" ry="2" />
<text  x="1014.95" y="271.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="10.0" y="549" width="0.2" height="15.0" fill="rgb(249,115,14)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.03%)</title><rect x="1170.6" y="341" width="0.3" height="15.0" fill="rgb(249,207,10)" rx="2" ry="2" />
<text  x="1173.56" y="351.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.03%)</title><rect x="753.3" y="245" width="0.3" height="15.0" fill="rgb(241,168,1)" rx="2" ry="2" />
<text  x="756.27" y="255.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.24%)</title><rect x="58.8" y="357" width="2.9" height="15.0" fill="rgb(218,26,38)" rx="2" ry="2" />
<text  x="61.80" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.27%)</title><rect x="879.7" y="117" width="3.2" height="15.0" fill="rgb(236,144,21)" rx="2" ry="2" />
<text  x="882.65" y="127.5" ></text>
</g>
<g >
<title>core::cmp::max_by (2 samples, 0.03%)</title><rect x="752.9" y="213" width="0.4" height="15.0" fill="rgb(243,211,51)" rx="2" ry="2" />
<text  x="755.89" y="223.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="1023.8" y="181" width="0.2" height="15.0" fill="rgb(226,179,48)" rx="2" ry="2" />
<text  x="1026.77" y="191.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals::_$u7b$$u7b$closure$u7d$$u7d$::hb4a1f9e0f6d9d052 (80 samples, 1.29%)</title><rect x="332.0" y="101" width="15.2" height="15.0" fill="rgb(231,188,53)" rx="2" ry="2" />
<text  x="334.97" y="111.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (51 samples, 0.82%)</title><rect x="953.2" y="229" width="9.8" height="15.0" fill="rgb(221,131,50)" rx="2" ry="2" />
<text  x="956.24" y="239.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.03%)</title><rect x="549.1" y="149" width="0.4" height="15.0" fill="rgb(214,136,47)" rx="2" ry="2" />
<text  x="552.10" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="1155.1" y="245" width="0.2" height="15.0" fill="rgb(226,30,30)" rx="2" ry="2" />
<text  x="1158.11" y="255.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::push_compiled (1 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(219,82,14)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match::imp (9 samples, 0.15%)</title><rect x="945.6" y="149" width="1.7" height="15.0" fill="rgb(247,96,24)" rx="2" ry="2" />
<text  x="948.61" y="159.5" ></text>
</g>
<g >
<title>__rdl_realloc (36 samples, 0.58%)</title><rect x="745.5" y="229" width="6.8" height="15.0" fill="rgb(212,97,26)" rx="2" ry="2" />
<text  x="748.45" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (11 samples, 0.18%)</title><rect x="1150.3" y="213" width="2.1" height="15.0" fill="rgb(235,215,6)" rx="2" ry="2" />
<text  x="1153.35" y="223.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (2 samples, 0.03%)</title><rect x="994.2" y="213" width="0.4" height="15.0" fill="rgb(248,15,47)" rx="2" ry="2" />
<text  x="997.22" y="223.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="517" width="0.2" height="15.0" fill="rgb(229,32,29)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>regex::compile::CompileClass::compile (1 samples, 0.02%)</title><rect x="10.2" y="213" width="0.2" height="15.0" fill="rgb(211,186,1)" rx="2" ry="2" />
<text  x="13.19" y="223.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(240,133,22)" rx="2" ry="2" />
<text  x="1192.81" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::with_capacity (81 samples, 1.31%)</title><rect x="71.8" y="357" width="15.4" height="15.0" fill="rgb(249,200,17)" rx="2" ry="2" />
<text  x="74.76" y="367.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (221 samples, 3.57%)</title><rect x="1128.8" y="373" width="42.1" height="15.0" fill="rgb(209,38,38)" rx="2" ry="2" />
<text  x="1131.81" y="383.5" >&lt;st..</text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (14 samples, 0.23%)</title><rect x="1152.4" y="245" width="2.7" height="15.0" fill="rgb(254,65,10)" rx="2" ry="2" />
<text  x="1155.45" y="255.5" ></text>
</g>
<g >
<title>_start (6,188 samples, 99.97%)</title><rect x="10.4" y="597" width="1179.6" height="15.0" fill="rgb(225,97,0)" rx="2" ry="2" />
<text  x="13.38" y="607.5" >_start</text>
</g>
<g >
<title>__GI___libc_malloc (56 samples, 0.90%)</title><rect x="73.5" y="277" width="10.7" height="15.0" fill="rgb(226,13,49)" rx="2" ry="2" />
<text  x="76.48" y="287.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="17.1" y="373" width="0.5" height="15.0" fill="rgb(233,21,38)" rx="2" ry="2" />
<text  x="20.05" y="383.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="463.3" y="53" width="0.4" height="15.0" fill="rgb(215,133,16)" rx="2" ry="2" />
<text  x="466.32" y="63.5" ></text>
</g>
<g >
<title>__GI___libc_write (14 samples, 0.23%)</title><rect x="1152.4" y="181" width="2.7" height="15.0" fill="rgb(220,184,39)" rx="2" ry="2" />
<text  x="1155.45" y="191.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::hf75378fdeeb87fb3 (157 samples, 2.54%)</title><rect x="964.7" y="245" width="29.9" height="15.0" fill="rgb(210,197,29)" rx="2" ry="2" />
<text  x="967.68" y="255.5" >co..</text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find (843 samples, 13.62%)</title><rect x="351.4" y="117" width="160.7" height="15.0" fill="rgb(222,27,34)" rx="2" ry="2" />
<text  x="354.42" y="127.5" >regex::literal::imp:..</text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.34%)</title><rect x="947.3" y="181" width="4.0" height="15.0" fill="rgb(225,105,5)" rx="2" ry="2" />
<text  x="950.33" y="191.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.2" y="325" width="0.2" height="15.0" fill="rgb(236,132,34)" rx="2" ry="2" />
<text  x="13.19" y="335.5" ></text>
</g>
<g >
<title>alloc::string::String::pop (1 samples, 0.02%)</title><rect x="15.1" y="405" width="0.2" height="15.0" fill="rgb(242,139,19)" rx="2" ry="2" />
<text  x="18.15" y="415.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.05%)</title><rect x="23.0" y="341" width="0.5" height="15.0" fill="rgb(211,185,15)" rx="2" ry="2" />
<text  x="25.96" y="351.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="1170.6" y="309" width="0.3" height="15.0" fill="rgb(247,180,48)" rx="2" ry="2" />
<text  x="1173.56" y="319.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc (13 samples, 0.21%)</title><rect x="1181.0" y="357" width="2.5" height="15.0" fill="rgb(214,49,47)" rx="2" ry="2" />
<text  x="1184.04" y="367.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.05%)</title><rect x="1168.1" y="245" width="0.5" height="15.0" fill="rgb(241,209,8)" rx="2" ry="2" />
<text  x="1171.08" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (14 samples, 0.23%)</title><rect x="1152.4" y="229" width="2.7" height="15.0" fill="rgb(221,113,27)" rx="2" ry="2" />
<text  x="1155.45" y="239.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (4 samples, 0.06%)</title><rect x="760.9" y="309" width="0.8" height="15.0" fill="rgb(209,173,25)" rx="2" ry="2" />
<text  x="763.89" y="319.5" ></text>
</g>
<g >
<title>core::ptr::write (1 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(239,111,19)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="518.6" y="117" width="0.2" height="15.0" fill="rgb(223,2,28)" rx="2" ry="2" />
<text  x="521.60" y="127.5" ></text>
</g>
<g >
<title>&lt;choose::config::Opt as structopt::StructOpt&gt;::from_clap (1 samples, 0.02%)</title><rect x="10.2" y="565" width="0.2" height="15.0" fill="rgb(249,79,32)" rx="2" ry="2" />
<text  x="13.19" y="575.5" ></text>
</g>
<g >
<title>choose::main (6,188 samples, 99.97%)</title><rect x="10.4" y="437" width="1179.6" height="15.0" fill="rgb(222,227,40)" rx="2" ry="2" />
<text  x="13.38" y="447.5" >choose::main</text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (89 samples, 1.44%)</title><rect x="531.6" y="165" width="16.9" height="15.0" fill="rgb(254,142,12)" rx="2" ry="2" />
<text  x="534.56" y="175.5" ></text>
</g>
<g >
<title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1023.8" y="197" width="0.2" height="15.0" fill="rgb(214,180,49)" rx="2" ry="2" />
<text  x="1026.77" y="207.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,713 samples, 27.67%)</title><rect x="199.7" y="181" width="326.5" height="15.0" fill="rgb(234,45,33)" rx="2" ry="2" />
<text  x="202.68" y="191.5" >&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::..</text>
</g>
<g >
<title>std::thread::local::fast::Key&lt;T&gt;::get (4 samples, 0.06%)</title><rect x="1023.2" y="213" width="0.8" height="15.0" fill="rgb(240,193,22)" rx="2" ry="2" />
<text  x="1026.20" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7 samples, 0.11%)</title><rect x="156.2" y="325" width="1.3" height="15.0" fill="rgb(210,190,39)" rx="2" ry="2" />
<text  x="159.21" y="335.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::h080e6bb3659e3f62 (190 samples, 3.07%)</title><rect x="558.4" y="181" width="36.3" height="15.0" fill="rgb(237,158,30)" rx="2" ry="2" />
<text  x="561.44" y="191.5" >cor..</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Read for alloc::boxed::Box&lt;R&gt;&gt;::read (3 samples, 0.05%)</title><rect x="23.0" y="325" width="0.5" height="15.0" fill="rgb(207,188,31)" rx="2" ry="2" />
<text  x="25.96" y="335.5" ></text>
</g>
<g >
<title>core::fmt::write (329 samples, 5.32%)</title><rect x="1117.2" y="389" width="62.7" height="15.0" fill="rgb(226,226,39)" rx="2" ry="2" />
<text  x="1120.18" y="399.5" >core::..</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(213,196,17)" rx="2" ry="2" />
<text  x="1192.81" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (92 samples, 1.49%)</title><rect x="96.9" y="325" width="17.6" height="15.0" fill="rgb(236,38,40)" rx="2" ry="2" />
<text  x="99.93" y="335.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h5502bfd3c1b25871 (1 samples, 0.02%)</title><rect x="964.5" y="181" width="0.2" height="15.0" fill="rgb(247,193,48)" rx="2" ry="2" />
<text  x="967.48" y="191.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1155.1" y="197" width="0.2" height="15.0" fill="rgb(254,83,26)" rx="2" ry="2" />
<text  x="1158.11" y="207.5" ></text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (390 samples, 6.30%)</title><rect x="1027.4" y="389" width="74.3" height="15.0" fill="rgb(208,77,22)" rx="2" ry="2" />
<text  x="1030.39" y="399.5" >&lt;alloc::..</text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.06%)</title><rect x="760.9" y="261" width="0.8" height="15.0" fill="rgb(210,91,44)" rx="2" ry="2" />
<text  x="763.89" y="271.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="91.2" y="245" width="0.2" height="15.0" fill="rgb(241,141,40)" rx="2" ry="2" />
<text  x="94.21" y="255.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::_find (298 samples, 4.81%)</title><rect x="882.9" y="117" width="56.8" height="15.0" fill="rgb(234,17,44)" rx="2" ry="2" />
<text  x="885.89" y="127.5" >regex:..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (5 samples, 0.08%)</title><rect x="753.6" y="261" width="1.0" height="15.0" fill="rgb(253,119,34)" rx="2" ry="2" />
<text  x="756.65" y="271.5" ></text>
</g>
<g >
<title>choose::choice::Choice::is_reverse_range (37 samples, 0.60%)</title><rect x="987.2" y="165" width="7.0" height="15.0" fill="rgb(212,28,10)" rx="2" ry="2" />
<text  x="990.17" y="175.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.02%)</title><rect x="87.2" y="357" width="0.2" height="15.0" fill="rgb(235,63,15)" rx="2" ry="2" />
<text  x="90.21" y="367.5" ></text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.02%)</title><rect x="17.6" y="373" width="0.2" height="15.0" fill="rgb(239,195,41)" rx="2" ry="2" />
<text  x="20.63" y="383.5" ></text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or (21 samples, 0.34%)</title><rect x="1020.3" y="309" width="4.0" height="15.0" fill="rgb(221,28,26)" rx="2" ry="2" />
<text  x="1023.34" y="319.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(227,200,4)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.03%)</title><rect x="1155.3" y="245" width="0.4" height="15.0" fill="rgb(226,137,49)" rx="2" ry="2" />
<text  x="1158.31" y="255.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,222 samples, 19.74%)</title><rect x="761.7" y="277" width="232.9" height="15.0" fill="rgb(239,67,35)" rx="2" ry="2" />
<text  x="764.65" y="287.5" >&lt;core::iter::adapters::Filter&lt;..</text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::find_at (664 samples, 10.73%)</title><rect x="820.7" y="181" width="126.6" height="15.0" fill="rgb(247,99,39)" rx="2" ry="2" />
<text  x="823.75" y="191.5" >&lt;regex::exec::E..</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (19 samples, 0.31%)</title><rect x="748.7" y="213" width="3.6" height="15.0" fill="rgb(209,110,5)" rx="2" ry="2" />
<text  x="751.69" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="752.7" y="213" width="0.2" height="15.0" fill="rgb(245,79,33)" rx="2" ry="2" />
<text  x="755.69" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (97 samples, 1.57%)</title><rect x="994.6" y="309" width="18.5" height="15.0" fill="rgb(239,27,25)" rx="2" ry="2" />
<text  x="997.60" y="319.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (7 samples, 0.11%)</title><rect x="744.1" y="197" width="1.4" height="15.0" fill="rgb(254,58,50)" rx="2" ry="2" />
<text  x="747.12" y="207.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (386 samples, 6.24%)</title><rect x="1027.6" y="357" width="73.6" height="15.0" fill="rgb(223,182,45)" rx="2" ry="2" />
<text  x="1030.58" y="367.5" >&lt;alloc::..</text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h56a3036b65774dda (1 samples, 0.02%)</title><rect x="552.9" y="197" width="0.2" height="15.0" fill="rgb(227,7,42)" rx="2" ry="2" />
<text  x="555.91" y="207.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (3 samples, 0.05%)</title><rect x="23.0" y="277" width="0.5" height="15.0" fill="rgb(243,209,42)" rx="2" ry="2" />
<text  x="25.96" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.05%)</title><rect x="1188.9" y="277" width="0.5" height="15.0" fill="rgb(227,123,26)" rx="2" ry="2" />
<text  x="1191.86" y="287.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.2" y="277" width="0.2" height="15.0" fill="rgb(247,11,17)" rx="2" ry="2" />
<text  x="13.19" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (16 samples, 0.26%)</title><rect x="24.5" y="309" width="3.0" height="15.0" fill="rgb(227,202,31)" rx="2" ry="2" />
<text  x="27.49" y="319.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,609 samples, 74.46%)</title><rect x="135.2" y="373" width="878.7" height="15.0" fill="rgb(205,64,34)" rx="2" ry="2" />
<text  x="138.24" y="383.5" >&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text>
</g>
<g >
<title>alloc::alloc::alloc (97 samples, 1.57%)</title><rect x="994.6" y="277" width="18.5" height="15.0" fill="rgb(208,101,1)" rx="2" ry="2" />
<text  x="997.60" y="287.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (13 samples, 0.21%)</title><rect x="1181.0" y="373" width="2.5" height="15.0" fill="rgb(215,121,39)" rx="2" ry="2" />
<text  x="1184.04" y="383.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (42 samples, 0.68%)</title><rect x="63.8" y="325" width="8.0" height="15.0" fill="rgb(207,72,44)" rx="2" ry="2" />
<text  x="66.76" y="335.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::hc5536b4b8270958d (8 samples, 0.13%)</title><rect x="551.4" y="197" width="1.5" height="15.0" fill="rgb(248,84,7)" rx="2" ry="2" />
<text  x="554.39" y="207.5" ></text>
</g>
<g >
<title>core::cmp::max (3 samples, 0.05%)</title><rect x="752.7" y="245" width="0.6" height="15.0" fill="rgb(237,219,21)" rx="2" ry="2" />
<text  x="755.69" y="255.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="27.5" y="341" width="0.2" height="15.0" fill="rgb(210,76,39)" rx="2" ry="2" />
<text  x="30.54" y="351.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::split_at_mut (17 samples, 0.27%)</title><rect x="114.7" y="357" width="3.2" height="15.0" fill="rgb(225,96,21)" rx="2" ry="2" />
<text  x="117.66" y="367.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (6,024 samples, 97.32%)</title><rect x="32.3" y="421" width="1148.4" height="15.0" fill="rgb(225,17,25)" rx="2" ry="2" />
<text  x="35.30" y="431.5" >choose::choice::Choice::print_choice</text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (40 samples, 0.65%)</title><rect x="914.7" y="69" width="7.7" height="15.0" fill="rgb(210,41,2)" rx="2" ry="2" />
<text  x="917.73" y="79.5" ></text>
</g>
<g >
<title>core::fmt::write (26 samples, 0.42%)</title><rect x="1185.0" y="405" width="5.0" height="15.0" fill="rgb(228,70,13)" rx="2" ry="2" />
<text  x="1188.04" y="415.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.15%)</title><rect x="943.3" y="149" width="1.7" height="15.0" fill="rgb(227,55,36)" rx="2" ry="2" />
<text  x="946.32" y="159.5" ></text>
</g>
<g >
<title>regex::re_trait::Matches&lt;R&gt;::text (5 samples, 0.08%)</title><rect x="963.0" y="229" width="0.9" height="15.0" fill="rgb(248,131,4)" rx="2" ry="2" />
<text  x="965.96" y="239.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.2" y="245" width="0.2" height="15.0" fill="rgb(214,88,17)" rx="2" ry="2" />
<text  x="13.19" y="255.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 2.71%)</title><rect x="480.1" y="69" width="32.0" height="15.0" fill="rgb(208,67,6)" rx="2" ry="2" />
<text  x="483.09" y="79.5" >&lt;c..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (8 samples, 0.13%)</title><rect x="1166.6" y="277" width="1.5" height="15.0" fill="rgb(247,49,42)" rx="2" ry="2" />
<text  x="1169.55" y="287.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (5 samples, 0.08%)</title><rect x="548.5" y="181" width="1.0" height="15.0" fill="rgb(207,79,6)" rx="2" ry="2" />
<text  x="551.53" y="191.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (51 samples, 0.82%)</title><rect x="538.4" y="149" width="9.7" height="15.0" fill="rgb(239,152,40)" rx="2" ry="2" />
<text  x="541.43" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="132.4" y="373" width="0.4" height="15.0" fill="rgb(212,57,47)" rx="2" ry="2" />
<text  x="135.38" y="383.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_concat (1 samples, 0.02%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(233,162,50)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.23%)</title><rect x="24.9" y="293" width="2.6" height="15.0" fill="rgb(216,9,6)" rx="2" ry="2" />
<text  x="27.87" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::with_capacity (97 samples, 1.57%)</title><rect x="994.6" y="341" width="18.5" height="15.0" fill="rgb(218,112,9)" rx="2" ry="2" />
<text  x="997.60" y="351.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h35cea875c8125dbc (6,188 samples, 99.97%)</title><rect x="10.4" y="469" width="1179.6" height="15.0" fill="rgb(206,134,52)" rx="2" ry="2" />
<text  x="13.38" y="479.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h35cea875c8125dbc</text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.03%)</title><rect x="753.3" y="229" width="0.3" height="15.0" fill="rgb(215,152,27)" rx="2" ry="2" />
<text  x="756.27" y="239.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad (44 samples, 0.71%)</title><rect x="1171.5" y="373" width="8.4" height="15.0" fill="rgb(231,183,18)" rx="2" ry="2" />
<text  x="1174.51" y="383.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (74 samples, 1.20%)</title><rect x="73.1" y="293" width="14.1" height="15.0" fill="rgb(214,173,23)" rx="2" ry="2" />
<text  x="76.10" y="303.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h56a3036b65774dda (2 samples, 0.03%)</title><rect x="994.2" y="229" width="0.4" height="15.0" fill="rgb(217,4,54)" rx="2" ry="2" />
<text  x="997.22" y="239.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (80 samples, 1.29%)</title><rect x="332.0" y="117" width="15.2" height="15.0" fill="rgb(218,94,44)" rx="2" ry="2" />
<text  x="334.97" y="127.5" ></text>
</g>
<g >
<title>choose (6,190 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(229,188,1)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >choose</text>
</g>
<g >
<title>std::panicking::try::do_call (6,188 samples, 99.97%)</title><rect x="10.4" y="485" width="1179.6" height="15.0" fill="rgb(218,168,28)" rx="2" ry="2" />
<text  x="13.38" y="495.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="114.5" y="357" width="0.2" height="15.0" fill="rgb(245,186,43)" rx="2" ry="2" />
<text  x="117.47" y="367.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::h080e6bb3659e3f62 (122 samples, 1.97%)</title><rect x="971.0" y="213" width="23.2" height="15.0" fill="rgb(214,65,47)" rx="2" ry="2" />
<text  x="973.97" y="223.5" >c..</text>
</g>
<g >
<title>std::io::append_to_string (1 samples, 0.02%)</title><rect x="22.8" y="293" width="0.2" height="15.0" fill="rgb(209,212,0)" rx="2" ry="2" />
<text  x="25.77" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="23.5" y="341" width="0.4" height="15.0" fill="rgb(216,131,44)" rx="2" ry="2" />
<text  x="26.53" y="351.5" ></text>
</g>
<g >
<title>__rdl_dealloc (6 samples, 0.10%)</title><rect x="1040.2" y="325" width="1.1" height="15.0" fill="rgb(242,198,24)" rx="2" ry="2" />
<text  x="1043.16" y="335.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(224,49,5)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.03%)</title><rect x="1189.4" y="293" width="0.4" height="15.0" fill="rgb(212,82,4)" rx="2" ry="2" />
<text  x="1192.43" y="303.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (892 samples, 14.41%)</title><rect x="781.3" y="213" width="170.0" height="15.0" fill="rgb(247,49,50)" rx="2" ry="2" />
<text  x="784.29" y="223.5" >&lt;regex::re_trait::Matc..</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.08%)</title><rect x="856.8" y="149" width="0.9" height="15.0" fill="rgb(249,97,9)" rx="2" ry="2" />
<text  x="859.78" y="159.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.19%)</title><rect x="754.6" y="229" width="2.3" height="15.0" fill="rgb(227,166,29)" rx="2" ry="2" />
<text  x="757.60" y="239.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="114.5" y="325" width="0.2" height="15.0" fill="rgb(235,18,31)" rx="2" ry="2" />
<text  x="117.47" y="335.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (11 samples, 0.18%)</title><rect x="1150.3" y="229" width="2.1" height="15.0" fill="rgb(217,182,5)" rx="2" ry="2" />
<text  x="1153.35" y="239.5" ></text>
</g>
<g >
<title>core::alloc::Layout::array (12 samples, 0.19%)</title><rect x="754.6" y="261" width="2.3" height="15.0" fill="rgb(249,82,38)" rx="2" ry="2" />
<text  x="757.60" y="271.5" ></text>
</g>
<g >
<title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.16%)</title><rect x="144.8" y="357" width="1.9" height="15.0" fill="rgb(230,79,45)" rx="2" ry="2" />
<text  x="147.78" y="367.5" ></text>
</g>
<g >
<title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="10.2" y="197" width="0.2" height="15.0" fill="rgb(220,145,31)" rx="2" ry="2" />
<text  x="13.19" y="207.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::is_empty (10 samples, 0.16%)</title><rect x="1168.6" y="341" width="2.0" height="15.0" fill="rgb(206,31,43)" rx="2" ry="2" />
<text  x="1171.65" y="351.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.05%)</title><rect x="23.0" y="309" width="0.5" height="15.0" fill="rgb(253,28,34)" rx="2" ry="2" />
<text  x="25.96" y="319.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (88 samples, 1.42%)</title><rect x="463.3" y="69" width="16.8" height="15.0" fill="rgb(231,98,38)" rx="2" ry="2" />
<text  x="466.32" y="79.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,222 samples, 19.74%)</title><rect x="761.7" y="341" width="232.9" height="15.0" fill="rgb(213,4,24)" rx="2" ry="2" />
<text  x="764.65" y="351.5" >&lt;core::iter::adapters::Map&lt;I,F..</text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="1170.6" y="325" width="0.3" height="15.0" fill="rgb(212,90,18)" rx="2" ry="2" />
<text  x="1173.56" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.13%)</title><rect x="38.6" y="405" width="1.5" height="15.0" fill="rgb(214,71,34)" rx="2" ry="2" />
<text  x="41.59" y="415.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.10%)</title><rect x="1023.2" y="261" width="1.1" height="15.0" fill="rgb(208,179,50)" rx="2" ry="2" />
<text  x="1026.20" y="271.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::h14d7ae7514331ff4 (155 samples, 2.50%)</title><rect x="964.7" y="229" width="29.5" height="15.0" fill="rgb(215,178,37)" rx="2" ry="2" />
<text  x="967.68" y="239.5" >_$..</text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (74 samples, 1.20%)</title><rect x="73.1" y="309" width="14.1" height="15.0" fill="rgb(222,19,8)" rx="2" ry="2" />
<text  x="76.10" y="319.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.18%)</title><rect x="89.1" y="293" width="2.1" height="15.0" fill="rgb(253,220,54)" rx="2" ry="2" />
<text  x="92.11" y="303.5" ></text>
</g>
<g >
<title>std::io::BufRead::read_line (87 samples, 1.41%)</title><rect x="15.7" y="405" width="16.6" height="15.0" fill="rgb(253,174,11)" rx="2" ry="2" />
<text  x="18.72" y="415.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.03%)</title><rect x="962.0" y="165" width="0.4" height="15.0" fill="rgb(244,227,37)" rx="2" ry="2" />
<text  x="965.01" y="175.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (12 samples, 0.19%)</title><rect x="1187.7" y="341" width="2.3" height="15.0" fill="rgb(249,140,28)" rx="2" ry="2" />
<text  x="1190.71" y="351.5" ></text>
</g>
<g >
<title>__rust_dealloc (5 samples, 0.08%)</title><rect x="1041.3" y="325" width="1.0" height="15.0" fill="rgb(235,220,30)" rx="2" ry="2" />
<text  x="1044.31" y="335.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 0.65%)</title><rect x="914.7" y="85" width="7.7" height="15.0" fill="rgb(212,131,41)" rx="2" ry="2" />
<text  x="917.73" y="95.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::hf629ebdeb30c9c22 (190 samples, 3.07%)</title><rect x="558.4" y="149" width="36.3" height="15.0" fill="rgb(219,55,49)" rx="2" ry="2" />
<text  x="561.44" y="159.5" >cho..</text>
</g>
<g >
<title>core::cmp::min (1 samples, 0.02%)</title><rect x="22.8" y="325" width="0.2" height="15.0" fill="rgb(206,212,22)" rx="2" ry="2" />
<text  x="25.77" y="335.5" ></text>
</g>
<g >
<title>regex::compile::CompileClass::c_utf8_seq (1 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(236,179,7)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (14 samples, 0.23%)</title><rect x="1152.4" y="197" width="2.7" height="15.0" fill="rgb(214,106,8)" rx="2" ry="2" />
<text  x="1155.45" y="207.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="13.4" y="421" width="0.6" height="15.0" fill="rgb(250,155,17)" rx="2" ry="2" />
<text  x="16.43" y="431.5" ></text>
</g>
<g >
<title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 1.55%)</title><rect x="14.0" y="421" width="18.3" height="15.0" fill="rgb(214,197,15)" rx="2" ry="2" />
<text  x="17.00" y="431.5" ></text>
</g>
<g >
<title>std::io::BufRead::read_line::_$u7b$$u7b$closure$u7d$$u7d$::h5f3f1d2a8b05e001 (55 samples, 0.89%)</title><rect x="21.8" y="373" width="10.5" height="15.0" fill="rgb(241,27,38)" rx="2" ry="2" />
<text  x="24.82" y="383.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::find (594 samples, 9.60%)</title><rect x="398.9" y="101" width="113.2" height="15.0" fill="rgb(215,192,32)" rx="2" ry="2" />
<text  x="401.89" y="111.5" >regex::litera..</text>
</g>
<g >
<title>__GI___libc_write (10 samples, 0.16%)</title><rect x="1150.3" y="197" width="2.0" height="15.0" fill="rgb(211,53,45)" rx="2" ry="2" />
<text  x="1153.35" y="207.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.2" y="229" width="0.2" height="15.0" fill="rgb(251,3,34)" rx="2" ry="2" />
<text  x="13.19" y="239.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect x="15.5" y="341" width="0.2" height="15.0" fill="rgb(206,10,47)" rx="2" ry="2" />
<text  x="18.53" y="351.5" ></text>
</g>
<g >
<title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="15.5" y="325" width="0.2" height="15.0" fill="rgb(233,103,53)" rx="2" ry="2" />
<text  x="18.53" y="335.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (2,253 samples, 36.40%)</title><rect x="165.4" y="229" width="429.5" height="15.0" fill="rgb(205,114,46)" rx="2" ry="2" />
<text  x="168.36" y="239.5" >core::iter::traits::iterator::Iterator::try_fold</text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (5 samples, 0.08%)</title><rect x="61.7" y="357" width="0.9" height="15.0" fill="rgb(213,213,18)" rx="2" ry="2" />
<text  x="64.66" y="367.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (68 samples, 1.10%)</title><rect x="1155.7" y="325" width="12.9" height="15.0" fill="rgb(225,149,8)" rx="2" ry="2" />
<text  x="1158.69" y="335.5" ></text>
</g>
<g >
<title>regex::re_trait::Matches&lt;R&gt;::text (10 samples, 0.16%)</title><rect x="549.5" y="197" width="1.9" height="15.0" fill="rgb(243,166,15)" rx="2" ry="2" />
<text  x="552.48" y="207.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::hf629ebdeb30c9c22 (122 samples, 1.97%)</title><rect x="971.0" y="181" width="23.2" height="15.0" fill="rgb(238,118,18)" rx="2" ry="2" />
<text  x="973.97" y="191.5" >c..</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.08%)</title><rect x="1011.0" y="245" width="1.0" height="15.0" fill="rgb(226,110,42)" rx="2" ry="2" />
<text  x="1014.00" y="255.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match::imp (13 samples, 0.21%)</title><rect x="518.8" y="117" width="2.5" height="15.0" fill="rgb(235,189,19)" rx="2" ry="2" />
<text  x="521.79" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (12 samples, 0.19%)</title><rect x="25.1" y="261" width="2.2" height="15.0" fill="rgb(246,7,5)" rx="2" ry="2" />
<text  x="28.06" y="271.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="1189.4" y="277" width="0.4" height="15.0" fill="rgb(217,180,52)" rx="2" ry="2" />
<text  x="1192.43" y="287.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (3 samples, 0.05%)</title><rect x="1168.1" y="277" width="0.5" height="15.0" fill="rgb(233,34,47)" rx="2" ry="2" />
<text  x="1171.08" y="287.5" ></text>
</g>
<g >
<title>all (6,190 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(247,54,3)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (104 samples, 1.68%)</title><rect x="1148.8" y="341" width="19.8" height="15.0" fill="rgb(245,89,52)" rx="2" ry="2" />
<text  x="1151.82" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (806 samples, 13.02%)</title><rect x="598.9" y="261" width="153.6" height="15.0" fill="rgb(216,38,44)" rx="2" ry="2" />
<text  x="601.86" y="271.5" >&lt;alloc::alloc::Glob..</text>
</g>
<g >
<title>alloc::string::String::from_utf8_unchecked (26 samples, 0.42%)</title><rect x="117.9" y="373" width="5.0" height="15.0" fill="rgb(222,165,7)" rx="2" ry="2" />
<text  x="120.90" y="383.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.03%)</title><rect x="1170.6" y="293" width="0.3" height="15.0" fill="rgb(220,78,29)" rx="2" ry="2" />
<text  x="1173.56" y="303.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (42 samples, 0.68%)</title><rect x="954.4" y="197" width="8.0" height="15.0" fill="rgb(234,138,31)" rx="2" ry="2" />
<text  x="957.38" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (308 samples, 4.98%)</title><rect x="685.4" y="197" width="58.7" height="15.0" fill="rgb(245,82,6)" rx="2" ry="2" />
<text  x="688.40" y="207.5" >_int_m..</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (22 samples, 0.36%)</title><rect x="526.2" y="181" width="4.2" height="15.0" fill="rgb(222,51,29)" rx="2" ry="2" />
<text  x="529.23" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (38 samples, 0.61%)</title><rect x="64.5" y="293" width="7.3" height="15.0" fill="rgb(229,154,12)" rx="2" ry="2" />
<text  x="67.52" y="303.5" ></text>
</g>
<g >
<title>main (6,188 samples, 99.97%)</title><rect x="10.4" y="565" width="1179.6" height="15.0" fill="rgb(216,136,43)" rx="2" ry="2" />
<text  x="13.38" y="575.5" >main</text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 2.71%)</title><rect x="480.1" y="53" width="32.0" height="15.0" fill="rgb(213,208,16)" rx="2" ry="2" />
<text  x="483.09" y="63.5" >&lt;c..</text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals::_$u7b$$u7b$closure$u7d$$u7d$::hb4a1f9e0f6d9d052 (40 samples, 0.65%)</title><rect x="849.2" y="133" width="7.6" height="15.0" fill="rgb(243,161,2)" rx="2" ry="2" />
<text  x="852.15" y="143.5" ></text>
</g>
<g >
<title>&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (21 samples, 0.34%)</title><rect x="54.4" y="357" width="4.0" height="15.0" fill="rgb(237,55,29)" rx="2" ry="2" />
<text  x="57.42" y="367.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (1 samples, 0.02%)</title><rect x="135.1" y="373" width="0.1" height="15.0" fill="rgb(247,207,27)" rx="2" ry="2" />
<text  x="138.05" y="383.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::ends_with (2 samples, 0.03%)</title><rect x="15.3" y="373" width="0.4" height="15.0" fill="rgb(232,107,30)" rx="2" ry="2" />
<text  x="18.34" y="383.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (40 samples, 0.65%)</title><rect x="849.2" y="149" width="7.6" height="15.0" fill="rgb(205,57,26)" rx="2" ry="2" />
<text  x="852.15" y="159.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.40%)</title><rect x="327.2" y="117" width="4.8" height="15.0" fill="rgb(219,79,11)" rx="2" ry="2" />
<text  x="330.21" y="127.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="1189.8" y="277" width="0.2" height="15.0" fill="rgb(240,56,17)" rx="2" ry="2" />
<text  x="1192.81" y="287.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::find_at (685 samples, 11.07%)</title><rect x="820.7" y="197" width="130.6" height="15.0" fill="rgb(225,162,33)" rx="2" ry="2" />
<text  x="823.75" y="207.5" >&lt;regex::exec::Ex..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4 samples, 0.06%)</title><rect x="761.7" y="261" width="0.7" height="15.0" fill="rgb(223,125,3)" rx="2" ry="2" />
<text  x="764.65" y="271.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_mul (12 samples, 0.19%)</title><rect x="754.6" y="213" width="2.3" height="15.0" fill="rgb(211,172,9)" rx="2" ry="2" />
<text  x="757.60" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (14 samples, 0.23%)</title><rect x="1181.0" y="389" width="2.7" height="15.0" fill="rgb(211,207,42)" rx="2" ry="2" />
<text  x="1184.04" y="399.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (14 samples, 0.23%)</title><rect x="1152.4" y="261" width="2.7" height="15.0" fill="rgb(207,5,15)" rx="2" ry="2" />
<text  x="1155.45" y="271.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.10%)</title><rect x="62.6" y="309" width="1.2" height="15.0" fill="rgb(246,189,54)" rx="2" ry="2" />
<text  x="65.61" y="319.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (22 samples, 0.36%)</title><rect x="347.2" y="101" width="4.2" height="15.0" fill="rgb(233,46,10)" rx="2" ry="2" />
<text  x="350.22" y="111.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match (40 samples, 0.65%)</title><rect x="939.7" y="165" width="7.6" height="15.0" fill="rgb(219,143,43)" rx="2" ry="2" />
<text  x="942.70" y="175.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (22 samples, 0.36%)</title><rect x="347.2" y="53" width="4.2" height="15.0" fill="rgb(210,61,47)" rx="2" ry="2" />
<text  x="350.22" y="63.5" ></text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="17.6" y="357" width="0.2" height="15.0" fill="rgb(247,144,8)" rx="2" ry="2" />
<text  x="20.63" y="367.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1155.1" y="213" width="0.2" height="15.0" fill="rgb(211,160,32)" rx="2" ry="2" />
<text  x="1158.11" y="223.5" ></text>
</g>
<g >
<title>std::io::read_until (54 samples, 0.87%)</title><rect x="22.0" y="357" width="10.3" height="15.0" fill="rgb(205,59,50)" rx="2" ry="2" />
<text  x="25.01" y="367.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (10 samples, 0.16%)</title><rect x="594.9" y="277" width="1.9" height="15.0" fill="rgb(248,3,51)" rx="2" ry="2" />
<text  x="597.85" y="287.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="845.7" y="165" width="0.2" height="15.0" fill="rgb(254,131,4)" rx="2" ry="2" />
<text  x="848.72" y="175.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect x="15.5" y="357" width="0.2" height="15.0" fill="rgb(213,9,43)" rx="2" ry="2" />
<text  x="18.53" y="367.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.03%)</title><rect x="1128.4" y="357" width="0.4" height="15.0" fill="rgb(245,175,13)" rx="2" ry="2" />
<text  x="1131.43" y="367.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 0.44%)</title><rect x="1163.5" y="309" width="5.1" height="15.0" fill="rgb(238,125,25)" rx="2" ry="2" />
<text  x="1166.50" y="319.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.03%)</title><rect x="551.6" y="181" width="0.4" height="15.0" fill="rgb(214,215,2)" rx="2" ry="2" />
<text  x="554.58" y="191.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (3 samples, 0.05%)</title><rect x="23.0" y="293" width="0.5" height="15.0" fill="rgb(245,140,14)" rx="2" ry="2" />
<text  x="25.96" y="303.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (86 samples, 1.39%)</title><rect x="463.7" y="53" width="16.4" height="15.0" fill="rgb(221,69,6)" rx="2" ry="2" />
<text  x="466.70" y="63.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="10.0" y="597" width="0.4" height="15.0" fill="rgb(218,149,4)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.42%)</title><rect x="521.3" y="149" width="4.9" height="15.0" fill="rgb(226,6,42)" rx="2" ry="2" />
<text  x="524.27" y="159.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (14 samples, 0.23%)</title><rect x="1187.3" y="373" width="2.7" height="15.0" fill="rgb(243,188,10)" rx="2" ry="2" />
<text  x="1190.33" y="383.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 1.29%)</title><rect x="72.0" y="325" width="15.2" height="15.0" fill="rgb(210,181,11)" rx="2" ry="2" />
<text  x="74.95" y="335.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (15 samples, 0.24%)</title><rect x="555.6" y="181" width="2.8" height="15.0" fill="rgb(207,51,47)" rx="2" ry="2" />
<text  x="558.58" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4,549 samples, 73.49%)</title><rect x="146.7" y="357" width="867.2" height="15.0" fill="rgb(243,105,5)" rx="2" ry="2" />
<text  x="149.68" y="367.5" >&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text>
</g>
<g >
<title>_$LT$choose..config..Opt$u20$as$u20$structopt..StructOpt$GT$::from_clap::_$u7b$$u7b$closure$u7d$$u7d$::h5471cc77b35597cd (1 samples, 0.02%)</title><rect x="10.2" y="533" width="0.2" height="15.0" fill="rgb(205,32,8)" rx="2" ry="2" />
<text  x="13.19" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="27.3" y="229" width="0.2" height="15.0" fill="rgb(225,51,25)" rx="2" ry="2" />
<text  x="30.35" y="239.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::wrapping_sub (4 samples, 0.06%)</title><rect x="1165.8" y="229" width="0.8" height="15.0" fill="rgb(210,128,50)" rx="2" ry="2" />
<text  x="1168.79" y="239.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2 samples, 0.03%)</title><rect x="962.0" y="181" width="0.4" height="15.0" fill="rgb(244,186,21)" rx="2" ry="2" />
<text  x="965.01" y="191.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.06%)</title><rect x="760.9" y="277" width="0.8" height="15.0" fill="rgb(248,104,38)" rx="2" ry="2" />
<text  x="763.89" y="287.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (29 samples, 0.47%)</title><rect x="965.4" y="213" width="5.6" height="15.0" fill="rgb(246,154,25)" rx="2" ry="2" />
<text  x="968.44" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="10.2" y="469" width="0.2" height="15.0" fill="rgb(206,60,39)" rx="2" ry="2" />
<text  x="13.19" y="479.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="15.0" y="405" width="0.1" height="15.0" fill="rgb(235,91,13)" rx="2" ry="2" />
<text  x="17.96" y="415.5" ></text>
</g>
<g >
<title>core::ops::function::FnMut::call_mut (1 samples, 0.02%)</title><rect x="91.2" y="277" width="0.2" height="15.0" fill="rgb(217,89,29)" rx="2" ry="2" />
<text  x="94.21" y="287.5" ></text>
</g>
<g >
<title>malloc_consolidate (148 samples, 2.39%)</title><rect x="1073.0" y="309" width="28.2" height="15.0" fill="rgb(229,24,17)" rx="2" ry="2" />
<text  x="1075.95" y="319.5" >m..</text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or_try (21 samples, 0.34%)</title><rect x="1020.3" y="293" width="4.0" height="15.0" fill="rgb(208,121,47)" rx="2" ry="2" />
<text  x="1023.34" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (6,188 samples, 99.97%)</title><rect x="10.4" y="581" width="1179.6" height="15.0" fill="rgb(215,13,35)" rx="2" ry="2" />
<text  x="13.38" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>__rust_alloc (3 samples, 0.05%)</title><rect x="86.6" y="277" width="0.6" height="15.0" fill="rgb(235,116,0)" rx="2" ry="2" />
<text  x="89.63" y="287.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::hb4c0dd73b12d69ab (9 samples, 0.15%)</title><rect x="551.4" y="213" width="1.7" height="15.0" fill="rgb(222,19,50)" rx="2" ry="2" />
<text  x="554.39" y="223.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (86 samples, 1.39%)</title><rect x="463.7" y="37" width="16.4" height="15.0" fill="rgb(221,222,27)" rx="2" ry="2" />
<text  x="466.70" y="47.5" ></text>
</g>
<g >
<title>thread_local::thread_id::THREAD_ID::__getit (4 samples, 0.06%)</title><rect x="1023.2" y="229" width="0.8" height="15.0" fill="rgb(244,113,42)" rx="2" ry="2" />
<text  x="1026.20" y="239.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h5502bfd3c1b25871 (5 samples, 0.08%)</title><rect x="552.0" y="149" width="0.9" height="15.0" fill="rgb(249,9,52)" rx="2" ry="2" />
<text  x="554.96" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.10%)</title><rect x="1188.9" y="309" width="1.1" height="15.0" fill="rgb(249,51,46)" rx="2" ry="2" />
<text  x="1191.86" y="319.5" ></text>
</g>
<g >
<title>regex::compile::CompileClass::c_utf8_seq_ (1 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(224,211,39)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (850 samples, 13.73%)</title><rect x="594.9" y="293" width="162.0" height="15.0" fill="rgb(214,104,47)" rx="2" ry="2" />
<text  x="597.85" y="303.5" >alloc::raw_vec::RawV..</text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr (2 samples, 0.03%)</title><rect x="1155.3" y="261" width="0.4" height="15.0" fill="rgb(234,46,18)" rx="2" ry="2" />
<text  x="1158.31" y="271.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals (970 samples, 15.67%)</title><rect x="327.2" y="133" width="184.9" height="15.0" fill="rgb(251,186,28)" rx="2" ry="2" />
<text  x="330.21" y="143.5" >regex::exec::ExecNoSync:..</text>
</g>
<g >
<title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="132.4" y="389" width="0.4" height="15.0" fill="rgb(214,30,48)" rx="2" ry="2" />
<text  x="135.38" y="399.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.0" y="565" width="0.2" height="15.0" fill="rgb(229,23,52)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (19 samples, 0.31%)</title><rect x="161.7" y="229" width="3.7" height="15.0" fill="rgb(224,160,36)" rx="2" ry="2" />
<text  x="164.74" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (97 samples, 1.57%)</title><rect x="994.6" y="325" width="18.5" height="15.0" fill="rgb(251,174,29)" rx="2" ry="2" />
<text  x="997.60" y="335.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.06%)</title><rect x="85.9" y="261" width="0.7" height="15.0" fill="rgb(217,127,4)" rx="2" ry="2" />
<text  x="88.87" y="271.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match (48 samples, 0.78%)</title><rect x="512.1" y="133" width="9.2" height="15.0" fill="rgb(233,172,25)" rx="2" ry="2" />
<text  x="515.12" y="143.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (2 samples, 0.03%)</title><rect x="1024.0" y="245" width="0.3" height="15.0" fill="rgb(247,69,49)" rx="2" ry="2" />
<text  x="1026.96" y="255.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2 samples, 0.03%)</title><rect x="548.1" y="149" width="0.4" height="15.0" fill="rgb(236,13,1)" rx="2" ry="2" />
<text  x="551.15" y="159.5" ></text>
</g>
<g >
<title>core::alloc::Layout::repeat (12 samples, 0.19%)</title><rect x="754.6" y="245" width="2.3" height="15.0" fill="rgb(237,142,22)" rx="2" ry="2" />
<text  x="757.60" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.2" y="485" width="0.2" height="15.0" fill="rgb(249,167,14)" rx="2" ry="2" />
<text  x="13.19" y="495.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (100 samples, 1.62%)</title><rect x="530.4" y="197" width="19.1" height="15.0" fill="rgb(239,58,50)" rx="2" ry="2" />
<text  x="533.42" y="207.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 1.47%)</title><rect x="922.4" y="101" width="17.3" height="15.0" fill="rgb(206,201,5)" rx="2" ry="2" />
<text  x="925.36" y="111.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.26%)</title><rect x="324.2" y="133" width="3.0" height="15.0" fill="rgb(249,86,16)" rx="2" ry="2" />
<text  x="327.16" y="143.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (121 samples, 1.95%)</title><rect x="91.4" y="341" width="23.1" height="15.0" fill="rgb(213,96,51)" rx="2" ry="2" />
<text  x="94.40" y="351.5" >c..</text>
</g>
<g >
<title>__rdl_alloc (11 samples, 0.18%)</title><rect x="1009.9" y="261" width="2.1" height="15.0" fill="rgb(222,162,34)" rx="2" ry="2" />
<text  x="1012.85" y="271.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.08%)</title><rect x="856.8" y="133" width="0.9" height="15.0" fill="rgb(235,213,0)" rx="2" ry="2" />
<text  x="859.78" y="143.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (11 samples, 0.18%)</title><rect x="1022.2" y="277" width="2.1" height="15.0" fill="rgb(220,147,0)" rx="2" ry="2" />
<text  x="1025.25" y="287.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_concat (1 samples, 0.02%)</title><rect x="10.2" y="261" width="0.2" height="15.0" fill="rgb(228,102,6)" rx="2" ry="2" />
<text  x="13.19" y="271.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (4 samples, 0.06%)</title><rect x="548.7" y="165" width="0.8" height="15.0" fill="rgb(216,205,4)" rx="2" ry="2" />
<text  x="551.72" y="175.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.34%)</title><rect x="87.4" y="325" width="4.0" height="15.0" fill="rgb(209,193,48)" rx="2" ry="2" />
<text  x="90.40" y="335.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.27%)</title><rect x="845.9" y="149" width="3.3" height="15.0" fill="rgb(248,112,52)" rx="2" ry="2" />
<text  x="848.91" y="159.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (14 samples, 0.23%)</title><rect x="1181.0" y="421" width="2.7" height="15.0" fill="rgb(213,23,35)" rx="2" ry="2" />
<text  x="1184.04" y="431.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::hd38a2ab49ba52c64 (1 samples, 0.02%)</title><rect x="964.5" y="213" width="0.2" height="15.0" fill="rgb(252,157,11)" rx="2" ry="2" />
<text  x="967.48" y="223.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.05%)</title><rect x="963.9" y="213" width="0.6" height="15.0" fill="rgb(233,33,51)" rx="2" ry="2" />
<text  x="966.91" y="223.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.02%)</title><rect x="552.9" y="181" width="0.2" height="15.0" fill="rgb(229,121,51)" rx="2" ry="2" />
<text  x="555.91" y="191.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (121 samples, 1.95%)</title><rect x="91.4" y="357" width="23.1" height="15.0" fill="rgb(252,16,35)" rx="2" ry="2" />
<text  x="94.40" y="367.5" >c..</text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.02%)</title><rect x="594.7" y="181" width="0.2" height="15.0" fill="rgb(208,214,12)" rx="2" ry="2" />
<text  x="597.66" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="1187.9" y="325" width="0.6" height="15.0" fill="rgb(210,109,3)" rx="2" ry="2" />
<text  x="1190.90" y="335.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,222 samples, 19.74%)</title><rect x="761.7" y="293" width="232.9" height="15.0" fill="rgb(210,53,21)" rx="2" ry="2" />
<text  x="764.65" y="303.5" >&lt;core::iter::adapters::Enumera..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (850 samples, 13.73%)</title><rect x="594.9" y="309" width="162.0" height="15.0" fill="rgb(239,152,49)" rx="2" ry="2" />
<text  x="597.85" y="319.5" >alloc::vec::Vec&lt;T&gt;::..</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (22 samples, 0.36%)</title><rect x="347.2" y="85" width="4.2" height="15.0" fill="rgb(210,81,32)" rx="2" ry="2" />
<text  x="350.22" y="95.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="10.2" y="357" width="0.2" height="15.0" fill="rgb(233,182,17)" rx="2" ry="2" />
<text  x="13.19" y="367.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.05%)</title><rect x="1168.1" y="261" width="0.5" height="15.0" fill="rgb(233,54,29)" rx="2" ry="2" />
<text  x="1171.08" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (48 samples, 0.78%)</title><rect x="62.6" y="357" width="9.2" height="15.0" fill="rgb(214,61,33)" rx="2" ry="2" />
<text  x="65.61" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="914.2" y="85" width="0.5" height="15.0" fill="rgb(219,143,33)" rx="2" ry="2" />
<text  x="917.16" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_ptr (8 samples, 0.13%)</title><rect x="38.6" y="389" width="1.5" height="15.0" fill="rgb(254,210,33)" rx="2" ry="2" />
<text  x="41.59" y="399.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.13%)</title><rect x="1182.0" y="341" width="1.5" height="15.0" fill="rgb(232,38,47)" rx="2" ry="2" />
<text  x="1184.99" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="1155.1" y="229" width="0.2" height="15.0" fill="rgb(247,44,47)" rx="2" ry="2" />
<text  x="1158.11" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (7 samples, 0.11%)</title><rect x="1165.2" y="245" width="1.4" height="15.0" fill="rgb(253,71,25)" rx="2" ry="2" />
<text  x="1168.22" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (48 samples, 0.78%)</title><rect x="62.6" y="341" width="9.2" height="15.0" fill="rgb(228,177,21)" rx="2" ry="2" />
<text  x="65.61" y="351.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (3 samples, 0.05%)</title><rect x="1188.9" y="261" width="0.5" height="15.0" fill="rgb(251,42,29)" rx="2" ry="2" />
<text  x="1191.86" y="271.5" ></text>
</g>
<g >
<title>choose::choice::Choice::is_reverse_range (13 samples, 0.21%)</title><rect x="132.8" y="389" width="2.4" height="15.0" fill="rgb(214,111,35)" rx="2" ry="2" />
<text  x="135.77" y="399.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.2" y="309" width="0.2" height="15.0" fill="rgb(206,204,9)" rx="2" ry="2" />
<text  x="13.19" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (765 samples, 12.36%)</title><rect x="599.6" y="229" width="145.9" height="15.0" fill="rgb(221,87,44)" rx="2" ry="2" />
<text  x="602.62" y="239.5" >__GI___libc_realloc</text>
</g>
<g >
<title>regex::re_unicode::Regex::split (55 samples, 0.89%)</title><rect x="1013.9" y="389" width="10.4" height="15.0" fill="rgb(208,99,28)" rx="2" ry="2" />
<text  x="1016.86" y="399.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.10%)</title><rect x="1040.2" y="309" width="1.1" height="15.0" fill="rgb(239,187,43)" rx="2" ry="2" />
<text  x="1043.16" y="319.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (42 samples, 0.68%)</title><rect x="63.8" y="309" width="8.0" height="15.0" fill="rgb(226,219,12)" rx="2" ry="2" />
<text  x="66.76" y="319.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,190 samples, 51.53%)</title><rect x="153.5" y="341" width="608.2" height="15.0" fill="rgb(224,62,12)" rx="2" ry="2" />
<text  x="156.54" y="351.5" >&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.18%)</title><rect x="1150.3" y="261" width="2.1" height="15.0" fill="rgb(242,23,7)" rx="2" ry="2" />
<text  x="1153.35" y="271.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_one (1 samples, 0.02%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(233,118,6)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (1 samples, 0.02%)</title><rect x="1155.1" y="261" width="0.2" height="15.0" fill="rgb(242,227,36)" rx="2" ry="2" />
<text  x="1158.11" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (12 samples, 0.19%)</title><rect x="1187.7" y="357" width="2.3" height="15.0" fill="rgb(212,7,6)" rx="2" ry="2" />
<text  x="1190.71" y="367.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memchr (24 samples, 0.39%)</title><rect x="27.7" y="325" width="4.6" height="15.0" fill="rgb(218,204,11)" rx="2" ry="2" />
<text  x="30.73" y="335.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::ends_with (2 samples, 0.03%)</title><rect x="15.3" y="405" width="0.4" height="15.0" fill="rgb(239,30,24)" rx="2" ry="2" />
<text  x="18.34" y="415.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find::_$u7b$$u7b$closure$u7d$$u7d$::h7b07eff99fc35911 (202 samples, 3.26%)</title><rect x="360.4" y="85" width="38.5" height="15.0" fill="rgb(207,173,20)" rx="2" ry="2" />
<text  x="363.38" y="95.5" >reg..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="15.0" y="389" width="0.1" height="15.0" fill="rgb(219,80,43)" rx="2" ry="2" />
<text  x="17.96" y="399.5" ></text>
</g>
<g >
<title>core::str::run_utf8_validation (13 samples, 0.21%)</title><rect x="19.3" y="357" width="2.5" height="15.0" fill="rgb(224,135,27)" rx="2" ry="2" />
<text  x="22.34" y="367.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (122 samples, 1.97%)</title><rect x="971.0" y="197" width="23.2" height="15.0" fill="rgb(212,113,36)" rx="2" ry="2" />
<text  x="973.97" y="207.5" >c..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="1128.0" y="341" width="0.4" height="15.0" fill="rgb(231,64,32)" rx="2" ry="2" />
<text  x="1131.05" y="351.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc (386 samples, 6.24%)</title><rect x="1027.6" y="341" width="73.6" height="15.0" fill="rgb(245,177,24)" rx="2" ry="2" />
<text  x="1030.58" y="351.5" >alloc::a..</text>
</g>
<g >
<title>__memchr_avx2 (24 samples, 0.39%)</title><rect x="27.7" y="309" width="4.6" height="15.0" fill="rgb(207,156,23)" rx="2" ry="2" />
<text  x="30.73" y="319.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="27.3" y="245" width="0.2" height="15.0" fill="rgb(234,36,41)" rx="2" ry="2" />
<text  x="30.35" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.13%)</title><rect x="38.6" y="373" width="1.5" height="15.0" fill="rgb(219,111,15)" rx="2" ry="2" />
<text  x="41.59" y="383.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="17.4" y="341" width="0.2" height="15.0" fill="rgb(219,50,53)" rx="2" ry="2" />
<text  x="20.43" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (67 samples, 1.08%)</title><rect x="649.4" y="197" width="12.7" height="15.0" fill="rgb(248,210,28)" rx="2" ry="2" />
<text  x="652.37" y="207.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (29 samples, 0.47%)</title><rect x="1150.2" y="309" width="5.5" height="15.0" fill="rgb(240,125,39)" rx="2" ry="2" />
<text  x="1153.16" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(229,62,54)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.23%)</title><rect x="1181.0" y="405" width="2.7" height="15.0" fill="rgb(240,46,37)" rx="2" ry="2" />
<text  x="1184.04" y="415.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (6 samples, 0.10%)</title><rect x="62.6" y="293" width="1.2" height="15.0" fill="rgb(252,149,5)" rx="2" ry="2" />
<text  x="65.61" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (840 samples, 13.57%)</title><rect x="596.8" y="277" width="160.1" height="15.0" fill="rgb(251,216,14)" rx="2" ry="2" />
<text  x="599.76" y="287.5" >alloc::raw_vec::RawV..</text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (18 samples, 0.29%)</title><rect x="1186.6" y="389" width="3.4" height="15.0" fill="rgb(210,53,31)" rx="2" ry="2" />
<text  x="1189.57" y="399.5" ></text>
</g>
<g >
<title>__GI___read (3 samples, 0.05%)</title><rect x="23.0" y="261" width="0.5" height="15.0" fill="rgb(244,181,35)" rx="2" ry="2" />
<text  x="25.96" y="271.5" ></text>
</g>
<g >
<title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.02%)</title><rect x="1152.3" y="181" width="0.1" height="15.0" fill="rgb(218,51,16)" rx="2" ry="2" />
<text  x="1155.26" y="191.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (29 samples, 0.47%)</title><rect x="1150.2" y="293" width="5.5" height="15.0" fill="rgb(216,192,13)" rx="2" ry="2" />
<text  x="1153.16" y="303.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="1170.6" y="261" width="0.1" height="15.0" fill="rgb(215,155,19)" rx="2" ry="2" />
<text  x="1173.56" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.02%)</title><rect x="22.8" y="341" width="0.2" height="15.0" fill="rgb(246,136,8)" rx="2" ry="2" />
<text  x="25.77" y="351.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.03%)</title><rect x="962.6" y="197" width="0.4" height="15.0" fill="rgb(245,164,45)" rx="2" ry="2" />
<text  x="965.58" y="207.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="117.7" y="341" width="0.2" height="15.0" fill="rgb(206,113,5)" rx="2" ry="2" />
<text  x="120.71" y="351.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::find_iter (21 samples, 0.34%)</title><rect x="1020.3" y="373" width="4.0" height="15.0" fill="rgb(239,31,9)" rx="2" ry="2" />
<text  x="1023.34" y="383.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.02%)</title><rect x="87.2" y="341" width="0.2" height="15.0" fill="rgb(230,46,23)" rx="2" ry="2" />
<text  x="90.21" y="351.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (3 samples, 0.05%)</title><rect x="962.4" y="213" width="0.6" height="15.0" fill="rgb(217,205,51)" rx="2" ry="2" />
<text  x="965.39" y="223.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="91.2" y="261" width="0.2" height="15.0" fill="rgb(224,88,44)" rx="2" ry="2" />
<text  x="94.21" y="271.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (29 samples, 0.47%)</title><rect x="1150.2" y="325" width="5.5" height="15.0" fill="rgb(246,83,16)" rx="2" ry="2" />
<text  x="1153.16" y="335.5" ></text>
</g>
<g >
<title>core::ptr::write (21 samples, 0.34%)</title><rect x="756.9" y="309" width="4.0" height="15.0" fill="rgb(212,15,7)" rx="2" ry="2" />
<text  x="759.89" y="319.5" ></text>
</g>
<g >
<title>core::cmp::Ord::max (3 samples, 0.05%)</title><rect x="752.7" y="229" width="0.6" height="15.0" fill="rgb(218,227,44)" rx="2" ry="2" />
<text  x="755.69" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next (1,748 samples, 28.24%)</title><rect x="197.2" y="197" width="333.2" height="15.0" fill="rgb(220,135,19)" rx="2" ry="2" />
<text  x="200.20" y="207.5" >&lt;regex::re_unicode::Matches as core::iter::tr..</text>
</g>
<g >
<title>regex::compile::CompileClass::compile (1 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(220,134,23)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (1,042 samples, 16.83%)</title><rect x="765.3" y="245" width="198.6" height="15.0" fill="rgb(251,20,46)" rx="2" ry="2" />
<text  x="768.28" y="255.5" >&lt;regex::re_unicode::Split ..</text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h56a3036b65774dda (1 samples, 0.02%)</title><rect x="594.7" y="197" width="0.2" height="15.0" fill="rgb(221,12,23)" rx="2" ry="2" />
<text  x="597.66" y="207.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (48 samples, 0.78%)</title><rect x="953.2" y="213" width="9.2" height="15.0" fill="rgb(247,58,28)" rx="2" ry="2" />
<text  x="956.24" y="223.5" ></text>
</g>
<g >
<title>_int_free (309 samples, 4.99%)</title><rect x="1042.3" y="325" width="58.9" height="15.0" fill="rgb(219,161,46)" rx="2" ry="2" />
<text  x="1045.26" y="335.5" >_int_f..</text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (8 samples, 0.13%)</title><rect x="1166.6" y="261" width="1.5" height="15.0" fill="rgb(207,159,22)" rx="2" ry="2" />
<text  x="1169.55" y="271.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::find_at (1,286 samples, 20.78%)</title><rect x="276.1" y="149" width="245.2" height="15.0" fill="rgb(232,168,5)" rx="2" ry="2" />
<text  x="279.12" y="159.5" >&lt;regex::exec::ExecNoSync as rege..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.08%)</title><rect x="856.8" y="85" width="0.9" height="15.0" fill="rgb(247,156,42)" rx="2" ry="2" />
<text  x="859.78" y="95.5" ></text>
</g>
<g >
<title>std::panicking::try (6,188 samples, 99.97%)</title><rect x="10.4" y="517" width="1179.6" height="15.0" fill="rgb(236,20,43)" rx="2" ry="2" />
<text  x="13.38" y="527.5" >std::panicking::try</text>
</g>
<g >
<title>regex::exec::Exec::searcher (21 samples, 0.34%)</title><rect x="1020.3" y="341" width="4.0" height="15.0" fill="rgb(235,109,33)" rx="2" ry="2" />
<text  x="1023.34" y="351.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="27.5" y="309" width="0.2" height="15.0" fill="rgb(207,143,54)" rx="2" ry="2" />
<text  x="30.54" y="319.5" ></text>
</g>
<g >
<title>core::iter::adapters::map_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::h0dd754fe91482fe4 (1 samples, 0.02%)</title><rect x="91.2" y="293" width="0.2" height="15.0" fill="rgb(235,134,52)" rx="2" ry="2" />
<text  x="94.21" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (80 samples, 1.29%)</title><rect x="72.0" y="341" width="15.2" height="15.0" fill="rgb(236,74,25)" rx="2" ry="2" />
<text  x="74.95" y="351.5" ></text>
</g>
</g>
</svg>
