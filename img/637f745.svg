<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.17%)</title><rect x="1188.0" y="373" width="2.0" height="15.0" fill="rgb(254,100,54)" rx="2" ry="2" />
<text  x="1190.98" y="383.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate_matched_args (1 samples, 0.02%)</title><rect x="10.2" y="629" width="0.2" height="15.0" fill="rgb(208,1,0)" rx="2" ry="2" />
<text  x="13.22" y="639.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (8 samples, 0.15%)</title><rect x="1123.2" y="117" width="1.8" height="15.0" fill="rgb(211,139,33)" rx="2" ry="2" />
<text  x="1126.19" y="127.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (1 samples, 0.02%)</title><rect x="1187.8" y="293" width="0.2" height="15.0" fill="rgb(226,135,18)" rx="2" ry="2" />
<text  x="1190.76" y="303.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Read for alloc::boxed::Box&lt;R&gt;&gt;::read (8 samples, 0.15%)</title><rect x="25.7" y="389" width="1.8" height="15.0" fill="rgb(235,159,3)" rx="2" ry="2" />
<text  x="28.69" y="399.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (46 samples, 0.87%)</title><rect x="397.7" y="229" width="10.3" height="15.0" fill="rgb(240,187,32)" rx="2" ry="2" />
<text  x="400.65" y="239.5" ></text>
</g>
<g >
<title>core::iter::adapters::map_fold::_$u7b$$u7b$closure$u7d$$u7d$::h0c1aa28161aba283 (1 samples, 0.02%)</title><rect x="10.2" y="325" width="0.2" height="15.0" fill="rgb(238,37,40)" rx="2" ry="2" />
<text  x="13.22" y="335.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (46 samples, 0.87%)</title><rect x="397.7" y="213" width="10.3" height="15.0" fill="rgb(227,182,10)" rx="2" ry="2" />
<text  x="400.65" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (22 samples, 0.42%)</title><rect x="1101.2" y="101" width="4.9" height="15.0" fill="rgb(205,154,44)" rx="2" ry="2" />
<text  x="1104.21" y="111.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.02%)</title><rect x="1156.6" y="229" width="0.2" height="15.0" fill="rgb(219,16,22)" rx="2" ry="2" />
<text  x="1159.59" y="239.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.36%)</title><rect x="1131.9" y="197" width="4.3" height="15.0" fill="rgb(241,72,38)" rx="2" ry="2" />
<text  x="1134.93" y="207.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (29 samples, 0.55%)</title><rect x="1033.7" y="181" width="6.5" height="15.0" fill="rgb(229,157,30)" rx="2" ry="2" />
<text  x="1036.73" y="191.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.36%)</title><rect x="1131.9" y="165" width="4.3" height="15.0" fill="rgb(235,120,3)" rx="2" ry="2" />
<text  x="1134.93" y="175.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="1173.2" y="325" width="0.2" height="15.0" fill="rgb(241,12,36)" rx="2" ry="2" />
<text  x="1176.18" y="335.5" ></text>
</g>
<g >
<title>core::cmp::min (1 samples, 0.02%)</title><rect x="1156.6" y="181" width="0.2" height="15.0" fill="rgb(250,36,14)" rx="2" ry="2" />
<text  x="1159.59" y="191.5" ></text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or_try (28 samples, 0.53%)</title><rect x="1171.4" y="357" width="6.3" height="15.0" fill="rgb(244,4,45)" rx="2" ry="2" />
<text  x="1174.39" y="367.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="10.2" y="565" width="0.2" height="15.0" fill="rgb(236,171,42)" rx="2" ry="2" />
<text  x="13.22" y="575.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (9 samples, 0.17%)</title><rect x="1034.6" y="117" width="2.0" height="15.0" fill="rgb(220,165,24)" rx="2" ry="2" />
<text  x="1037.62" y="127.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad (84 samples, 1.60%)</title><rect x="1137.8" y="229" width="18.8" height="15.0" fill="rgb(248,34,32)" rx="2" ry="2" />
<text  x="1140.76" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="1181.7" y="389" width="0.2" height="15.0" fill="rgb(243,141,50)" rx="2" ry="2" />
<text  x="1184.70" y="399.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (86 samples, 1.63%)</title><rect x="1086.9" y="117" width="19.2" height="15.0" fill="rgb(227,131,26)" rx="2" ry="2" />
<text  x="1089.86" y="127.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(236,128,47)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,913 samples, 93.35%)</title><rect x="62.2" y="405" width="1101.6" height="15.0" fill="rgb(214,50,38)" rx="2" ry="2" />
<text  x="65.24" y="415.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (4,837 samples, 91.91%)</title><rect x="79.3" y="373" width="1084.5" height="15.0" fill="rgb(219,130,0)" rx="2" ry="2" />
<text  x="82.28" y="383.5" >core::iter::traits::iterator::Iterator::try_fold</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.2" y="453" width="0.2" height="15.0" fill="rgb(221,217,30)" rx="2" ry="2" />
<text  x="13.22" y="463.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect x="10.2" y="357" width="0.2" height="15.0" fill="rgb(209,24,54)" rx="2" ry="2" />
<text  x="13.22" y="367.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (46 samples, 0.87%)</title><rect x="397.7" y="245" width="10.3" height="15.0" fill="rgb(254,207,51)" rx="2" ry="2" />
<text  x="400.65" y="255.5" ></text>
</g>
<g >
<title>regex::re_trait::Matches&lt;R&gt;::text (15 samples, 0.29%)</title><rect x="754.1" y="341" width="3.4" height="15.0" fill="rgb(237,47,46)" rx="2" ry="2" />
<text  x="757.14" y="351.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals (1,422 samples, 27.02%)</title><rect x="367.2" y="277" width="318.8" height="15.0" fill="rgb(237,176,7)" rx="2" ry="2" />
<text  x="370.16" y="287.5" >regex::exec::ExecNoSync::find_literals</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.04%)</title><rect x="1172.7" y="341" width="0.5" height="15.0" fill="rgb(245,1,54)" rx="2" ry="2" />
<text  x="1175.74" y="351.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_one (1 samples, 0.02%)</title><rect x="10.0" y="565" width="0.2" height="15.0" fill="rgb(223,99,39)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match::imp (9 samples, 0.17%)</title><rect x="698.3" y="261" width="2.0" height="15.0" fill="rgb(223,109,50)" rx="2" ry="2" />
<text  x="701.31" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (970 samples, 18.43%)</title><rect x="918.7" y="229" width="217.5" height="15.0" fill="rgb(213,42,19)" rx="2" ry="2" />
<text  x="921.71" y="239.5" >&lt;std::io::Write::write_fmt::..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (344 samples, 6.54%)</title><rect x="1049.0" y="149" width="77.1" height="15.0" fill="rgb(208,145,29)" rx="2" ry="2" />
<text  x="1051.97" y="159.5" >&lt;alloc::..</text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.06%)</title><rect x="818.5" y="261" width="0.7" height="15.0" fill="rgb(250,124,10)" rx="2" ry="2" />
<text  x="821.49" y="271.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="1173.2" y="341" width="0.2" height="15.0" fill="rgb(239,165,52)" rx="2" ry="2" />
<text  x="1176.18" y="351.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (155 samples, 2.95%)</title><rect x="716.7" y="325" width="34.8" height="15.0" fill="rgb(248,158,22)" rx="2" ry="2" />
<text  x="719.70" y="335.5" >co..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.04%)</title><rect x="34.0" y="373" width="0.4" height="15.0" fill="rgb(220,121,10)" rx="2" ry="2" />
<text  x="36.99" y="383.5" ></text>
</g>
<g >
<title>std::memchr::memchr (68 samples, 1.29%)</title><rect x="34.7" y="405" width="15.2" height="15.0" fill="rgb(245,151,10)" rx="2" ry="2" />
<text  x="37.66" y="415.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="1039.1" y="53" width="0.5" height="15.0" fill="rgb(206,199,7)" rx="2" ry="2" />
<text  x="1042.11" y="63.5" ></text>
</g>
<g >
<title>core::fmt::write (1 samples, 0.02%)</title><rect x="1156.6" y="149" width="0.2" height="15.0" fill="rgb(252,109,14)" rx="2" ry="2" />
<text  x="1159.59" y="159.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate (1 samples, 0.02%)</title><rect x="10.2" y="645" width="0.2" height="15.0" fill="rgb(240,186,39)" rx="2" ry="2" />
<text  x="13.22" y="655.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.10%)</title><rect x="1125.0" y="69" width="1.1" height="15.0" fill="rgb(231,140,34)" rx="2" ry="2" />
<text  x="1127.98" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (31 samples, 0.59%)</title><rect x="27.5" y="405" width="6.9" height="15.0" fill="rgb(246,149,20)" rx="2" ry="2" />
<text  x="30.49" y="415.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (9 samples, 0.17%)</title><rect x="1036.9" y="53" width="2.0" height="15.0" fill="rgb(211,112,38)" rx="2" ry="2" />
<text  x="1039.87" y="63.5" ></text>
</g>
<g >
<title>core::str::from_utf8 (33 samples, 0.63%)</title><rect x="18.1" y="437" width="7.4" height="15.0" fill="rgb(247,24,4)" rx="2" ry="2" />
<text  x="21.07" y="447.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (44 samples, 0.84%)</title><rect x="398.1" y="197" width="9.9" height="15.0" fill="rgb(215,97,22)" rx="2" ry="2" />
<text  x="401.10" y="207.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (1 samples, 0.02%)</title><rect x="33.3" y="325" width="0.2" height="15.0" fill="rgb(223,209,21)" rx="2" ry="2" />
<text  x="36.32" y="335.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="14.7" y="485" width="0.2" height="15.0" fill="rgb(238,180,26)" rx="2" ry="2" />
<text  x="17.71" y="495.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each (4,916 samples, 93.41%)</title><rect x="62.2" y="453" width="1102.2" height="15.0" fill="rgb(254,103,45)" rx="2" ry="2" />
<text  x="65.24" y="463.5" >core::iter::traits::iterator::Iterator::for_each</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="17.2" y="421" width="0.2" height="15.0" fill="rgb(237,34,39)" rx="2" ry="2" />
<text  x="20.17" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (12 samples, 0.23%)</title><rect x="29.5" y="293" width="2.7" height="15.0" fill="rgb(213,66,43)" rx="2" ry="2" />
<text  x="32.51" y="303.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (136 samples, 2.58%)</title><rect x="721.0" y="309" width="30.5" height="15.0" fill="rgb(233,194,22)" rx="2" ry="2" />
<text  x="723.96" y="319.5" >co..</text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (10 samples, 0.19%)</title><rect x="1036.6" y="117" width="2.3" height="15.0" fill="rgb(232,71,8)" rx="2" ry="2" />
<text  x="1039.64" y="127.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::wrapping_sub (19 samples, 0.36%)</title><rect x="1101.9" y="85" width="4.2" height="15.0" fill="rgb(229,54,26)" rx="2" ry="2" />
<text  x="1104.89" y="95.5" ></text>
</g>
<g >
<title>_int_realloc (2 samples, 0.04%)</title><rect x="32.9" y="277" width="0.4" height="15.0" fill="rgb(234,95,27)" rx="2" ry="2" />
<text  x="35.87" y="287.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (1 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(243,3,37)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (27 samples, 0.51%)</title><rect x="1157.7" y="309" width="6.1" height="15.0" fill="rgb(219,188,0)" rx="2" ry="2" />
<text  x="1160.71" y="319.5" ></text>
</g>
<g >
<title>thread_local::thread_id::THREAD_ID::__getit (10 samples, 0.19%)</title><rect x="1175.0" y="293" width="2.2" height="15.0" fill="rgb(214,66,13)" rx="2" ry="2" />
<text  x="1177.98" y="303.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_fold::_$u7b$$u7b$closure$u7d$$u7d$::h0924251389098263 (1,707 samples, 32.43%)</title><rect x="775.0" y="309" width="382.7" height="15.0" fill="rgb(233,152,41)" rx="2" ry="2" />
<text  x="777.99" y="319.5" >core::iter::adapters::filter_fold::_$u7b$$u7b$closur..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="753.9" y="277" width="0.2" height="15.0" fill="rgb(244,115,7)" rx="2" ry="2" />
<text  x="756.92" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="1039.1" y="37" width="0.5" height="15.0" fill="rgb(245,2,38)" rx="2" ry="2" />
<text  x="1042.11" y="47.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.46%)</title><rect x="28.6" y="357" width="5.4" height="15.0" fill="rgb(210,218,22)" rx="2" ry="2" />
<text  x="31.61" y="367.5" ></text>
</g>
<g >
<title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="17.6" y="421" width="0.5" height="15.0" fill="rgb(237,2,39)" rx="2" ry="2" />
<text  x="20.62" y="431.5" ></text>
</g>
<g >
<title>__rust_alloc (2 samples, 0.04%)</title><rect x="32.2" y="293" width="0.4" height="15.0" fill="rgb(252,100,28)" rx="2" ry="2" />
<text  x="35.20" y="303.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (123 samples, 2.34%)</title><rect x="598.8" y="197" width="27.5" height="15.0" fill="rgb(224,144,35)" rx="2" ry="2" />
<text  x="601.77" y="207.5" >c..</text>
</g>
<g >
<title>choose (5,263 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(217,57,3)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >choose</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="1039.6" y="133" width="0.2" height="15.0" fill="rgb(236,72,18)" rx="2" ry="2" />
<text  x="1042.56" y="143.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals::_$u7b$$u7b$closure$u7d$$u7d$::hb03de0d58239394b (99 samples, 1.88%)</title><rect x="375.5" y="245" width="22.2" height="15.0" fill="rgb(211,71,49)" rx="2" ry="2" />
<text  x="378.46" y="255.5" >r..</text>
</g>
<g >
<title>clap::app::validator::Validator::validate_arg_values (1 samples, 0.02%)</title><rect x="10.2" y="613" width="0.2" height="15.0" fill="rgb(207,90,21)" rx="2" ry="2" />
<text  x="13.22" y="623.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="10.2" y="373" width="0.2" height="15.0" fill="rgb(234,210,49)" rx="2" ry="2" />
<text  x="13.22" y="383.5" ></text>
</g>
<g >
<title>regex::exec::Exec::searcher_str (28 samples, 0.53%)</title><rect x="1171.4" y="421" width="6.3" height="15.0" fill="rgb(205,103,11)" rx="2" ry="2" />
<text  x="1174.39" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="27.5" y="373" width="0.9" height="15.0" fill="rgb(224,27,37)" rx="2" ry="2" />
<text  x="30.49" y="383.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (12 samples, 0.23%)</title><rect x="1187.3" y="437" width="2.7" height="15.0" fill="rgb(243,96,41)" rx="2" ry="2" />
<text  x="1190.31" y="447.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next (2,540 samples, 48.26%)</title><rect x="147.2" y="341" width="569.5" height="15.0" fill="rgb(249,27,16)" rx="2" ry="2" />
<text  x="150.21" y="351.5" >&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (3 samples, 0.06%)</title><rect x="1038.9" y="117" width="0.7" height="15.0" fill="rgb(219,171,8)" rx="2" ry="2" />
<text  x="1041.88" y="127.5" ></text>
</g>
<g >
<title>regex::compile::MaybeInst::unwrap (1 samples, 0.02%)</title><rect x="10.2" y="293" width="0.2" height="15.0" fill="rgb(213,125,33)" rx="2" ry="2" />
<text  x="13.22" y="303.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (19 samples, 0.36%)</title><rect x="1173.4" y="341" width="4.3" height="15.0" fill="rgb(248,169,3)" rx="2" ry="2" />
<text  x="1176.41" y="351.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.02%)</title><rect x="1156.6" y="197" width="0.2" height="15.0" fill="rgb(241,108,30)" rx="2" ry="2" />
<text  x="1159.59" y="207.5" ></text>
</g>
<g >
<title>std::thread::local::fast::Key&lt;T&gt;::get (10 samples, 0.19%)</title><rect x="1175.0" y="277" width="2.2" height="15.0" fill="rgb(219,74,41)" rx="2" ry="2" />
<text  x="1177.98" y="287.5" ></text>
</g>
<g >
<title>core::ptr::align_offset (2 samples, 0.04%)</title><rect x="25.0" y="389" width="0.5" height="15.0" fill="rgb(226,229,20)" rx="2" ry="2" />
<text  x="28.02" y="399.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (123 samples, 2.34%)</title><rect x="598.8" y="181" width="27.5" height="15.0" fill="rgb(243,25,26)" rx="2" ry="2" />
<text  x="601.77" y="191.5" >&lt;..</text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(228,61,41)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,459 samples, 46.72%)</title><rect x="158.4" y="325" width="551.3" height="15.0" fill="rgb(224,215,37)" rx="2" ry="2" />
<text  x="161.42" y="335.5" >&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="34.4" y="373" width="0.3" height="15.0" fill="rgb(219,36,14)" rx="2" ry="2" />
<text  x="37.44" y="383.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc (14 samples, 0.27%)</title><rect x="1180.4" y="421" width="3.1" height="15.0" fill="rgb(228,15,47)" rx="2" ry="2" />
<text  x="1183.36" y="431.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (767 samples, 14.57%)</title><rect x="964.2" y="213" width="172.0" height="15.0" fill="rgb(208,103,48)" rx="2" ry="2" />
<text  x="967.22" y="223.5" >std::io::Write::write_..</text>
</g>
<g >
<title>__memrchr_avx2 (2 samples, 0.04%)</title><rect x="1039.8" y="85" width="0.4" height="15.0" fill="rgb(227,148,5)" rx="2" ry="2" />
<text  x="1042.78" y="95.5" ></text>
</g>
<g >
<title>std::panicking::try (5,261 samples, 99.96%)</title><rect x="10.4" y="581" width="1179.6" height="15.0" fill="rgb(232,181,13)" rx="2" ry="2" />
<text  x="13.45" y="591.5" >std::panicking::try</text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (7 samples, 0.13%)</title><rect x="752.6" y="309" width="1.5" height="15.0" fill="rgb(251,129,37)" rx="2" ry="2" />
<text  x="755.57" y="319.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::hf44f3f3547d70e6b (27 samples, 0.51%)</title><rect x="1157.7" y="325" width="6.1" height="15.0" fill="rgb(216,216,32)" rx="2" ry="2" />
<text  x="1160.71" y="335.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (12 samples, 0.23%)</title><rect x="751.5" y="325" width="2.6" height="15.0" fill="rgb(253,51,12)" rx="2" ry="2" />
<text  x="754.45" y="335.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.04%)</title><rect x="751.0" y="277" width="0.5" height="15.0" fill="rgb(217,222,50)" rx="2" ry="2" />
<text  x="754.00" y="287.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (2 samples, 0.04%)</title><rect x="1177.2" y="309" width="0.5" height="15.0" fill="rgb(207,39,36)" rx="2" ry="2" />
<text  x="1180.22" y="319.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.36%)</title><rect x="1131.9" y="181" width="4.3" height="15.0" fill="rgb(252,19,26)" rx="2" ry="2" />
<text  x="1134.93" y="191.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (46 samples, 0.87%)</title><rect x="397.7" y="261" width="10.3" height="15.0" fill="rgb(205,49,44)" rx="2" ry="2" />
<text  x="400.65" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.40%)</title><rect x="691.1" y="261" width="4.7" height="15.0" fill="rgb(213,120,35)" rx="2" ry="2" />
<text  x="694.14" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.02%)</title><rect x="1187.8" y="277" width="0.2" height="15.0" fill="rgb(235,63,49)" rx="2" ry="2" />
<text  x="1190.76" y="287.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(241,225,45)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>core::cmp::max (1 samples, 0.02%)</title><rect x="33.3" y="309" width="0.2" height="15.0" fill="rgb(208,70,54)" rx="2" ry="2" />
<text  x="36.32" y="319.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (167 samples, 3.17%)</title><rect x="716.7" y="341" width="37.4" height="15.0" fill="rgb(243,228,0)" rx="2" ry="2" />
<text  x="719.70" y="351.5" >cor..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.02%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(216,102,32)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::ends_with (1 samples, 0.02%)</title><rect x="15.6" y="437" width="0.2" height="15.0" fill="rgb(253,174,54)" rx="2" ry="2" />
<text  x="18.61" y="447.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (5,261 samples, 99.96%)</title><rect x="10.4" y="597" width="1179.6" height="15.0" fill="rgb(235,151,46)" rx="2" ry="2" />
<text  x="13.45" y="607.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.02%)</title><rect x="1156.6" y="213" width="0.2" height="15.0" fill="rgb(211,114,13)" rx="2" ry="2" />
<text  x="1159.59" y="223.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.21%)</title><rect x="1187.5" y="421" width="2.5" height="15.0" fill="rgb(211,150,42)" rx="2" ry="2" />
<text  x="1190.53" y="431.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (9 samples, 0.17%)</title><rect x="1036.9" y="85" width="2.0" height="15.0" fill="rgb(240,32,8)" rx="2" ry="2" />
<text  x="1039.87" y="95.5" ></text>
</g>
<g >
<title>__GI___libc_write (9 samples, 0.17%)</title><rect x="1036.9" y="37" width="2.0" height="15.0" fill="rgb(221,116,53)" rx="2" ry="2" />
<text  x="1039.87" y="47.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="1039.6" y="85" width="0.2" height="15.0" fill="rgb(223,221,16)" rx="2" ry="2" />
<text  x="1042.56" y="95.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.06%)</title><rect x="61.6" y="405" width="0.6" height="15.0" fill="rgb(208,76,45)" rx="2" ry="2" />
<text  x="64.57" y="415.5" ></text>
</g>
<g >
<title>_int_realloc (1 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(216,158,28)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.06%)</title><rect x="61.6" y="421" width="0.6" height="15.0" fill="rgb(242,7,18)" rx="2" ry="2" />
<text  x="64.57" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (6 samples, 0.11%)</title><rect x="1180.4" y="405" width="1.3" height="15.0" fill="rgb(251,91,6)" rx="2" ry="2" />
<text  x="1183.36" y="415.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (14 samples, 0.27%)</title><rect x="29.5" y="309" width="3.1" height="15.0" fill="rgb(252,177,27)" rx="2" ry="2" />
<text  x="32.51" y="319.5" ></text>
</g>
<g >
<title>all (5,263 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(241,205,24)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.27%)</title><rect x="1180.4" y="469" width="3.1" height="15.0" fill="rgb(210,166,27)" rx="2" ry="2" />
<text  x="1183.36" y="479.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::h2598d82b7eb8e988 (1,785 samples, 33.92%)</title><rect x="757.5" y="325" width="400.2" height="15.0" fill="rgb(245,165,12)" rx="2" ry="2" />
<text  x="760.51" y="335.5" >_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u..</text>
</g>
<g >
<title>choose::choice::Choice::print_choice (3 samples, 0.06%)</title><rect x="1163.8" y="405" width="0.6" height="15.0" fill="rgb(226,113,51)" rx="2" ry="2" />
<text  x="1166.77" y="415.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="17.2" y="389" width="0.2" height="15.0" fill="rgb(233,151,4)" rx="2" ry="2" />
<text  x="20.17" y="399.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.02%)</title><rect x="1189.6" y="325" width="0.2" height="15.0" fill="rgb(234,139,12)" rx="2" ry="2" />
<text  x="1192.55" y="335.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.04%)</title><rect x="1039.1" y="69" width="0.5" height="15.0" fill="rgb(223,200,26)" rx="2" ry="2" />
<text  x="1042.11" y="79.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (12 samples, 0.23%)</title><rect x="1177.7" y="485" width="2.7" height="15.0" fill="rgb(226,216,8)" rx="2" ry="2" />
<text  x="1180.67" y="495.5" ></text>
</g>
<g >
<title>main (5,261 samples, 99.96%)</title><rect x="10.4" y="629" width="1179.6" height="15.0" fill="rgb(252,24,54)" rx="2" ry="2" />
<text  x="13.45" y="639.5" >main</text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="1187.8" y="405" width="0.2" height="15.0" fill="rgb(218,133,28)" rx="2" ry="2" />
<text  x="1190.76" y="415.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.2" y="533" width="0.2" height="15.0" fill="rgb(242,111,43)" rx="2" ry="2" />
<text  x="13.22" y="543.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="34.4" y="341" width="0.3" height="15.0" fill="rgb(254,78,20)" rx="2" ry="2" />
<text  x="37.44" y="351.5" ></text>
</g>
<g >
<title>_int_free (6 samples, 0.11%)</title><rect x="1182.2" y="405" width="1.3" height="15.0" fill="rgb(232,108,54)" rx="2" ry="2" />
<text  x="1185.15" y="415.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1039.6" y="117" width="0.2" height="15.0" fill="rgb(238,29,32)" rx="2" ry="2" />
<text  x="1042.56" y="127.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="1187.8" y="373" width="0.2" height="15.0" fill="rgb(253,45,43)" rx="2" ry="2" />
<text  x="1190.76" y="383.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="1177.0" y="245" width="0.2" height="15.0" fill="rgb(251,57,32)" rx="2" ry="2" />
<text  x="1180.00" y="255.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (5,261 samples, 99.96%)</title><rect x="10.4" y="549" width="1179.6" height="15.0" fill="rgb(226,53,32)" rx="2" ry="2" />
<text  x="13.45" y="559.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>core::ptr::drop_in_place (3 samples, 0.06%)</title><rect x="17.4" y="437" width="0.7" height="15.0" fill="rgb(244,20,18)" rx="2" ry="2" />
<text  x="20.40" y="447.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="32.9" y="261" width="0.2" height="15.0" fill="rgb(231,224,24)" rx="2" ry="2" />
<text  x="35.87" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each::call::_$u7b$$u7b$closure$u7d$$u7d$::h77213921d4afd5db (1,605 samples, 30.50%)</title><rect x="797.9" y="293" width="359.8" height="15.0" fill="rgb(211,222,33)" rx="2" ry="2" />
<text  x="800.86" y="303.5" >core::iter::traits::iterator::Iterator::for_each..</text>
</g>
<g >
<title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (8 samples, 0.15%)</title><rect x="25.7" y="405" width="1.8" height="15.0" fill="rgb(253,170,37)" rx="2" ry="2" />
<text  x="28.69" y="415.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (14 samples, 0.27%)</title><rect x="1180.4" y="437" width="3.1" height="15.0" fill="rgb(230,66,15)" rx="2" ry="2" />
<text  x="1183.36" y="447.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="613" width="0.2" height="15.0" fill="rgb(238,133,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="1156.6" y="165" width="0.2" height="15.0" fill="rgb(207,149,33)" rx="2" ry="2" />
<text  x="1159.59" y="175.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (29 samples, 0.55%)</title><rect x="812.0" y="261" width="6.5" height="15.0" fill="rgb(209,46,51)" rx="2" ry="2" />
<text  x="814.99" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="17.2" y="437" width="0.2" height="15.0" fill="rgb(232,22,25)" rx="2" ry="2" />
<text  x="20.17" y="447.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (28 samples, 0.53%)</title><rect x="1034.0" y="149" width="6.2" height="15.0" fill="rgb(217,52,4)" rx="2" ry="2" />
<text  x="1036.95" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (14 samples, 0.27%)</title><rect x="29.5" y="325" width="3.1" height="15.0" fill="rgb(220,58,24)" rx="2" ry="2" />
<text  x="32.51" y="335.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.19%)</title><rect x="1175.0" y="309" width="2.2" height="15.0" fill="rgb(245,40,43)" rx="2" ry="2" />
<text  x="1177.98" y="319.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.0" y="549" width="0.2" height="15.0" fill="rgb(253,112,25)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="10.2" y="469" width="0.2" height="15.0" fill="rgb(221,130,40)" rx="2" ry="2" />
<text  x="13.22" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(226,58,2)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="1187.5" y="405" width="0.3" height="15.0" fill="rgb(240,63,38)" rx="2" ry="2" />
<text  x="1190.53" y="415.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.2" y="437" width="0.2" height="15.0" fill="rgb(211,47,13)" rx="2" ry="2" />
<text  x="13.22" y="447.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_fold::_$u7b$$u7b$closure$u7d$$u7d$::hdaa463c78886fc15 (1,812 samples, 34.43%)</title><rect x="757.5" y="341" width="406.3" height="15.0" fill="rgb(252,66,34)" rx="2" ry="2" />
<text  x="760.51" y="351.5" >core::iter::adapters::filter_fold::_$u7b$$u7b$closure$u..</text>
</g>
<g >
<title>std::io::Write::write_fmt (1,510 samples, 28.69%)</title><rect x="819.2" y="261" width="338.5" height="15.0" fill="rgb(210,159,35)" rx="2" ry="2" />
<text  x="822.16" y="271.5" >std::io::Write::write_fmt</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (115 samples, 2.19%)</title><rect x="1057.0" y="133" width="25.8" height="15.0" fill="rgb(249,88,14)" rx="2" ry="2" />
<text  x="1060.05" y="143.5" >_..</text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::find (934 samples, 17.75%)</title><rect x="476.6" y="245" width="209.4" height="15.0" fill="rgb(248,8,19)" rx="2" ry="2" />
<text  x="479.57" y="255.5" >regex::literal::imp::Single..</text>
</g>
<g >
<title>regex::compile::Compiler::compile_finish::_$u7b$$u7b$closure$u7d$$u7d$::h0dfd86399ecea54e (1 samples, 0.02%)</title><rect x="10.2" y="309" width="0.2" height="15.0" fill="rgb(250,60,35)" rx="2" ry="2" />
<text  x="13.22" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.06%)</title><rect x="1189.1" y="357" width="0.7" height="15.0" fill="rgb(241,47,39)" rx="2" ry="2" />
<text  x="1192.10" y="367.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.04%)</title><rect x="753.5" y="293" width="0.4" height="15.0" fill="rgb(225,163,3)" rx="2" ry="2" />
<text  x="756.47" y="303.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="1187.8" y="341" width="0.2" height="15.0" fill="rgb(243,108,33)" rx="2" ry="2" />
<text  x="1190.76" y="351.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="17.2" y="405" width="0.2" height="15.0" fill="rgb(248,64,1)" rx="2" ry="2" />
<text  x="20.17" y="415.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h72ee49cf7ecbfe6c (1,605 samples, 30.50%)</title><rect x="797.9" y="277" width="359.8" height="15.0" fill="rgb(216,29,0)" rx="2" ry="2" />
<text  x="800.86" y="287.5" >choose::choice::Choice::get_choice_slice::_$u7b$..</text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="597" width="0.2" height="15.0" fill="rgb(229,159,16)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="33.3" y="293" width="0.2" height="15.0" fill="rgb(231,25,53)" rx="2" ry="2" />
<text  x="36.32" y="303.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::find_at (1,858 samples, 35.30%)</title><rect x="283.8" y="293" width="416.5" height="15.0" fill="rgb(239,108,12)" rx="2" ry="2" />
<text  x="286.76" y="303.5" >&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpr..</text>
</g>
<g >
<title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="34.4" y="389" width="0.3" height="15.0" fill="rgb(214,146,29)" rx="2" ry="2" />
<text  x="37.44" y="399.5" ></text>
</g>
<g >
<title>std::memchr::memrchr (2 samples, 0.04%)</title><rect x="1039.8" y="133" width="0.4" height="15.0" fill="rgb(238,7,43)" rx="2" ry="2" />
<text  x="1042.78" y="143.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (9 samples, 0.17%)</title><rect x="1034.6" y="101" width="2.0" height="15.0" fill="rgb(251,89,2)" rx="2" ry="2" />
<text  x="1037.62" y="111.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.21%)</title><rect x="1133.7" y="133" width="2.5" height="15.0" fill="rgb(226,43,6)" rx="2" ry="2" />
<text  x="1136.72" y="143.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2 samples, 0.04%)</title><rect x="751.0" y="293" width="0.5" height="15.0" fill="rgb(245,154,20)" rx="2" ry="2" />
<text  x="754.00" y="303.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (99 samples, 1.88%)</title><rect x="375.5" y="261" width="22.2" height="15.0" fill="rgb(242,51,50)" rx="2" ry="2" />
<text  x="378.46" y="271.5" >c..</text>
</g>
<g >
<title>alloc::alloc::realloc (3 samples, 0.06%)</title><rect x="32.6" y="309" width="0.7" height="15.0" fill="rgb(213,95,3)" rx="2" ry="2" />
<text  x="35.64" y="319.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold (4,837 samples, 91.91%)</title><rect x="79.3" y="389" width="1084.5" height="15.0" fill="rgb(240,125,46)" rx="2" ry="2" />
<text  x="82.28" y="399.5" >core::iter::traits::iterator::Iterator::fold</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (5 samples, 0.10%)</title><rect x="1125.0" y="101" width="1.1" height="15.0" fill="rgb(225,26,26)" rx="2" ry="2" />
<text  x="1127.98" y="111.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold::ok::_$u7b$$u7b$closure$u7d$$u7d$::h42b9875e69185513 (1 samples, 0.02%)</title><rect x="10.2" y="341" width="0.2" height="15.0" fill="rgb(237,60,34)" rx="2" ry="2" />
<text  x="13.22" y="351.5" ></text>
</g>
<g >
<title>core::fmt::write (18 samples, 0.34%)</title><rect x="1186.0" y="469" width="4.0" height="15.0" fill="rgb(229,183,51)" rx="2" ry="2" />
<text  x="1188.96" y="479.5" ></text>
</g>
<g >
<title>__GI___read (7 samples, 0.13%)</title><rect x="25.9" y="325" width="1.6" height="15.0" fill="rgb(253,73,27)" rx="2" ry="2" />
<text  x="28.92" y="335.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (78 samples, 1.48%)</title><rect x="757.5" y="309" width="17.5" height="15.0" fill="rgb(225,15,12)" rx="2" ry="2" />
<text  x="760.51" y="319.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.2" y="517" width="0.2" height="15.0" fill="rgb(207,3,4)" rx="2" ry="2" />
<text  x="13.22" y="527.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr (2 samples, 0.04%)</title><rect x="1039.8" y="117" width="0.4" height="15.0" fill="rgb(217,92,34)" rx="2" ry="2" />
<text  x="1042.78" y="127.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::_find (852 samples, 16.19%)</title><rect x="495.0" y="229" width="191.0" height="15.0" fill="rgb(246,125,4)" rx="2" ry="2" />
<text  x="497.96" y="239.5" >regex::literal::imp::Sin..</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="1187.8" y="325" width="0.2" height="15.0" fill="rgb(215,93,34)" rx="2" ry="2" />
<text  x="1190.76" y="335.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.04%)</title><rect x="1039.1" y="101" width="0.5" height="15.0" fill="rgb(233,87,2)" rx="2" ry="2" />
<text  x="1042.11" y="111.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (383 samples, 7.28%)</title><rect x="1040.2" y="181" width="85.9" height="15.0" fill="rgb(232,101,50)" rx="2" ry="2" />
<text  x="1043.23" y="191.5" >std::io::i..</text>
</g>
<g >
<title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.08%)</title><rect x="61.3" y="453" width="0.9" height="15.0" fill="rgb(227,182,22)" rx="2" ry="2" />
<text  x="64.34" y="463.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 1.41%)</title><rect x="478.4" y="229" width="16.6" height="15.0" fill="rgb(247,169,48)" rx="2" ry="2" />
<text  x="481.37" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::find_at (1,900 samples, 36.10%)</title><rect x="283.8" y="309" width="425.9" height="15.0" fill="rgb(231,126,36)" rx="2" ry="2" />
<text  x="286.76" y="319.5" >&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExp..</text>
</g>
<g >
<title>std::io::BufRead::read_line::_$u7b$$u7b$closure$u7d$$u7d$::hdbb4733f38ba9a1d (109 samples, 2.07%)</title><rect x="25.5" y="437" width="24.4" height="15.0" fill="rgb(223,53,50)" rx="2" ry="2" />
<text  x="28.47" y="447.5" >s..</text>
</g>
<g >
<title>choose::choice::Choice::print_choice (5,030 samples, 95.57%)</title><rect x="49.9" y="485" width="1127.8" height="15.0" fill="rgb(234,105,20)" rx="2" ry="2" />
<text  x="52.91" y="495.5" >choose::choice::Choice::print_choice</text>
</g>
<g >
<title>__memchr_avx2 (67 samples, 1.27%)</title><rect x="34.9" y="373" width="15.0" height="15.0" fill="rgb(253,97,43)" rx="2" ry="2" />
<text  x="37.89" y="383.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,916 samples, 93.41%)</title><rect x="62.2" y="437" width="1102.2" height="15.0" fill="rgb(237,141,22)" rx="2" ry="2" />
<text  x="65.24" y="447.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text>
</g>
<g >
<title>std::io::append_to_string (152 samples, 2.89%)</title><rect x="15.8" y="453" width="34.1" height="15.0" fill="rgb(245,138,21)" rx="2" ry="2" />
<text  x="18.83" y="463.5" >st..</text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="1187.8" y="309" width="0.2" height="15.0" fill="rgb(239,110,49)" rx="2" ry="2" />
<text  x="1190.76" y="319.5" ></text>
</g>
<g >
<title>__rust_maybe_catch_panic (5,261 samples, 99.96%)</title><rect x="10.4" y="565" width="1179.6" height="15.0" fill="rgb(226,25,11)" rx="2" ry="2" />
<text  x="13.45" y="575.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="34.4" y="405" width="0.3" height="15.0" fill="rgb(225,128,41)" rx="2" ry="2" />
<text  x="37.44" y="415.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f (5,261 samples, 99.96%)</title><rect x="10.4" y="533" width="1179.6" height="15.0" fill="rgb(235,48,15)" rx="2" ry="2" />
<text  x="13.45" y="543.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(239,106,36)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.46%)</title><rect x="361.8" y="277" width="5.4" height="15.0" fill="rgb(221,185,49)" rx="2" ry="2" />
<text  x="364.78" y="287.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (5 samples, 0.10%)</title><rect x="1135.1" y="117" width="1.1" height="15.0" fill="rgb(234,61,46)" rx="2" ry="2" />
<text  x="1138.07" y="127.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (11 samples, 0.21%)</title><rect x="1133.7" y="149" width="2.5" height="15.0" fill="rgb(219,0,41)" rx="2" ry="2" />
<text  x="1136.72" y="159.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (2 samples, 0.04%)</title><rect x="1157.3" y="245" width="0.4" height="15.0" fill="rgb(225,124,27)" rx="2" ry="2" />
<text  x="1160.27" y="255.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (2 samples, 0.04%)</title><rect x="25.0" y="405" width="0.5" height="15.0" fill="rgb(243,224,40)" rx="2" ry="2" />
<text  x="28.02" y="415.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.21%)</title><rect x="695.8" y="261" width="2.5" height="15.0" fill="rgb(248,109,14)" rx="2" ry="2" />
<text  x="698.85" y="271.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(217,121,0)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>_start (5,261 samples, 99.96%)</title><rect x="10.4" y="661" width="1179.6" height="15.0" fill="rgb(209,182,37)" rx="2" ry="2" />
<text  x="13.45" y="671.5" >_start</text>
</g>
<g >
<title>std::rt::lang_start_internal (5,261 samples, 99.96%)</title><rect x="10.4" y="613" width="1179.6" height="15.0" fill="rgb(228,184,6)" rx="2" ry="2" />
<text  x="13.45" y="623.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>regex::compile::Compiler::c_concat (1 samples, 0.02%)</title><rect x="10.0" y="533" width="0.2" height="15.0" fill="rgb(226,202,41)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (9 samples, 0.17%)</title><rect x="1036.9" y="101" width="2.0" height="15.0" fill="rgb(244,153,35)" rx="2" ry="2" />
<text  x="1039.87" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.04%)</title><rect x="14.3" y="453" width="0.4" height="15.0" fill="rgb(237,62,32)" rx="2" ry="2" />
<text  x="17.26" y="463.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::split (59 samples, 1.12%)</title><rect x="1164.4" y="453" width="13.3" height="15.0" fill="rgb(244,33,0)" rx="2" ry="2" />
<text  x="1167.44" y="463.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.80%)</title><rect x="700.3" y="293" width="9.4" height="15.0" fill="rgb(214,94,16)" rx="2" ry="2" />
<text  x="703.33" y="303.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="14.3" y="469" width="0.4" height="15.0" fill="rgb(233,62,7)" rx="2" ry="2" />
<text  x="17.26" y="479.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (14 samples, 0.27%)</title><rect x="1180.4" y="453" width="3.1" height="15.0" fill="rgb(213,112,52)" rx="2" ry="2" />
<text  x="1183.36" y="463.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::capacity (1 samples, 0.02%)</title><rect x="1030.8" y="181" width="0.2" height="15.0" fill="rgb(212,226,51)" rx="2" ry="2" />
<text  x="1033.81" y="191.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (5 samples, 0.10%)</title><rect x="1125.0" y="117" width="1.1" height="15.0" fill="rgb(214,131,51)" rx="2" ry="2" />
<text  x="1127.98" y="127.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find (1,240 samples, 23.56%)</title><rect x="408.0" y="261" width="278.0" height="15.0" fill="rgb(233,167,42)" rx="2" ry="2" />
<text  x="410.97" y="271.5" >regex::literal::imp::LiteralSearcher:..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (31 samples, 0.59%)</title><rect x="27.5" y="389" width="6.9" height="15.0" fill="rgb(241,41,41)" rx="2" ry="2" />
<text  x="30.49" y="399.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (14 samples, 0.27%)</title><rect x="1180.4" y="485" width="3.1" height="15.0" fill="rgb(223,1,31)" rx="2" ry="2" />
<text  x="1183.36" y="495.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="10.0" y="661" width="0.4" height="15.0" fill="rgb(230,199,30)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (104 samples, 1.98%)</title><rect x="1082.8" y="133" width="23.3" height="15.0" fill="rgb(231,121,6)" rx="2" ry="2" />
<text  x="1085.83" y="143.5" >a..</text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or (28 samples, 0.53%)</title><rect x="1171.4" y="373" width="6.3" height="15.0" fill="rgb(234,53,44)" rx="2" ry="2" />
<text  x="1174.39" y="383.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.04%)</title><rect x="751.0" y="261" width="0.5" height="15.0" fill="rgb(237,145,15)" rx="2" ry="2" />
<text  x="754.00" y="271.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.15%)</title><rect x="25.7" y="373" width="1.8" height="15.0" fill="rgb(231,124,5)" rx="2" ry="2" />
<text  x="28.69" y="383.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (7 samples, 0.13%)</title><rect x="25.9" y="357" width="1.6" height="15.0" fill="rgb(224,109,53)" rx="2" ry="2" />
<text  x="28.92" y="367.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (84 samples, 1.60%)</title><rect x="1106.1" y="133" width="18.9" height="15.0" fill="rgb(247,31,20)" rx="2" ry="2" />
<text  x="1109.15" y="143.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="1187.8" y="357" width="0.2" height="15.0" fill="rgb(212,62,49)" rx="2" ry="2" />
<text  x="1190.76" y="367.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.04%)</title><rect x="1156.8" y="229" width="0.5" height="15.0" fill="rgb(254,229,20)" rx="2" ry="2" />
<text  x="1159.82" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.04%)</title><rect x="1039.8" y="101" width="0.4" height="15.0" fill="rgb(212,46,19)" rx="2" ry="2" />
<text  x="1042.78" y="111.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.04%)</title><rect x="407.5" y="181" width="0.5" height="15.0" fill="rgb(223,163,24)" rx="2" ry="2" />
<text  x="410.52" y="191.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.04%)</title><rect x="1189.3" y="341" width="0.5" height="15.0" fill="rgb(242,156,48)" rx="2" ry="2" />
<text  x="1192.33" y="351.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (12 samples, 0.23%)</title><rect x="1175.0" y="325" width="2.7" height="15.0" fill="rgb(242,143,9)" rx="2" ry="2" />
<text  x="1177.98" y="335.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (9 samples, 0.17%)</title><rect x="1036.9" y="69" width="2.0" height="15.0" fill="rgb(208,208,28)" rx="2" ry="2" />
<text  x="1039.87" y="79.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.08%)</title><rect x="597.9" y="197" width="0.9" height="15.0" fill="rgb(217,33,48)" rx="2" ry="2" />
<text  x="600.87" y="207.5" ></text>
</g>
<g >
<title>&lt;&amp;usize as core::ops::arith::Add&lt;usize&gt;&gt;::add (1 samples, 0.02%)</title><rect x="34.4" y="357" width="0.3" height="15.0" fill="rgb(212,188,12)" rx="2" ry="2" />
<text  x="37.44" y="367.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::find_iter (28 samples, 0.53%)</title><rect x="1171.4" y="437" width="6.3" height="15.0" fill="rgb(251,67,17)" rx="2" ry="2" />
<text  x="1174.39" y="447.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match (64 samples, 1.22%)</title><rect x="686.0" y="277" width="14.3" height="15.0" fill="rgb(242,165,51)" rx="2" ry="2" />
<text  x="688.98" y="287.5" ></text>
</g>
<g >
<title>choose::config::Opt::augment_clap::_$u7b$$u7b$closure$u7d$$u7d$::hd02345ce6c3e5fb0 (1 samples, 0.02%)</title><rect x="10.2" y="597" width="0.2" height="15.0" fill="rgb(246,70,46)" rx="2" ry="2" />
<text  x="13.22" y="607.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="753.9" y="293" width="0.2" height="15.0" fill="rgb(246,166,12)" rx="2" ry="2" />
<text  x="756.92" y="303.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="24.8" y="405" width="0.2" height="15.0" fill="rgb(236,187,19)" rx="2" ry="2" />
<text  x="27.80" y="415.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.04%)</title><rect x="25.0" y="373" width="0.5" height="15.0" fill="rgb(218,223,50)" rx="2" ry="2" />
<text  x="28.02" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (3 samples, 0.06%)</title><rect x="32.6" y="293" width="0.7" height="15.0" fill="rgb(248,130,17)" rx="2" ry="2" />
<text  x="35.64" y="303.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.10%)</title><rect x="1125.0" y="85" width="1.1" height="15.0" fill="rgb(207,62,9)" rx="2" ry="2" />
<text  x="1127.98" y="95.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (5 samples, 0.10%)</title><rect x="1125.0" y="133" width="1.1" height="15.0" fill="rgb(234,53,28)" rx="2" ry="2" />
<text  x="1127.98" y="143.5" ></text>
</g>
<g >
<title>&lt;str as core::fmt::Display&gt;::fmt (7 samples, 0.13%)</title><rect x="1136.2" y="229" width="1.6" height="15.0" fill="rgb(217,66,14)" rx="2" ry="2" />
<text  x="1139.19" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (23 samples, 0.44%)</title><rect x="1034.4" y="133" width="5.2" height="15.0" fill="rgb(254,123,2)" rx="2" ry="2" />
<text  x="1037.40" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_write (9 samples, 0.17%)</title><rect x="1034.6" y="53" width="2.0" height="15.0" fill="rgb(208,151,41)" rx="2" ry="2" />
<text  x="1037.62" y="63.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice (4,990 samples, 94.81%)</title><rect x="58.9" y="469" width="1118.8" height="15.0" fill="rgb(230,150,53)" rx="2" ry="2" />
<text  x="61.88" y="479.5" >choose::choice::Choice::get_choice_slice</text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (7 samples, 0.13%)</title><rect x="25.9" y="341" width="1.6" height="15.0" fill="rgb(238,96,10)" rx="2" ry="2" />
<text  x="28.92" y="351.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.2" y="549" width="0.2" height="15.0" fill="rgb(247,208,20)" rx="2" ry="2" />
<text  x="13.22" y="559.5" ></text>
</g>
<g >
<title>regex::cache::imp::Cached&lt;T&gt;::get_or (28 samples, 0.53%)</title><rect x="1171.4" y="389" width="6.3" height="15.0" fill="rgb(242,200,22)" rx="2" ry="2" />
<text  x="1174.39" y="399.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,916 samples, 93.41%)</title><rect x="62.2" y="421" width="1102.2" height="15.0" fill="rgb(241,128,31)" rx="2" ry="2" />
<text  x="65.24" y="431.5" >&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (266 samples, 5.05%)</title><rect x="626.3" y="213" width="59.7" height="15.0" fill="rgb(239,126,25)" rx="2" ry="2" />
<text  x="629.34" y="223.5" >&lt;core:..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="753.9" y="261" width="0.2" height="15.0" fill="rgb(251,108,0)" rx="2" ry="2" />
<text  x="756.92" y="271.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::is_empty (26 samples, 0.49%)</title><rect x="1126.1" y="197" width="5.8" height="15.0" fill="rgb(239,109,0)" rx="2" ry="2" />
<text  x="1129.10" y="207.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::ends_with (1 samples, 0.02%)</title><rect x="15.6" y="469" width="0.2" height="15.0" fill="rgb(221,57,37)" rx="2" ry="2" />
<text  x="18.61" y="479.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_finish (1 samples, 0.02%)</title><rect x="10.2" y="485" width="0.2" height="15.0" fill="rgb(209,171,23)" rx="2" ry="2" />
<text  x="13.22" y="495.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (14 samples, 0.27%)</title><rect x="1186.9" y="453" width="3.1" height="15.0" fill="rgb(217,193,46)" rx="2" ry="2" />
<text  x="1189.86" y="463.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="1187.8" y="389" width="0.2" height="15.0" fill="rgb(227,23,17)" rx="2" ry="2" />
<text  x="1190.76" y="399.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (344 samples, 6.54%)</title><rect x="1049.0" y="165" width="77.1" height="15.0" fill="rgb(252,30,24)" rx="2" ry="2" />
<text  x="1051.97" y="175.5" >alloc::v..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(222,172,48)" rx="2" ry="2" />
<text  x="1192.78" y="367.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h60eb6e84e73a9e8e (102 samples, 1.94%)</title><rect x="775.0" y="293" width="22.9" height="15.0" fill="rgb(247,113,41)" rx="2" ry="2" />
<text  x="777.99" y="303.5" >c..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(236,204,39)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (127 samples, 2.41%)</title><rect x="597.9" y="213" width="28.4" height="15.0" fill="rgb(223,129,15)" rx="2" ry="2" />
<text  x="600.87" y="223.5" >&lt;a..</text>
</g>
<g >
<title>std::sys::unix::memchr::memchr (67 samples, 1.27%)</title><rect x="34.9" y="389" width="15.0" height="15.0" fill="rgb(245,39,51)" rx="2" ry="2" />
<text  x="37.89" y="399.5" ></text>
</g>
<g >
<title>core::str::run_utf8_validation (28 samples, 0.53%)</title><rect x="19.2" y="421" width="6.3" height="15.0" fill="rgb(206,223,8)" rx="2" ry="2" />
<text  x="22.19" y="431.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (28 samples, 0.53%)</title><rect x="1034.0" y="165" width="6.2" height="15.0" fill="rgb(252,124,45)" rx="2" ry="2" />
<text  x="1036.95" y="175.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.04%)</title><rect x="1156.8" y="213" width="0.5" height="15.0" fill="rgb(223,141,21)" rx="2" ry="2" />
<text  x="1159.82" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(223,88,40)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (13 samples, 0.25%)</title><rect x="915.8" y="213" width="2.9" height="15.0" fill="rgb(205,203,49)" rx="2" ry="2" />
<text  x="918.80" y="223.5" ></text>
</g>
<g >
<title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1177.0" y="261" width="0.2" height="15.0" fill="rgb(205,144,34)" rx="2" ry="2" />
<text  x="1180.00" y="271.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(253,139,24)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>regex::compile::CompileClass::compile (1 samples, 0.02%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(223,185,28)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.70%)</title><rect x="367.2" y="261" width="8.3" height="15.0" fill="rgb(241,186,48)" rx="2" ry="2" />
<text  x="370.16" y="271.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hf2a9e8088ced8fdb (5,261 samples, 99.96%)</title><rect x="10.4" y="517" width="1179.6" height="15.0" fill="rgb(245,143,42)" rx="2" ry="2" />
<text  x="13.45" y="527.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hf2a9e8088ced8fdb</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (21 samples, 0.40%)</title><rect x="29.3" y="341" width="4.7" height="15.0" fill="rgb(217,106,28)" rx="2" ry="2" />
<text  x="32.28" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.08%)</title><rect x="61.3" y="437" width="0.9" height="15.0" fill="rgb(219,37,40)" rx="2" ry="2" />
<text  x="64.34" y="447.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.25%)</title><rect x="915.8" y="229" width="2.9" height="15.0" fill="rgb(250,98,26)" rx="2" ry="2" />
<text  x="918.80" y="239.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.0" y="645" width="0.2" height="15.0" fill="rgb(206,155,23)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (156 samples, 2.96%)</title><rect x="14.9" y="485" width="35.0" height="15.0" fill="rgb(230,170,4)" rx="2" ry="2" />
<text  x="17.93" y="495.5" >&lt;s..</text>
</g>
<g >
<title>choose::main (5,261 samples, 99.96%)</title><rect x="10.4" y="501" width="1179.6" height="15.0" fill="rgb(232,81,32)" rx="2" ry="2" />
<text  x="13.45" y="511.5" >choose::main</text>
</g>
<g >
<title>regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="10.0" y="629" width="0.2" height="15.0" fill="rgb(229,139,54)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.80%)</title><rect x="398.1" y="181" width="9.4" height="15.0" fill="rgb(215,40,37)" rx="2" ry="2" />
<text  x="401.10" y="191.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (9 samples, 0.17%)</title><rect x="1188.0" y="405" width="2.0" height="15.0" fill="rgb(205,181,54)" rx="2" ry="2" />
<text  x="1190.98" y="415.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (31 samples, 0.59%)</title><rect x="709.7" y="325" width="7.0" height="15.0" fill="rgb(233,171,15)" rx="2" ry="2" />
<text  x="712.75" y="335.5" ></text>
</g>
<g >
<title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1 samples, 0.02%)</title><rect x="15.6" y="453" width="0.2" height="15.0" fill="rgb(249,153,21)" rx="2" ry="2" />
<text  x="18.61" y="463.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.0" y="517" width="0.2" height="15.0" fill="rgb(252,206,20)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="10.2" y="405" width="0.2" height="15.0" fill="rgb(238,89,18)" rx="2" ry="2" />
<text  x="13.22" y="415.5" ></text>
</g>
<g >
<title>regex::exec::Exec::searcher (28 samples, 0.53%)</title><rect x="1171.4" y="405" width="6.3" height="15.0" fill="rgb(219,119,37)" rx="2" ry="2" />
<text  x="1174.39" y="415.5" ></text>
</g>
<g >
<title>core::fmt::write (1,285 samples, 24.42%)</title><rect x="869.2" y="245" width="288.1" height="15.0" fill="rgb(214,76,16)" rx="2" ry="2" />
<text  x="872.16" y="255.5" >core::fmt::write</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1039.6" y="101" width="0.2" height="15.0" fill="rgb(228,203,6)" rx="2" ry="2" />
<text  x="1042.56" y="111.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold::ok::_$u7b$$u7b$closure$u7d$$u7d$::hc21a21cc8402deb0 (1,812 samples, 34.43%)</title><rect x="757.5" y="357" width="406.3" height="15.0" fill="rgb(242,219,19)" rx="2" ry="2" />
<text  x="760.51" y="367.5" >core::iter::traits::iterator::Iterator::fold::ok::_$u7b..</text>
</g>
<g >
<title>std::io::read_until (109 samples, 2.07%)</title><rect x="25.5" y="421" width="24.4" height="15.0" fill="rgb(225,62,43)" rx="2" ry="2" />
<text  x="28.47" y="431.5" >s..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.04%)</title><rect x="14.3" y="437" width="0.4" height="15.0" fill="rgb(212,141,40)" rx="2" ry="2" />
<text  x="17.26" y="447.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_one (1 samples, 0.02%)</title><rect x="10.2" y="501" width="0.2" height="15.0" fill="rgb(225,61,29)" rx="2" ry="2" />
<text  x="13.22" y="511.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (440 samples, 8.36%)</title><rect x="1027.5" y="197" width="98.6" height="15.0" fill="rgb(238,216,14)" rx="2" ry="2" />
<text  x="1030.45" y="207.5" >&lt;std::io::b..</text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (9 samples, 0.17%)</title><rect x="1034.6" y="69" width="2.0" height="15.0" fill="rgb(236,58,48)" rx="2" ry="2" />
<text  x="1037.62" y="79.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.04%)</title><rect x="1039.1" y="85" width="0.5" height="15.0" fill="rgb(253,98,14)" rx="2" ry="2" />
<text  x="1042.11" y="95.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="34.2" y="357" width="0.2" height="15.0" fill="rgb(232,79,33)" rx="2" ry="2" />
<text  x="37.21" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (2,979 samples, 56.60%)</title><rect x="89.6" y="357" width="667.9" height="15.0" fill="rgb(244,164,35)" rx="2" ry="2" />
<text  x="92.59" y="367.5" >&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (72 samples, 1.37%)</title><rect x="734.9" y="293" width="16.1" height="15.0" fill="rgb(231,221,15)" rx="2" ry="2" />
<text  x="737.86" y="303.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::push_split_hole (1 samples, 0.02%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(234,169,12)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find::_$u7b$$u7b$closure$u7d$$u7d$::hdb1676866af22238 (247 samples, 4.69%)</title><rect x="421.2" y="229" width="55.4" height="15.0" fill="rgb(210,50,30)" rx="2" ry="2" />
<text  x="424.20" y="239.5" >regex..</text>
</g>
<g >
<title>__libc_start_main (5,261 samples, 99.96%)</title><rect x="10.4" y="645" width="1179.6" height="15.0" fill="rgb(253,138,8)" rx="2" ry="2" />
<text  x="13.45" y="655.5" >__libc_start_main</text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="1181.7" y="405" width="0.2" height="15.0" fill="rgb(227,104,42)" rx="2" ry="2" />
<text  x="1184.70" y="415.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (247 samples, 4.69%)</title><rect x="421.2" y="245" width="55.4" height="15.0" fill="rgb(247,46,13)" rx="2" ry="2" />
<text  x="424.20" y="255.5" >core:..</text>
</g>
<g >
<title>std::io::BufRead::read_line (152 samples, 2.89%)</title><rect x="15.8" y="469" width="34.1" height="15.0" fill="rgb(231,173,11)" rx="2" ry="2" />
<text  x="18.83" y="479.5" >st..</text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (9 samples, 0.17%)</title><rect x="1034.6" y="85" width="2.0" height="15.0" fill="rgb(238,4,10)" rx="2" ry="2" />
<text  x="1037.62" y="95.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (3 samples, 0.06%)</title><rect x="32.6" y="325" width="0.7" height="15.0" fill="rgb(231,84,54)" rx="2" ry="2" />
<text  x="35.64" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="10.2" y="421" width="0.2" height="15.0" fill="rgb(226,86,12)" rx="2" ry="2" />
<text  x="13.22" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="1188.0" y="357" width="1.1" height="15.0" fill="rgb(206,141,19)" rx="2" ry="2" />
<text  x="1190.98" y="367.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (2 samples, 0.04%)</title><rect x="33.5" y="325" width="0.5" height="15.0" fill="rgb(245,93,41)" rx="2" ry="2" />
<text  x="36.54" y="335.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (266 samples, 5.05%)</title><rect x="626.3" y="197" width="59.7" height="15.0" fill="rgb(213,84,6)" rx="2" ry="2" />
<text  x="629.34" y="207.5" >&lt;core:..</text>
</g>
<g >
<title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="33.3" y="277" width="0.2" height="15.0" fill="rgb(220,107,23)" rx="2" ry="2" />
<text  x="36.32" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="33.1" y="261" width="0.2" height="15.0" fill="rgb(254,6,33)" rx="2" ry="2" />
<text  x="36.09" y="271.5" ></text>
</g>
<g >
<title>&lt;&amp;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.04%)</title><rect x="14.3" y="485" width="0.4" height="15.0" fill="rgb(235,94,16)" rx="2" ry="2" />
<text  x="17.26" y="495.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (25 samples, 0.48%)</title><rect x="28.4" y="373" width="5.6" height="15.0" fill="rgb(219,166,50)" rx="2" ry="2" />
<text  x="31.38" y="383.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.2" y="581" width="0.2" height="15.0" fill="rgb(217,112,18)" rx="2" ry="2" />
<text  x="13.22" y="591.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="10.2" y="389" width="0.2" height="15.0" fill="rgb(229,66,9)" rx="2" ry="2" />
<text  x="13.22" y="399.5" ></text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.02%)</title><rect x="1181.9" y="405" width="0.3" height="15.0" fill="rgb(206,132,25)" rx="2" ry="2" />
<text  x="1184.93" y="415.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 0.11%)</title><rect x="1133.7" y="117" width="1.4" height="15.0" fill="rgb(205,28,44)" rx="2" ry="2" />
<text  x="1136.72" y="127.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (29 samples, 0.55%)</title><rect x="1183.5" y="485" width="6.5" height="15.0" fill="rgb(226,166,37)" rx="2" ry="2" />
<text  x="1186.50" y="495.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (12 samples, 0.23%)</title><rect x="1031.0" y="181" width="2.7" height="15.0" fill="rgb(237,161,31)" rx="2" ry="2" />
<text  x="1034.04" y="191.5" ></text>
</g>
<g >
<title>&lt;&amp;T as core::fmt::Display&gt;::fmt (23 samples, 0.44%)</title><rect x="910.6" y="229" width="5.2" height="15.0" fill="rgb(235,41,7)" rx="2" ry="2" />
<text  x="913.64" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.17%)</title><rect x="1188.0" y="389" width="2.0" height="15.0" fill="rgb(229,214,5)" rx="2" ry="2" />
<text  x="1190.98" y="399.5" ></text>
</g>
</g>
</svg>
