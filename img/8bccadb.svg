<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.03%)</title><rect x="1187.2" y="373" width="0.4" height="15.0" fill="rgb(230,229,30)" rx="2" ry="2" />
<text  x="1190.21" y="383.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.44%)</title><rect x="346.5" y="85" width="5.2" height="15.0" fill="rgb(207,88,4)" rx="2" ry="2" />
<text  x="349.45" y="95.5" ></text>
</g>
<g >
<title>&lt;str as core::fmt::Display&gt;::fmt (9 samples, 0.14%)</title><rect x="1175.3" y="373" width="1.7" height="15.0" fill="rgb(252,5,9)" rx="2" ry="2" />
<text  x="1178.28" y="383.5" ></text>
</g>
<g >
<title>alloc::slice::&lt;impl [T]&gt;::join (480 samples, 7.58%)</title><rect x="37.8" y="405" width="89.4" height="15.0" fill="rgb(244,22,27)" rx="2" ry="2" />
<text  x="40.76" y="415.5" >alloc::sli..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(246,134,40)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,310 samples, 36.47%)</title><rect x="158.5" y="245" width="430.3" height="15.0" fill="rgb(233,59,46)" rx="2" ry="2" />
<text  x="161.48" y="255.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::..</text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::h3102dd7a0279214e (209 samples, 3.30%)</title><rect x="549.9" y="213" width="38.9" height="15.0" fill="rgb(215,129,28)" rx="2" ry="2" />
<text  x="552.89" y="223.5" >cor..</text>
</g>
<g >
<title>std::thread::local::fast::Key&lt;T&gt;::get (5 samples, 0.08%)</title><rect x="1030.5" y="213" width="1.0" height="15.0" fill="rgb(244,95,0)" rx="2" ry="2" />
<text  x="1033.53" y="223.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (7 samples, 0.11%)</title><rect x="542.2" y="133" width="1.4" height="15.0" fill="rgb(232,54,9)" rx="2" ry="2" />
<text  x="545.25" y="143.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.35%)</title><rect x="884.8" y="117" width="4.1" height="15.0" fill="rgb(212,14,37)" rx="2" ry="2" />
<text  x="887.85" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,269 samples, 20.03%)</title><rect x="763.4" y="341" width="236.4" height="15.0" fill="rgb(242,146,21)" rx="2" ry="2" />
<text  x="766.38" y="351.5" >&lt;core::iter::adapters::Map&lt;I,F&gt;..</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (207 samples, 3.27%)</title><rect x="361.9" y="101" width="38.6" height="15.0" fill="rgb(206,68,29)" rx="2" ry="2" />
<text  x="364.91" y="111.5" >cor..</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.11%)</title><rect x="1019.4" y="245" width="1.3" height="15.0" fill="rgb(217,118,8)" rx="2" ry="2" />
<text  x="1022.35" y="255.5" ></text>
</g>
<g >
<title>choose::choice::Choice::is_reverse_range (4 samples, 0.06%)</title><rect x="137.4" y="389" width="0.8" height="15.0" fill="rgb(211,9,27)" rx="2" ry="2" />
<text  x="140.43" y="399.5" ></text>
</g>
<g >
<title>__GI___read (2 samples, 0.03%)</title><rect x="25.6" y="261" width="0.4" height="15.0" fill="rgb(205,93,0)" rx="2" ry="2" />
<text  x="28.65" y="271.5" ></text>
</g>
<g >
<title>__rdl_alloc (10 samples, 0.16%)</title><rect x="1018.8" y="261" width="1.9" height="15.0" fill="rgb(207,157,24)" rx="2" ry="2" />
<text  x="1021.79" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 0.22%)</title><rect x="26.0" y="341" width="2.6" height="15.0" fill="rgb(224,123,19)" rx="2" ry="2" />
<text  x="29.02" y="351.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="19.3" y="325" width="0.2" height="15.0" fill="rgb(235,176,34)" rx="2" ry="2" />
<text  x="22.31" y="335.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="506.5" y="117" width="0.9" height="15.0" fill="rgb(235,105,35)" rx="2" ry="2" />
<text  x="509.48" y="127.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (4 samples, 0.06%)</title><rect x="999.0" y="213" width="0.8" height="15.0" fill="rgb(229,17,48)" rx="2" ry="2" />
<text  x="1002.05" y="223.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::h0adafc8155ad9d41 (10 samples, 0.16%)</title><rect x="548.0" y="213" width="1.9" height="15.0" fill="rgb(225,133,32)" rx="2" ry="2" />
<text  x="551.02" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,280 samples, 51.78%)</title><rect x="152.3" y="341" width="611.1" height="15.0" fill="rgb(217,102,7)" rx="2" ry="2" />
<text  x="155.33" y="351.5" >&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="1029.4" y="277" width="0.2" height="15.0" fill="rgb(216,57,41)" rx="2" ry="2" />
<text  x="1032.41" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_write (14 samples, 0.22%)</title><rect x="1155.2" y="197" width="2.6" height="15.0" fill="rgb(232,185,23)" rx="2" ry="2" />
<text  x="1158.16" y="207.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h7b3fcdb7612c0284 (4 samples, 0.06%)</title><rect x="969.8" y="181" width="0.7" height="15.0" fill="rgb(220,223,46)" rx="2" ry="2" />
<text  x="972.80" y="191.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (6,333 samples, 99.98%)</title><rect x="10.2" y="533" width="1179.8" height="15.0" fill="rgb(207,52,32)" rx="2" ry="2" />
<text  x="13.19" y="543.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>__GI___libc_realloc (800 samples, 12.63%)</title><rect x="595.7" y="229" width="149.1" height="15.0" fill="rgb(231,218,5)" rx="2" ry="2" />
<text  x="598.72" y="239.5" >__GI___libc_realloc</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.14%)</title><rect x="26.8" y="293" width="1.6" height="15.0" fill="rgb(240,98,10)" rx="2" ry="2" />
<text  x="29.77" y="303.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find::_$u7b$$u7b$closure$u7d$$u7d$::hdb1676866af22238 (207 samples, 3.27%)</title><rect x="361.9" y="85" width="38.6" height="15.0" fill="rgb(247,226,23)" rx="2" ry="2" />
<text  x="364.91" y="95.5" >reg..</text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.13%)</title><rect x="26.8" y="229" width="1.5" height="15.0" fill="rgb(245,1,26)" rx="2" ry="2" />
<text  x="29.77" y="239.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.03%)</title><rect x="1174.5" y="261" width="0.4" height="15.0" fill="rgb(218,214,22)" rx="2" ry="2" />
<text  x="1177.54" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (39 samples, 0.62%)</title><rect x="1161.1" y="277" width="7.3" height="15.0" fill="rgb(229,149,52)" rx="2" ry="2" />
<text  x="1164.12" y="287.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (57 samples, 0.90%)</title><rect x="918.4" y="69" width="10.6" height="15.0" fill="rgb(217,159,18)" rx="2" ry="2" />
<text  x="921.38" y="79.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (7 samples, 0.11%)</title><rect x="542.2" y="149" width="1.4" height="15.0" fill="rgb(205,116,3)" rx="2" ry="2" />
<text  x="545.25" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4,689 samples, 74.03%)</title><rect x="148.4" y="357" width="873.6" height="15.0" fill="rgb(225,134,1)" rx="2" ry="2" />
<text  x="151.42" y="367.5" >&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f (6,333 samples, 99.98%)</title><rect x="10.2" y="469" width="1179.8" height="15.0" fill="rgb(249,63,16)" rx="2" ry="2" />
<text  x="13.19" y="479.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f</text>
</g>
<g >
<title>__rdl_dealloc (5 samples, 0.08%)</title><rect x="1048.6" y="325" width="0.9" height="15.0" fill="rgb(244,151,50)" rx="2" ry="2" />
<text  x="1051.60" y="335.5" ></text>
</g>
<g >
<title>__rust_alloc (5 samples, 0.08%)</title><rect x="86.6" y="277" width="0.9" height="15.0" fill="rgb(225,71,33)" rx="2" ry="2" />
<text  x="89.57" y="287.5" ></text>
</g>
<g >
<title>&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (2 samples, 0.03%)</title><rect x="17.1" y="325" width="0.4" height="15.0" fill="rgb(224,105,19)" rx="2" ry="2" />
<text  x="20.08" y="335.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(207,205,8)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (12 samples, 0.19%)</title><rect x="1184.0" y="389" width="2.3" height="15.0" fill="rgb(218,6,29)" rx="2" ry="2" />
<text  x="1187.04" y="399.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1,261 samples, 19.91%)</title><rect x="764.9" y="261" width="234.9" height="15.0" fill="rgb(235,185,53)" rx="2" ry="2" />
<text  x="767.87" y="271.5" >core::iter::traits::iterator::I..</text>
</g>
<g >
<title>main (6,333 samples, 99.98%)</title><rect x="10.2" y="565" width="1179.8" height="15.0" fill="rgb(248,178,7)" rx="2" ry="2" />
<text  x="13.19" y="575.5" >main</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="551.2" y="181" width="0.2" height="15.0" fill="rgb(239,128,15)" rx="2" ry="2" />
<text  x="554.19" y="191.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::find (531 samples, 8.38%)</title><rect x="400.5" y="101" width="98.9" height="15.0" fill="rgb(225,134,11)" rx="2" ry="2" />
<text  x="403.48" y="111.5" >regex::lite..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="19.3" y="373" width="0.2" height="15.0" fill="rgb(215,26,43)" rx="2" ry="2" />
<text  x="22.31" y="383.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (70 samples, 1.11%)</title><rect x="1160.6" y="293" width="13.0" height="15.0" fill="rgb(227,45,49)" rx="2" ry="2" />
<text  x="1163.57" y="303.5" ></text>
</g>
<g >
<title>choose (6,334 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(206,9,25)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >choose</text>
</g>
<g >
<title>regex::cache::imp::Cached&lt;T&gt;::get_or (17 samples, 0.27%)</title><rect x="1028.7" y="325" width="3.1" height="15.0" fill="rgb(241,117,46)" rx="2" ry="2" />
<text  x="1031.67" y="335.5" ></text>
</g>
<g >
<title>regex_syntax::hir::ClassUnicodeRange::end (1 samples, 0.02%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(242,25,23)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Read for alloc::boxed::Box&lt;R&gt;&gt;::read (3 samples, 0.05%)</title><rect x="25.5" y="325" width="0.5" height="15.0" fill="rgb(242,183,33)" rx="2" ry="2" />
<text  x="28.46" y="335.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1 samples, 0.02%)</title><rect x="966.8" y="213" width="0.2" height="15.0" fill="rgb(246,159,45)" rx="2" ry="2" />
<text  x="969.82" y="223.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::_find (302 samples, 4.77%)</title><rect x="888.9" y="117" width="56.3" height="15.0" fill="rgb(250,147,27)" rx="2" ry="2" />
<text  x="891.95" y="127.5" >regex..</text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::h9a75940b9359d2b5 (152 samples, 2.40%)</title><rect x="970.7" y="229" width="28.3" height="15.0" fill="rgb(209,67,51)" rx="2" ry="2" />
<text  x="973.73" y="239.5" >_..</text>
</g>
<g >
<title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (125 samples, 1.97%)</title><rect x="521.6" y="197" width="23.3" height="15.0" fill="rgb(218,214,7)" rx="2" ry="2" />
<text  x="524.57" y="207.5" >c..</text>
</g>
<g >
<title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 1.33%)</title><rect x="15.4" y="421" width="15.7" height="15.0" fill="rgb(233,139,36)" rx="2" ry="2" />
<text  x="18.40" y="431.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (9 samples, 0.14%)</title><rect x="26.8" y="245" width="1.6" height="15.0" fill="rgb(243,109,27)" rx="2" ry="2" />
<text  x="29.77" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (7 samples, 0.11%)</title><rect x="752.9" y="261" width="1.4" height="15.0" fill="rgb(245,64,44)" rx="2" ry="2" />
<text  x="755.95" y="271.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.13%)</title><rect x="859.9" y="69" width="1.5" height="15.0" fill="rgb(221,213,24)" rx="2" ry="2" />
<text  x="862.88" y="79.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (14 samples, 0.22%)</title><rect x="1155.2" y="261" width="2.6" height="15.0" fill="rgb(217,175,14)" rx="2" ry="2" />
<text  x="1158.16" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.02%)</title><rect x="24.7" y="341" width="0.2" height="15.0" fill="rgb(214,121,44)" rx="2" ry="2" />
<text  x="27.72" y="351.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="917.8" y="85" width="0.6" height="15.0" fill="rgb(216,52,17)" rx="2" ry="2" />
<text  x="920.82" y="95.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (3 samples, 0.05%)</title><rect x="48.9" y="357" width="0.6" height="15.0" fill="rgb(238,119,49)" rx="2" ry="2" />
<text  x="51.94" y="367.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.24%)</title><rect x="1168.8" y="261" width="2.8" height="15.0" fill="rgb(207,83,36)" rx="2" ry="2" />
<text  x="1171.76" y="271.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2 samples, 0.03%)</title><rect x="966.4" y="181" width="0.4" height="15.0" fill="rgb(251,146,21)" rx="2" ry="2" />
<text  x="969.44" y="191.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (46 samples, 0.73%)</title><rect x="958.4" y="229" width="8.6" height="15.0" fill="rgb(228,118,34)" rx="2" ry="2" />
<text  x="961.43" y="239.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_concat (1 samples, 0.02%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(216,98,47)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (13 samples, 0.21%)</title><rect x="1183.9" y="421" width="2.4" height="15.0" fill="rgb(205,45,27)" rx="2" ry="2" />
<text  x="1186.85" y="431.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::and_then (28 samples, 0.44%)</title><rect x="87.5" y="357" width="5.2" height="15.0" fill="rgb(222,157,8)" rx="2" ry="2" />
<text  x="90.50" y="367.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find (450 samples, 7.10%)</title><rect x="861.4" y="149" width="83.8" height="15.0" fill="rgb(219,13,6)" rx="2" ry="2" />
<text  x="864.37" y="159.5" >regex::li..</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (16 samples, 0.25%)</title><rect x="955.5" y="213" width="2.9" height="15.0" fill="rgb(231,177,7)" rx="2" ry="2" />
<text  x="958.45" y="223.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.08%)</title><rect x="85.6" y="261" width="1.0" height="15.0" fill="rgb(230,55,6)" rx="2" ry="2" />
<text  x="88.64" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_desugared (3,271 samples, 51.64%)</title><rect x="154.0" y="325" width="609.4" height="15.0" fill="rgb(237,36,50)" rx="2" ry="2" />
<text  x="157.01" y="335.5" >alloc::vec::Vec&lt;T&gt;::extend_desugared</text>
</g>
<g >
<title>__memrchr_avx2 (2 samples, 0.03%)</title><rect x="1159.4" y="229" width="0.4" height="15.0" fill="rgb(252,158,41)" rx="2" ry="2" />
<text  x="1162.45" y="239.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(214,196,42)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (14 samples, 0.22%)</title><rect x="1155.2" y="245" width="2.6" height="15.0" fill="rgb(219,109,45)" rx="2" ry="2" />
<text  x="1158.16" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (4 samples, 0.06%)</title><rect x="59.7" y="293" width="0.8" height="15.0" fill="rgb(222,6,42)" rx="2" ry="2" />
<text  x="62.74" y="303.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (7 samples, 0.11%)</title><rect x="118.1" y="357" width="1.3" height="15.0" fill="rgb(217,28,51)" rx="2" ry="2" />
<text  x="121.05" y="367.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.44%)</title><rect x="346.5" y="101" width="5.2" height="15.0" fill="rgb(246,59,53)" rx="2" ry="2" />
<text  x="349.45" y="111.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="19.3" y="341" width="0.2" height="15.0" fill="rgb(231,25,26)" rx="2" ry="2" />
<text  x="22.31" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (82 samples, 1.29%)</title><rect x="69.4" y="277" width="15.3" height="15.0" fill="rgb(237,200,49)" rx="2" ry="2" />
<text  x="72.43" y="287.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (114 samples, 1.80%)</title><rect x="1000.2" y="293" width="21.2" height="15.0" fill="rgb(245,77,17)" rx="2" ry="2" />
<text  x="1003.16" y="303.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (12 samples, 0.19%)</title><rect x="1029.6" y="277" width="2.2" height="15.0" fill="rgb(208,108,48)" rx="2" ry="2" />
<text  x="1032.60" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::h3bbbe95106a5d30f (4 samples, 0.06%)</title><rect x="969.8" y="213" width="0.7" height="15.0" fill="rgb(253,123,24)" rx="2" ry="2" />
<text  x="972.80" y="223.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.08%)</title><rect x="1048.6" y="309" width="0.9" height="15.0" fill="rgb(208,14,12)" rx="2" ry="2" />
<text  x="1051.60" y="319.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(223,198,3)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find (2,310 samples, 36.47%)</title><rect x="158.5" y="277" width="430.3" height="15.0" fill="rgb(231,120,9)" rx="2" ry="2" />
<text  x="161.48" y="287.5" >core::iter::traits::iterator::Iterator::find</text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (471 samples, 7.44%)</title><rect x="39.4" y="389" width="87.8" height="15.0" fill="rgb(206,213,26)" rx="2" ry="2" />
<text  x="42.43" y="399.5" >alloc::str..</text>
</g>
<g >
<title>alloc::alloc::alloc (114 samples, 1.80%)</title><rect x="1000.2" y="277" width="21.2" height="15.0" fill="rgb(219,189,15)" rx="2" ry="2" />
<text  x="1003.16" y="287.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.0" y="517" width="0.2" height="15.0" fill="rgb(221,40,10)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (6 samples, 0.09%)</title><rect x="24.9" y="341" width="1.1" height="15.0" fill="rgb(237,93,29)" rx="2" ry="2" />
<text  x="27.90" y="351.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8 samples, 0.13%)</title><rect x="859.9" y="101" width="1.5" height="15.0" fill="rgb(223,216,16)" rx="2" ry="2" />
<text  x="862.88" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::with_capacity (108 samples, 1.71%)</title><rect x="67.4" y="357" width="20.1" height="15.0" fill="rgb(252,115,6)" rx="2" ry="2" />
<text  x="70.38" y="367.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::ends_with (4 samples, 0.06%)</title><rect x="16.7" y="373" width="0.8" height="15.0" fill="rgb(216,114,34)" rx="2" ry="2" />
<text  x="19.71" y="383.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::find_iter (17 samples, 0.27%)</title><rect x="1028.7" y="373" width="3.1" height="15.0" fill="rgb(227,70,21)" rx="2" ry="2" />
<text  x="1031.67" y="383.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="25.3" y="309" width="0.2" height="15.0" fill="rgb(247,46,24)" rx="2" ry="2" />
<text  x="28.28" y="319.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.25%)</title><rect x="89.2" y="293" width="3.0" height="15.0" fill="rgb(205,217,34)" rx="2" ry="2" />
<text  x="92.18" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (6,333 samples, 99.98%)</title><rect x="10.2" y="581" width="1179.8" height="15.0" fill="rgb(243,65,18)" rx="2" ry="2" />
<text  x="13.19" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>core::iter::adapters::map_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::h456ca573e4b566c1 (3 samples, 0.05%)</title><rect x="92.2" y="293" width="0.5" height="15.0" fill="rgb(234,73,49)" rx="2" ry="2" />
<text  x="95.16" y="303.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (19 samples, 0.30%)</title><rect x="747.4" y="213" width="3.5" height="15.0" fill="rgb(253,166,15)" rx="2" ry="2" />
<text  x="750.36" y="223.5" ></text>
</g>
<g >
<title>core::fmt::write (348 samples, 5.49%)</title><rect x="1118.1" y="389" width="64.8" height="15.0" fill="rgb(250,100,18)" rx="2" ry="2" />
<text  x="1121.09" y="399.5" >core::f..</text>
</g>
<g >
<title>std::io::Write::write_all (10 samples, 0.16%)</title><rect x="1188.1" y="373" width="1.9" height="15.0" fill="rgb(232,24,5)" rx="2" ry="2" />
<text  x="1191.14" y="383.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.13%)</title><rect x="859.9" y="149" width="1.5" height="15.0" fill="rgb(216,6,21)" rx="2" ry="2" />
<text  x="862.88" y="159.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (36 samples, 0.57%)</title><rect x="60.5" y="325" width="6.7" height="15.0" fill="rgb(247,140,53)" rx="2" ry="2" />
<text  x="63.49" y="335.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.02%)</title><rect x="549.7" y="181" width="0.2" height="15.0" fill="rgb(212,150,39)" rx="2" ry="2" />
<text  x="552.70" y="191.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.02%)</title><rect x="1159.3" y="277" width="0.1" height="15.0" fill="rgb(229,61,5)" rx="2" ry="2" />
<text  x="1162.26" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.03%)</title><rect x="1158.9" y="245" width="0.4" height="15.0" fill="rgb(230,65,5)" rx="2" ry="2" />
<text  x="1161.89" y="255.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::split_at_mut (21 samples, 0.33%)</title><rect x="119.4" y="357" width="3.9" height="15.0" fill="rgb(231,224,54)" rx="2" ry="2" />
<text  x="122.36" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (1,085 samples, 17.13%)</title><rect x="766.9" y="245" width="202.2" height="15.0" fill="rgb(225,66,38)" rx="2" ry="2" />
<text  x="769.92" y="255.5" >&lt;regex::re_unicode::Split ..</text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (44 samples, 0.69%)</title><rect x="958.6" y="197" width="8.2" height="15.0" fill="rgb(208,169,44)" rx="2" ry="2" />
<text  x="961.62" y="207.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (114 samples, 1.80%)</title><rect x="1000.2" y="325" width="21.2" height="15.0" fill="rgb(224,174,33)" rx="2" ry="2" />
<text  x="1003.16" y="335.5" ></text>
</g>
<g >
<title>regex::exec::Exec::searcher (17 samples, 0.27%)</title><rect x="1028.7" y="341" width="3.1" height="15.0" fill="rgb(252,153,6)" rx="2" ry="2" />
<text  x="1031.67" y="351.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::with_capacity (114 samples, 1.80%)</title><rect x="1000.2" y="341" width="21.2" height="15.0" fill="rgb(253,25,49)" rx="2" ry="2" />
<text  x="1003.16" y="351.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,269 samples, 20.03%)</title><rect x="763.4" y="325" width="236.4" height="15.0" fill="rgb(243,121,7)" rx="2" ry="2" />
<text  x="766.38" y="335.5" >&lt;core::iter::adapters::Filter&lt;I..</text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_mul (8 samples, 0.13%)</title><rect x="755.0" y="213" width="1.5" height="15.0" fill="rgb(219,135,16)" rx="2" ry="2" />
<text  x="758.00" y="223.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1159.1" y="213" width="0.2" height="15.0" fill="rgb(207,147,30)" rx="2" ry="2" />
<text  x="1162.07" y="223.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (3 samples, 0.05%)</title><rect x="544.3" y="165" width="0.6" height="15.0" fill="rgb(222,18,15)" rx="2" ry="2" />
<text  x="547.30" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.05%)</title><rect x="37.2" y="389" width="0.6" height="15.0" fill="rgb(212,189,27)" rx="2" ry="2" />
<text  x="40.20" y="399.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 1.99%)</title><rect x="475.9" y="53" width="23.5" height="15.0" fill="rgb(253,160,49)" rx="2" ry="2" />
<text  x="478.93" y="63.5" >&lt;..</text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="549" width="0.2" height="15.0" fill="rgb(235,19,3)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.13%)</title><rect x="1184.8" y="341" width="1.5" height="15.0" fill="rgb(228,100,32)" rx="2" ry="2" />
<text  x="1187.78" y="351.5" ></text>
</g>
<g >
<title>all (6,334 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(238,174,25)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (102 samples, 1.61%)</title><rect x="1154.6" y="341" width="19.0" height="15.0" fill="rgb(249,216,11)" rx="2" ry="2" />
<text  x="1157.60" y="351.5" ></text>
</g>
<g >
<title>core::fmt::write (17 samples, 0.27%)</title><rect x="1186.8" y="405" width="3.2" height="15.0" fill="rgb(211,224,28)" rx="2" ry="2" />
<text  x="1189.83" y="415.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (2 samples, 0.03%)</title><rect x="25.6" y="277" width="0.4" height="15.0" fill="rgb(237,19,54)" rx="2" ry="2" />
<text  x="28.65" y="287.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (6 samples, 0.09%)</title><rect x="1127.2" y="373" width="1.1" height="15.0" fill="rgb(242,89,16)" rx="2" ry="2" />
<text  x="1130.22" y="383.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.06%)</title><rect x="1174.5" y="277" width="0.8" height="15.0" fill="rgb(226,208,52)" rx="2" ry="2" />
<text  x="1177.54" y="287.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (25 samples, 0.39%)</title><rect x="1155.2" y="325" width="4.6" height="15.0" fill="rgb(243,32,3)" rx="2" ry="2" />
<text  x="1158.16" y="335.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (57 samples, 0.90%)</title><rect x="56.8" y="357" width="10.6" height="15.0" fill="rgb(237,121,42)" rx="2" ry="2" />
<text  x="59.76" y="367.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (60 samples, 0.95%)</title><rect x="917.8" y="101" width="11.2" height="15.0" fill="rgb(238,215,51)" rx="2" ry="2" />
<text  x="920.82" y="111.5" ></text>
</g>
<g >
<title>std::panicking::try (6,333 samples, 99.98%)</title><rect x="10.2" y="517" width="1179.8" height="15.0" fill="rgb(227,151,44)" rx="2" ry="2" />
<text  x="13.19" y="527.5" >std::panicking::try</text>
</g>
<g >
<title>thread_local::thread_id::THREAD_ID::__getit (5 samples, 0.08%)</title><rect x="1030.5" y="229" width="1.0" height="15.0" fill="rgb(226,9,4)" rx="2" ry="2" />
<text  x="1033.53" y="239.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (84 samples, 1.33%)</title><rect x="460.3" y="37" width="15.6" height="15.0" fill="rgb(237,196,22)" rx="2" ry="2" />
<text  x="463.28" y="47.5" ></text>
</g>
<g >
<title>core::slice::Iter&lt;T&gt;::post_inc_start (2 samples, 0.03%)</title><rect x="15.0" y="405" width="0.4" height="15.0" fill="rgb(228,39,6)" rx="2" ry="2" />
<text  x="18.03" y="415.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.13%)</title><rect x="548.2" y="165" width="1.5" height="15.0" fill="rgb(229,195,33)" rx="2" ry="2" />
<text  x="551.21" y="175.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (6 samples, 0.09%)</title><rect x="1157.8" y="197" width="1.1" height="15.0" fill="rgb(209,158,50)" rx="2" ry="2" />
<text  x="1160.77" y="207.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match (62 samples, 0.98%)</title><rect x="499.4" y="133" width="11.6" height="15.0" fill="rgb(227,225,17)" rx="2" ry="2" />
<text  x="502.40" y="143.5" ></text>
</g>
<g >
<title>core::ptr::write (3 samples, 0.05%)</title><rect x="1021.4" y="341" width="0.6" height="15.0" fill="rgb(205,82,10)" rx="2" ry="2" />
<text  x="1024.40" y="351.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find (793 samples, 12.52%)</title><rect x="351.7" y="117" width="147.7" height="15.0" fill="rgb(214,20,6)" rx="2" ry="2" />
<text  x="354.67" y="127.5" >regex::literal::im..</text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.03%)</title><rect x="17.1" y="357" width="0.4" height="15.0" fill="rgb(208,111,31)" rx="2" ry="2" />
<text  x="20.08" y="367.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad (29 samples, 0.46%)</title><rect x="1177.0" y="373" width="5.4" height="15.0" fill="rgb(212,93,28)" rx="2" ry="2" />
<text  x="1179.96" y="383.5" ></text>
</g>
<g >
<title>__memchr_avx2 (12 samples, 0.19%)</title><rect x="28.8" y="309" width="2.3" height="15.0" fill="rgb(251,110,33)" rx="2" ry="2" />
<text  x="31.82" y="319.5" ></text>
</g>
<g >
<title>core::slice::Iter&lt;T&gt;::post_inc_start (8 samples, 0.13%)</title><rect x="90.7" y="277" width="1.5" height="15.0" fill="rgb(207,223,44)" rx="2" ry="2" />
<text  x="93.67" y="287.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="459.9" y="53" width="0.4" height="15.0" fill="rgb(234,6,13)" rx="2" ry="2" />
<text  x="462.91" y="63.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (107 samples, 1.69%)</title><rect x="67.6" y="341" width="19.9" height="15.0" fill="rgb(207,148,23)" rx="2" ry="2" />
<text  x="70.57" y="351.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_one (1 samples, 0.02%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(205,95,8)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="19.5" y="357" width="0.4" height="15.0" fill="rgb(216,110,40)" rx="2" ry="2" />
<text  x="22.50" y="367.5" ></text>
</g>
<g >
<title>_int_free (280 samples, 4.42%)</title><rect x="1050.7" y="325" width="52.1" height="15.0" fill="rgb(212,66,16)" rx="2" ry="2" />
<text  x="1053.65" y="335.5" >_int_..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (86 samples, 1.36%)</title><rect x="459.9" y="69" width="16.0" height="15.0" fill="rgb(213,191,8)" rx="2" ry="2" />
<text  x="462.91" y="79.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (7 samples, 0.11%)</title><rect x="543.6" y="181" width="1.3" height="15.0" fill="rgb(205,38,48)" rx="2" ry="2" />
<text  x="546.55" y="191.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class::_$u7b$$u7b$closure$u7d$$u7d$::h4570d9d0df8e7bf8 (1 samples, 0.02%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(214,56,8)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_capture (1 samples, 0.02%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(251,151,3)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.03%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(219,115,39)" rx="2" ry="2" />
<text  x="1192.63" y="303.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (26 samples, 0.41%)</title><rect x="961.6" y="181" width="4.8" height="15.0" fill="rgb(216,90,48)" rx="2" ry="2" />
<text  x="964.60" y="191.5" ></text>
</g>
<g >
<title>core::str::run_utf8_validation (18 samples, 0.28%)</title><rect x="21.2" y="357" width="3.3" height="15.0" fill="rgb(210,31,42)" rx="2" ry="2" />
<text  x="24.18" y="367.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (17 samples, 0.27%)</title><rect x="741.2" y="181" width="3.2" height="15.0" fill="rgb(220,185,11)" rx="2" ry="2" />
<text  x="744.21" y="191.5" ></text>
</g>
<g >
<title>__rust_realloc (11 samples, 0.17%)</title><rect x="750.9" y="229" width="2.0" height="15.0" fill="rgb(209,171,44)" rx="2" ry="2" />
<text  x="753.90" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::find_at (721 samples, 11.38%)</title><rect x="818.0" y="181" width="134.3" height="15.0" fill="rgb(242,23,10)" rx="2" ry="2" />
<text  x="820.97" y="191.5" >&lt;regex::exec::Ex..</text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 1.37%)</title><rect x="929.0" y="85" width="16.2" height="15.0" fill="rgb(239,58,50)" rx="2" ry="2" />
<text  x="932.00" y="95.5" ></text>
</g>
<g >
<title>choose::main (6,333 samples, 99.98%)</title><rect x="10.2" y="437" width="1179.8" height="15.0" fill="rgb(213,79,6)" rx="2" ry="2" />
<text  x="13.19" y="447.5" >choose::main</text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (22 samples, 0.35%)</title><rect x="1155.2" y="277" width="4.1" height="15.0" fill="rgb(232,214,34)" rx="2" ry="2" />
<text  x="1158.16" y="287.5" ></text>
</g>
<g >
<title>std::memchr::memchr (13 samples, 0.21%)</title><rect x="28.6" y="341" width="2.5" height="15.0" fill="rgb(229,205,3)" rx="2" ry="2" />
<text  x="31.63" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.11%)</title><rect x="1188.7" y="309" width="1.3" height="15.0" fill="rgb(229,172,25)" rx="2" ry="2" />
<text  x="1191.70" y="319.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (121 samples, 1.91%)</title><rect x="976.5" y="197" width="22.5" height="15.0" fill="rgb(219,123,1)" rx="2" ry="2" />
<text  x="979.50" y="207.5" >c..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::is_empty (5 samples, 0.08%)</title><rect x="1173.6" y="341" width="0.9" height="15.0" fill="rgb(223,217,22)" rx="2" ry="2" />
<text  x="1176.61" y="351.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.03%)</title><rect x="1159.4" y="245" width="0.4" height="15.0" fill="rgb(250,68,9)" rx="2" ry="2" />
<text  x="1162.45" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (57 samples, 0.90%)</title><rect x="56.8" y="341" width="10.6" height="15.0" fill="rgb(245,10,49)" rx="2" ry="2" />
<text  x="59.76" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_write (6 samples, 0.09%)</title><rect x="1157.8" y="181" width="1.1" height="15.0" fill="rgb(250,77,45)" rx="2" ry="2" />
<text  x="1160.77" y="191.5" ></text>
</g>
<g >
<title>alloc::string::String::from_utf8_unchecked (21 samples, 0.33%)</title><rect x="123.3" y="373" width="3.9" height="15.0" fill="rgb(240,44,0)" rx="2" ry="2" />
<text  x="126.27" y="383.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(248,50,46)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.13%)</title><rect x="948.2" y="149" width="1.5" height="15.0" fill="rgb(232,24,52)" rx="2" ry="2" />
<text  x="951.19" y="159.5" ></text>
</g>
<g >
<title>__rust_alloc (4 samples, 0.06%)</title><rect x="1020.7" y="261" width="0.7" height="15.0" fill="rgb(225,95,19)" rx="2" ry="2" />
<text  x="1023.66" y="271.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="966.8" y="165" width="0.2" height="15.0" fill="rgb(209,63,46)" rx="2" ry="2" />
<text  x="969.82" y="175.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.05%)</title><rect x="92.2" y="261" width="0.5" height="15.0" fill="rgb(253,218,2)" rx="2" ry="2" />
<text  x="95.16" y="271.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (28 samples, 0.44%)</title><rect x="346.5" y="53" width="5.2" height="15.0" fill="rgb(234,119,35)" rx="2" ry="2" />
<text  x="349.45" y="63.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::hd07e92f417a33e16 (121 samples, 1.91%)</title><rect x="976.5" y="181" width="22.5" height="15.0" fill="rgb(238,151,17)" rx="2" ry="2" />
<text  x="979.50" y="191.5" >c..</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.06%)</title><rect x="1174.5" y="341" width="0.8" height="15.0" fill="rgb(239,170,42)" rx="2" ry="2" />
<text  x="1177.54" y="351.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.02%)</title><rect x="1159.3" y="261" width="0.1" height="15.0" fill="rgb(254,140,20)" rx="2" ry="2" />
<text  x="1162.26" y="271.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (118 samples, 1.86%)</title><rect x="521.6" y="181" width="22.0" height="15.0" fill="rgb(210,130,33)" rx="2" ry="2" />
<text  x="524.57" y="191.5" >c..</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.14%)</title><rect x="1128.3" y="373" width="1.7" height="15.0" fill="rgb(232,34,18)" rx="2" ry="2" />
<text  x="1131.34" y="383.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="153.8" y="325" width="0.2" height="15.0" fill="rgb(215,5,47)" rx="2" ry="2" />
<text  x="156.82" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(206,163,50)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::find_at (738 samples, 11.65%)</title><rect x="818.0" y="197" width="137.5" height="15.0" fill="rgb(240,164,44)" rx="2" ry="2" />
<text  x="820.97" y="207.5" >&lt;regex::exec::Exe..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="37.2" y="405" width="0.6" height="15.0" fill="rgb(242,152,23)" rx="2" ry="2" />
<text  x="40.20" y="415.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (900 samples, 14.21%)</title><rect x="588.8" y="309" width="167.7" height="15.0" fill="rgb(245,19,13)" rx="2" ry="2" />
<text  x="591.82" y="319.5" >alloc::vec::Vec&lt;T&gt;::r..</text>
</g>
<g >
<title>&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next (958 samples, 15.12%)</title><rect x="780.0" y="229" width="178.4" height="15.0" fill="rgb(231,32,9)" rx="2" ry="2" />
<text  x="782.96" y="239.5" >&lt;regex::re_unicode::Mat..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.14%)</title><rect x="26.8" y="309" width="1.6" height="15.0" fill="rgb(239,210,21)" rx="2" ry="2" />
<text  x="29.77" y="319.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find::_$u7b$$u7b$closure$u7d$$u7d$::hdb1676866af22238 (95 samples, 1.50%)</title><rect x="866.8" y="117" width="17.7" height="15.0" fill="rgb(240,48,53)" rx="2" ry="2" />
<text  x="869.78" y="127.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.05%)</title><rect x="1182.4" y="357" width="0.5" height="15.0" fill="rgb(254,49,49)" rx="2" ry="2" />
<text  x="1185.36" y="367.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (3 samples, 0.05%)</title><rect x="754.3" y="261" width="0.5" height="15.0" fill="rgb(209,160,7)" rx="2" ry="2" />
<text  x="757.25" y="271.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="67.2" y="293" width="0.2" height="15.0" fill="rgb(243,203,20)" rx="2" ry="2" />
<text  x="70.19" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1159.1" y="181" width="0.2" height="15.0" fill="rgb(230,128,6)" rx="2" ry="2" />
<text  x="1162.07" y="191.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (25 samples, 0.39%)</title><rect x="516.9" y="181" width="4.7" height="15.0" fill="rgb(248,40,13)" rx="2" ry="2" />
<text  x="519.91" y="191.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.39%)</title><rect x="49.5" y="357" width="4.7" height="15.0" fill="rgb(231,168,53)" rx="2" ry="2" />
<text  x="52.49" y="367.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (352 samples, 5.56%)</title><rect x="1037.2" y="373" width="65.6" height="15.0" fill="rgb(230,29,29)" rx="2" ry="2" />
<text  x="1040.24" y="383.5" >alloc::..</text>
</g>
<g >
<title>std::io::read_until (35 samples, 0.55%)</title><rect x="24.5" y="357" width="6.6" height="15.0" fill="rgb(250,130,27)" rx="2" ry="2" />
<text  x="27.53" y="367.5" ></text>
</g>
<g >
<title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (11 samples, 0.17%)</title><rect x="146.4" y="357" width="2.0" height="15.0" fill="rgb(217,16,43)" rx="2" ry="2" />
<text  x="149.37" y="367.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (4 samples, 0.06%)</title><rect x="588.1" y="181" width="0.7" height="15.0" fill="rgb(208,20,34)" rx="2" ry="2" />
<text  x="591.08" y="191.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match::imp (19 samples, 0.30%)</title><rect x="507.4" y="117" width="3.6" height="15.0" fill="rgb(230,161,44)" rx="2" ry="2" />
<text  x="510.41" y="127.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (6,186 samples, 97.66%)</title><rect x="31.1" y="421" width="1152.4" height="15.0" fill="rgb(208,159,12)" rx="2" ry="2" />
<text  x="34.05" y="431.5" >choose::choice::Choice::print_choice</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.05%)</title><rect x="37.2" y="373" width="0.6" height="15.0" fill="rgb(234,217,6)" rx="2" ry="2" />
<text  x="40.20" y="383.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (136 samples, 2.15%)</title><rect x="92.7" y="341" width="25.4" height="15.0" fill="rgb(235,6,44)" rx="2" ry="2" />
<text  x="95.72" y="351.5" >c..</text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (6 samples, 0.09%)</title><rect x="1157.8" y="245" width="1.1" height="15.0" fill="rgb(236,27,7)" rx="2" ry="2" />
<text  x="1160.77" y="255.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (2 samples, 0.03%)</title><rect x="1158.9" y="261" width="0.4" height="15.0" fill="rgb(207,194,26)" rx="2" ry="2" />
<text  x="1161.89" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (102 samples, 1.61%)</title><rect x="68.5" y="309" width="19.0" height="15.0" fill="rgb(211,54,38)" rx="2" ry="2" />
<text  x="71.50" y="319.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (850 samples, 13.42%)</title><rect x="594.6" y="245" width="158.3" height="15.0" fill="rgb(242,100,42)" rx="2" ry="2" />
<text  x="597.60" y="255.5" >alloc::alloc::realloc</text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (13 samples, 0.21%)</title><rect x="1187.6" y="389" width="2.4" height="15.0" fill="rgb(245,118,14)" rx="2" ry="2" />
<text  x="1190.58" y="399.5" ></text>
</g>
<g >
<title>core::alloc::Layout::repeat (9 samples, 0.14%)</title><rect x="754.8" y="245" width="1.7" height="15.0" fill="rgb(205,154,50)" rx="2" ry="2" />
<text  x="757.81" y="255.5" ></text>
</g>
<g >
<title>regex::re_trait::Matches&lt;R&gt;::text (11 samples, 0.17%)</title><rect x="967.0" y="229" width="2.1" height="15.0" fill="rgb(232,34,3)" rx="2" ry="2" />
<text  x="970.00" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_free (54 samples, 0.85%)</title><rect x="1038.5" y="325" width="10.1" height="15.0" fill="rgb(245,118,18)" rx="2" ry="2" />
<text  x="1041.54" y="335.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.13%)</title><rect x="859.9" y="117" width="1.5" height="15.0" fill="rgb(214,14,2)" rx="2" ry="2" />
<text  x="862.88" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="1171.6" y="277" width="0.1" height="15.0" fill="rgb(229,228,50)" rx="2" ry="2" />
<text  x="1174.56" y="287.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (52 samples, 0.82%)</title><rect x="532.6" y="149" width="9.6" height="15.0" fill="rgb(223,169,28)" rx="2" ry="2" />
<text  x="535.56" y="159.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (107 samples, 1.69%)</title><rect x="67.6" y="325" width="19.9" height="15.0" fill="rgb(233,106,36)" rx="2" ry="2" />
<text  x="70.57" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (850 samples, 13.42%)</title><rect x="594.6" y="261" width="158.3" height="15.0" fill="rgb(254,192,29)" rx="2" ry="2" />
<text  x="597.60" y="271.5" >&lt;alloc::alloc::Globa..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="1158.9" y="213" width="0.2" height="15.0" fill="rgb(205,5,14)" rx="2" ry="2" />
<text  x="1161.89" y="223.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="1182.9" y="389" width="0.6" height="15.0" fill="rgb(218,204,4)" rx="2" ry="2" />
<text  x="1185.92" y="399.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (243 samples, 3.84%)</title><rect x="1130.0" y="373" width="45.3" height="15.0" fill="rgb(221,205,52)" rx="2" ry="2" />
<text  x="1133.01" y="383.5" >&lt;std..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (70 samples, 1.11%)</title><rect x="1160.6" y="309" width="13.0" height="15.0" fill="rgb(214,96,33)" rx="2" ry="2" />
<text  x="1163.57" y="319.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (6 samples, 0.09%)</title><rect x="1157.8" y="229" width="1.1" height="15.0" fill="rgb(232,149,54)" rx="2" ry="2" />
<text  x="1160.77" y="239.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (45 samples, 0.71%)</title><rect x="958.4" y="213" width="8.4" height="15.0" fill="rgb(249,123,7)" rx="2" ry="2" />
<text  x="961.43" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.27%)</title><rect x="57.3" y="309" width="3.2" height="15.0" fill="rgb(229,116,28)" rx="2" ry="2" />
<text  x="60.32" y="319.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="845.0" y="165" width="0.7" height="15.0" fill="rgb(235,191,3)" rx="2" ry="2" />
<text  x="847.98" y="175.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (102 samples, 1.61%)</title><rect x="68.5" y="293" width="19.0" height="15.0" fill="rgb(218,24,19)" rx="2" ry="2" />
<text  x="71.50" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(209,20,14)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::hd8f73404ae06bb1a (121 samples, 1.91%)</title><rect x="976.5" y="213" width="22.5" height="15.0" fill="rgb(222,107,28)" rx="2" ry="2" />
<text  x="979.50" y="223.5" >c..</text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::h3102dd7a0279214e (156 samples, 2.46%)</title><rect x="970.7" y="245" width="29.1" height="15.0" fill="rgb(211,115,33)" rx="2" ry="2" />
<text  x="973.73" y="255.5" >co..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(205,118,41)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (28 samples, 0.44%)</title><rect x="346.5" y="69" width="5.2" height="15.0" fill="rgb(234,41,40)" rx="2" ry="2" />
<text  x="349.45" y="79.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (71 samples, 1.12%)</title><rect x="646.9" y="197" width="13.3" height="15.0" fill="rgb(240,125,44)" rx="2" ry="2" />
<text  x="649.95" y="207.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.03%)</title><rect x="966.4" y="149" width="0.4" height="15.0" fill="rgb(218,186,46)" rx="2" ry="2" />
<text  x="969.44" y="159.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (6 samples, 0.09%)</title><rect x="1157.8" y="261" width="1.1" height="15.0" fill="rgb(232,88,1)" rx="2" ry="2" />
<text  x="1160.77" y="271.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals::_$u7b$$u7b$closure$u7d$$u7d$::hb03de0d58239394b (65 samples, 1.03%)</title><rect x="847.8" y="133" width="12.1" height="15.0" fill="rgb(223,193,27)" rx="2" ry="2" />
<text  x="850.77" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (86 samples, 1.36%)</title><rect x="1002.8" y="261" width="16.0" height="15.0" fill="rgb(208,23,11)" rx="2" ry="2" />
<text  x="1005.77" y="271.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (23 samples, 0.36%)</title><rect x="88.4" y="325" width="4.3" height="15.0" fill="rgb(207,119,31)" rx="2" ry="2" />
<text  x="91.43" y="335.5" ></text>
</g>
<g >
<title>_start (6,333 samples, 99.98%)</title><rect x="10.2" y="597" width="1179.8" height="15.0" fill="rgb(230,212,31)" rx="2" ry="2" />
<text  x="13.19" y="607.5" >_start</text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.79%)</title><rect x="401.2" y="85" width="9.3" height="15.0" fill="rgb(207,101,47)" rx="2" ry="2" />
<text  x="404.22" y="95.5" ></text>
</g>
<g >
<title>core::alloc::Layout::array (9 samples, 0.14%)</title><rect x="754.8" y="261" width="1.7" height="15.0" fill="rgb(252,114,20)" rx="2" ry="2" />
<text  x="757.81" y="271.5" ></text>
</g>
<g >
<title>std::io::BufRead::read_line (73 samples, 1.15%)</title><rect x="17.5" y="405" width="13.6" height="15.0" fill="rgb(208,28,46)" rx="2" ry="2" />
<text  x="20.45" y="415.5" ></text>
</g>
<g >
<title>__rdl_alloc (10 samples, 0.16%)</title><rect x="84.7" y="277" width="1.9" height="15.0" fill="rgb(236,175,54)" rx="2" ry="2" />
<text  x="87.70" y="287.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::find (326 samples, 5.15%)</title><rect x="884.5" y="133" width="60.7" height="15.0" fill="rgb(234,223,11)" rx="2" ry="2" />
<text  x="887.47" y="143.5" >regex:..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (8 samples, 0.13%)</title><rect x="763.4" y="261" width="1.5" height="15.0" fill="rgb(227,73,3)" rx="2" ry="2" />
<text  x="766.38" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="646.4" y="197" width="0.5" height="15.0" fill="rgb(212,225,14)" rx="2" ry="2" />
<text  x="649.39" y="207.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.30%)</title><rect x="321.3" y="117" width="3.5" height="15.0" fill="rgb(225,123,39)" rx="2" ry="2" />
<text  x="324.30" y="127.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals (534 samples, 8.43%)</title><rect x="845.7" y="165" width="99.5" height="15.0" fill="rgb(222,217,34)" rx="2" ry="2" />
<text  x="848.72" y="175.5" >regex::exec:..</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="1187.2" y="389" width="0.4" height="15.0" fill="rgb(218,70,20)" rx="2" ry="2" />
<text  x="1190.21" y="399.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals (956 samples, 15.09%)</title><rect x="321.3" y="133" width="178.1" height="15.0" fill="rgb(239,47,19)" rx="2" ry="2" />
<text  x="324.30" y="143.5" >regex::exec::ExecNoSync..</text>
</g>
<g >
<title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="137.2" y="389" width="0.2" height="15.0" fill="rgb(229,189,18)" rx="2" ry="2" />
<text  x="140.24" y="399.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.08%)</title><rect x="118.4" y="325" width="1.0" height="15.0" fill="rgb(210,27,54)" rx="2" ry="2" />
<text  x="121.42" y="335.5" ></text>
</g>
<g >
<title>_int_malloc (344 samples, 5.43%)</title><rect x="680.3" y="197" width="64.1" height="15.0" fill="rgb(238,9,6)" rx="2" ry="2" />
<text  x="683.29" y="207.5" >_int_ma..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (3 samples, 0.05%)</title><rect x="762.8" y="309" width="0.6" height="15.0" fill="rgb(205,51,15)" rx="2" ry="2" />
<text  x="765.82" y="319.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::hc185cff452e4284f (8 samples, 0.13%)</title><rect x="969.1" y="229" width="1.4" height="15.0" fill="rgb(232,137,42)" rx="2" ry="2" />
<text  x="972.05" y="239.5" ></text>
</g>
<g >
<title>core::cmp::max (5 samples, 0.08%)</title><rect x="752.9" y="245" width="1.0" height="15.0" fill="rgb(205,150,37)" rx="2" ry="2" />
<text  x="755.95" y="255.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (2,060 samples, 32.52%)</title><rect x="164.3" y="213" width="383.7" height="15.0" fill="rgb(252,54,26)" rx="2" ry="2" />
<text  x="167.25" y="223.5" >&lt;regex::re_unicode::Split as core::iter::traits::ite..</text>
</g>
<g >
<title>std::io::Write::write_fmt (433 samples, 6.84%)</title><rect x="1102.8" y="405" width="80.7" height="15.0" fill="rgb(234,160,44)" rx="2" ry="2" />
<text  x="1105.81" y="415.5" >std::io::..</text>
</g>
<g >
<title>&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (14 samples, 0.22%)</title><rect x="46.3" y="357" width="2.6" height="15.0" fill="rgb(242,20,21)" rx="2" ry="2" />
<text  x="49.33" y="367.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::h9a75940b9359d2b5 (205 samples, 3.24%)</title><rect x="549.9" y="197" width="38.2" height="15.0" fill="rgb(249,137,53)" rx="2" ry="2" />
<text  x="552.89" y="207.5" >_$L..</text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h0f3ac708041708be (4 samples, 0.06%)</title><rect x="588.1" y="197" width="0.7" height="15.0" fill="rgb(219,155,43)" rx="2" ry="2" />
<text  x="591.08" y="207.5" ></text>
</g>
<g >
<title>__rdl_realloc (33 samples, 0.52%)</title><rect x="744.8" y="229" width="6.1" height="15.0" fill="rgb(207,169,12)" rx="2" ry="2" />
<text  x="747.75" y="239.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (189 samples, 2.98%)</title><rect x="1140.1" y="357" width="35.2" height="15.0" fill="rgb(230,171,49)" rx="2" ry="2" />
<text  x="1143.07" y="367.5" >st..</text>
</g>
<g >
<title>alloc::str::join_generic_copy::_$u7b$$u7b$closure$u7d$$u7d$::h382342aa8276256f (23 samples, 0.36%)</title><rect x="88.4" y="341" width="4.3" height="15.0" fill="rgb(225,103,47)" rx="2" ry="2" />
<text  x="91.43" y="351.5" ></text>
</g>
<g >
<title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (4 samples, 0.06%)</title><rect x="16.7" y="389" width="0.8" height="15.0" fill="rgb(215,219,51)" rx="2" ry="2" />
<text  x="19.71" y="399.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::h3bbbe95106a5d30f (8 samples, 0.13%)</title><rect x="548.2" y="181" width="1.5" height="15.0" fill="rgb(206,204,4)" rx="2" ry="2" />
<text  x="551.21" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="1127.8" y="357" width="0.5" height="15.0" fill="rgb(249,45,30)" rx="2" ry="2" />
<text  x="1130.78" y="367.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (8 samples, 0.13%)</title><rect x="1188.5" y="357" width="1.5" height="15.0" fill="rgb(239,157,19)" rx="2" ry="2" />
<text  x="1191.51" y="367.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (7 samples, 0.11%)</title><rect x="118.1" y="341" width="1.3" height="15.0" fill="rgb(243,83,32)" rx="2" ry="2" />
<text  x="121.05" y="351.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (29 samples, 0.46%)</title><rect x="971.1" y="213" width="5.4" height="15.0" fill="rgb(220,191,0)" rx="2" ry="2" />
<text  x="974.10" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (886 samples, 13.99%)</title><rect x="591.4" y="277" width="165.1" height="15.0" fill="rgb(244,118,53)" rx="2" ry="2" />
<text  x="594.43" y="287.5" >alloc::raw_vec::RawVe..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (4,744 samples, 74.90%)</title><rect x="138.2" y="389" width="883.8" height="15.0" fill="rgb(224,123,15)" rx="2" ry="2" />
<text  x="141.17" y="399.5" >core::iter::traits::iterator::Iterator::collect</text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="1159.3" y="245" width="0.1" height="15.0" fill="rgb(209,227,24)" rx="2" ry="2" />
<text  x="1162.26" y="255.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.17%)</title><rect x="845.7" y="149" width="2.1" height="15.0" fill="rgb(238,228,9)" rx="2" ry="2" />
<text  x="848.72" y="159.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="966.8" y="181" width="0.2" height="15.0" fill="rgb(207,2,20)" rx="2" ry="2" />
<text  x="969.82" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (18 samples, 0.28%)</title><rect x="158.5" y="229" width="3.3" height="15.0" fill="rgb(210,69,22)" rx="2" ry="2" />
<text  x="161.48" y="239.5" ></text>
</g>
<g >
<title>__rust_maybe_catch_panic (6,333 samples, 99.98%)</title><rect x="10.2" y="501" width="1179.8" height="15.0" fill="rgb(205,152,28)" rx="2" ry="2" />
<text  x="13.19" y="511.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (9 samples, 0.14%)</title><rect x="26.8" y="277" width="1.6" height="15.0" fill="rgb(208,3,37)" rx="2" ry="2" />
<text  x="29.77" y="287.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.13%)</title><rect x="859.9" y="133" width="1.5" height="15.0" fill="rgb(243,195,51)" rx="2" ry="2" />
<text  x="862.88" y="143.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.05%)</title><rect x="92.2" y="245" width="0.5" height="15.0" fill="rgb(205,42,33)" rx="2" ry="2" />
<text  x="95.16" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,744 samples, 74.90%)</title><rect x="138.2" y="373" width="883.8" height="15.0" fill="rgb(238,106,12)" rx="2" ry="2" />
<text  x="141.17" y="383.5" >&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (17 samples, 0.27%)</title><rect x="1168.4" y="277" width="3.2" height="15.0" fill="rgb(248,173,40)" rx="2" ry="2" />
<text  x="1171.39" y="287.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.02%)</title><rect x="28.3" y="229" width="0.1" height="15.0" fill="rgb(214,199,34)" rx="2" ry="2" />
<text  x="31.26" y="239.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.05%)</title><rect x="1182.4" y="373" width="0.5" height="15.0" fill="rgb(224,218,49)" rx="2" ry="2" />
<text  x="1185.36" y="383.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (65 samples, 1.03%)</title><rect x="847.8" y="149" width="12.1" height="15.0" fill="rgb(225,32,30)" rx="2" ry="2" />
<text  x="850.77" y="159.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="19.5" y="373" width="0.4" height="15.0" fill="rgb(215,36,40)" rx="2" ry="2" />
<text  x="22.50" y="383.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match::imp (10 samples, 0.16%)</title><rect x="950.4" y="149" width="1.9" height="15.0" fill="rgb(212,198,4)" rx="2" ry="2" />
<text  x="953.42" y="159.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.08%)</title><rect x="118.4" y="309" width="1.0" height="15.0" fill="rgb(227,11,9)" rx="2" ry="2" />
<text  x="121.42" y="319.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.44%)</title><rect x="346.5" y="117" width="5.2" height="15.0" fill="rgb(229,63,50)" rx="2" ry="2" />
<text  x="349.45" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_free (4 samples, 0.06%)</title><rect x="1184.0" y="341" width="0.8" height="15.0" fill="rgb(213,73,23)" rx="2" ry="2" />
<text  x="1187.04" y="351.5" ></text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or_try (17 samples, 0.27%)</title><rect x="1028.7" y="293" width="3.1" height="15.0" fill="rgb(213,53,23)" rx="2" ry="2" />
<text  x="1031.67" y="303.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="949.7" y="149" width="0.7" height="15.0" fill="rgb(211,126,31)" rx="2" ry="2" />
<text  x="952.68" y="159.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (25 samples, 0.39%)</title><rect x="1155.2" y="309" width="4.6" height="15.0" fill="rgb(240,7,12)" rx="2" ry="2" />
<text  x="1158.16" y="319.5" ></text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.19%)</title><rect x="1184.0" y="405" width="2.3" height="15.0" fill="rgb(219,105,21)" rx="2" ry="2" />
<text  x="1187.04" y="415.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.03%)</title><rect x="753.9" y="229" width="0.4" height="15.0" fill="rgb(242,204,41)" rx="2" ry="2" />
<text  x="756.88" y="239.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals::_$u7b$$u7b$closure$u7d$$u7d$::hb03de0d58239394b (116 samples, 1.83%)</title><rect x="324.8" y="101" width="21.7" height="15.0" fill="rgb(216,196,41)" rx="2" ry="2" />
<text  x="327.84" y="111.5" >r..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (2,292 samples, 36.19%)</title><rect x="161.8" y="229" width="427.0" height="15.0" fill="rgb(220,77,36)" rx="2" ry="2" />
<text  x="164.83" y="239.5" >core::iter::traits::iterator::Iterator::try_fold</text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.05%)</title><rect x="762.8" y="293" width="0.6" height="15.0" fill="rgb(218,34,19)" rx="2" ry="2" />
<text  x="765.82" y="303.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.03%)</title><rect x="966.4" y="165" width="0.4" height="15.0" fill="rgb(218,198,31)" rx="2" ry="2" />
<text  x="969.44" y="175.5" ></text>
</g>
<g >
<title>choose::choice::Choice::is_reverse_range (24 samples, 0.38%)</title><rect x="994.6" y="165" width="4.4" height="15.0" fill="rgb(232,14,29)" rx="2" ry="2" />
<text  x="997.58" y="175.5" ></text>
</g>
<g >
<title>alloc::str::join_generic_copy (423 samples, 6.68%)</title><rect x="44.5" y="373" width="78.8" height="15.0" fill="rgb(242,131,20)" rx="2" ry="2" />
<text  x="47.46" y="383.5" >alloc::st..</text>
</g>
<g >
<title>core::ops::function::FnMut::call_mut (3 samples, 0.05%)</title><rect x="92.2" y="277" width="0.5" height="15.0" fill="rgb(209,179,14)" rx="2" ry="2" />
<text  x="95.16" y="287.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.03%)</title><rect x="1029.0" y="277" width="0.4" height="15.0" fill="rgb(240,122,3)" rx="2" ry="2" />
<text  x="1032.04" y="287.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.0" y="597" width="0.2" height="15.0" fill="rgb(242,35,27)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h0f3ac708041708be (1 samples, 0.02%)</title><rect x="549.7" y="197" width="0.2" height="15.0" fill="rgb(224,227,18)" rx="2" ry="2" />
<text  x="552.70" y="207.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (136 samples, 2.15%)</title><rect x="92.7" y="357" width="25.4" height="15.0" fill="rgb(244,17,0)" rx="2" ry="2" />
<text  x="95.72" y="367.5" >c..</text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.27%)</title><rect x="952.3" y="181" width="3.2" height="15.0" fill="rgb(234,30,47)" rx="2" ry="2" />
<text  x="955.29" y="191.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,310 samples, 36.47%)</title><rect x="158.5" y="309" width="430.3" height="15.0" fill="rgb(241,15,32)" rx="2" ry="2" />
<text  x="161.48" y="319.5" >&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::ite..</text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h0f3ac708041708be (1 samples, 0.02%)</title><rect x="970.5" y="229" width="0.2" height="15.0" fill="rgb(224,92,5)" rx="2" ry="2" />
<text  x="973.54" y="239.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.14%)</title><rect x="1128.3" y="357" width="1.7" height="15.0" fill="rgb(209,162,7)" rx="2" ry="2" />
<text  x="1131.34" y="367.5" ></text>
</g>
<g >
<title>core::cmp::max_by (3 samples, 0.05%)</title><rect x="753.3" y="213" width="0.6" height="15.0" fill="rgb(217,200,43)" rx="2" ry="2" />
<text  x="756.32" y="223.5" ></text>
</g>
<g >
<title>std::io::append_to_string (73 samples, 1.15%)</title><rect x="17.5" y="389" width="13.6" height="15.0" fill="rgb(228,205,47)" rx="2" ry="2" />
<text  x="20.45" y="399.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (84 samples, 1.33%)</title><rect x="460.3" y="53" width="15.6" height="15.0" fill="rgb(219,68,40)" rx="2" ry="2" />
<text  x="463.28" y="63.5" ></text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (356 samples, 5.62%)</title><rect x="1036.5" y="389" width="66.3" height="15.0" fill="rgb(218,106,14)" rx="2" ry="2" />
<text  x="1039.49" y="399.5" >&lt;alloc:..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (114 samples, 1.80%)</title><rect x="1000.2" y="309" width="21.2" height="15.0" fill="rgb(224,221,28)" rx="2" ry="2" />
<text  x="1003.16" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.06%)</title><rect x="26.0" y="309" width="0.8" height="15.0" fill="rgb(207,28,33)" rx="2" ry="2" />
<text  x="29.02" y="319.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (95 samples, 1.50%)</title><rect x="866.8" y="133" width="17.7" height="15.0" fill="rgb(228,15,46)" rx="2" ry="2" />
<text  x="869.78" y="143.5" ></text>
</g>
<g >
<title>_int_realloc (677 samples, 10.69%)</title><rect x="618.6" y="213" width="126.2" height="15.0" fill="rgb(212,89,26)" rx="2" ry="2" />
<text  x="621.63" y="223.5" >_int_realloc</text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.05%)</title><rect x="1171.0" y="229" width="0.6" height="15.0" fill="rgb(217,79,8)" rx="2" ry="2" />
<text  x="1174.00" y="239.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="25.3" y="325" width="0.2" height="15.0" fill="rgb(253,215,4)" rx="2" ry="2" />
<text  x="28.28" y="335.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (900 samples, 14.21%)</title><rect x="588.8" y="293" width="167.7" height="15.0" fill="rgb(219,156,39)" rx="2" ry="2" />
<text  x="591.82" y="303.5" >alloc::raw_vec::RawVe..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="966.8" y="149" width="0.2" height="15.0" fill="rgb(253,149,12)" rx="2" ry="2" />
<text  x="969.82" y="159.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find::check::_$u7b$$u7b$closure$u7d$$u7d$::hd8f73404ae06bb1a (187 samples, 2.95%)</title><rect x="553.2" y="181" width="34.9" height="15.0" fill="rgb(234,204,3)" rx="2" ry="2" />
<text  x="556.24" y="191.5" >co..</text>
</g>
<g >
<title>_int_free (108 samples, 1.71%)</title><rect x="660.2" y="197" width="20.1" height="15.0" fill="rgb(240,111,9)" rx="2" ry="2" />
<text  x="663.17" y="207.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (14 samples, 0.22%)</title><rect x="1155.2" y="229" width="2.6" height="15.0" fill="rgb(235,163,25)" rx="2" ry="2" />
<text  x="1158.16" y="239.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (6 samples, 0.09%)</title><rect x="1157.8" y="213" width="1.1" height="15.0" fill="rgb(215,165,50)" rx="2" ry="2" />
<text  x="1160.77" y="223.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,310 samples, 36.47%)</title><rect x="158.5" y="261" width="430.3" height="15.0" fill="rgb(251,220,7)" rx="2" ry="2" />
<text  x="161.48" y="271.5" >&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits:..</text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (12 samples, 0.19%)</title><rect x="1184.0" y="373" width="2.3" height="15.0" fill="rgb(232,43,1)" rx="2" ry="2" />
<text  x="1187.04" y="383.5" ></text>
</g>
<g >
<title>__rust_dealloc (6 samples, 0.09%)</title><rect x="1049.5" y="325" width="1.2" height="15.0" fill="rgb(236,226,0)" rx="2" ry="2" />
<text  x="1052.53" y="335.5" ></text>
</g>
<g >
<title>core::iter::adapters::map_fold::_$u7b$$u7b$closure$u7d$$u7d$::h731d1c04050efa7b (1 samples, 0.02%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(224,154,34)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (364 samples, 5.75%)</title><rect x="1035.0" y="405" width="67.8" height="15.0" fill="rgb(236,68,22)" rx="2" ry="2" />
<text  x="1038.00" y="415.5" >core::p..</text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.05%)</title><rect x="25.5" y="309" width="0.5" height="15.0" fill="rgb(241,182,50)" rx="2" ry="2" />
<text  x="28.46" y="319.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (6,333 samples, 99.98%)</title><rect x="10.2" y="485" width="1179.8" height="15.0" fill="rgb(252,185,34)" rx="2" ry="2" />
<text  x="13.19" y="495.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="1158.9" y="229" width="0.4" height="15.0" fill="rgb(206,57,31)" rx="2" ry="2" />
<text  x="1161.89" y="239.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1 samples, 0.02%)</title><rect x="966.8" y="197" width="0.2" height="15.0" fill="rgb(233,121,30)" rx="2" ry="2" />
<text  x="969.82" y="207.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.03%)</title><rect x="17.1" y="341" width="0.4" height="15.0" fill="rgb(221,153,7)" rx="2" ry="2" />
<text  x="20.08" y="351.5" ></text>
</g>
<g >
<title>malloc_consolidate (139 samples, 2.19%)</title><rect x="1076.9" y="309" width="25.9" height="15.0" fill="rgb(245,53,52)" rx="2" ry="2" />
<text  x="1079.92" y="319.5" >m..</text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h7b3fcdb7612c0284 (8 samples, 0.13%)</title><rect x="548.2" y="149" width="1.5" height="15.0" fill="rgb(220,86,10)" rx="2" ry="2" />
<text  x="551.21" y="159.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.13%)</title><rect x="859.9" y="85" width="1.5" height="15.0" fill="rgb(217,145,38)" rx="2" ry="2" />
<text  x="862.88" y="95.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (2 samples, 0.03%)</title><rect x="1031.5" y="245" width="0.3" height="15.0" fill="rgb(247,143,19)" rx="2" ry="2" />
<text  x="1034.46" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (25 samples, 0.39%)</title><rect x="1155.2" y="293" width="4.6" height="15.0" fill="rgb(212,1,38)" rx="2" ry="2" />
<text  x="1158.16" y="303.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.05%)</title><rect x="762.8" y="277" width="0.6" height="15.0" fill="rgb(229,114,43)" rx="2" ry="2" />
<text  x="765.82" y="287.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,269 samples, 20.03%)</title><rect x="763.4" y="277" width="236.4" height="15.0" fill="rgb(232,123,21)" rx="2" ry="2" />
<text  x="766.38" y="287.5" >&lt;core::iter::adapters::Filter&lt;I..</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (74 samples, 1.17%)</title><rect x="1159.8" y="325" width="13.8" height="15.0" fill="rgb(247,218,4)" rx="2" ry="2" />
<text  x="1162.82" y="335.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.05%)</title><rect x="762.8" y="261" width="0.6" height="15.0" fill="rgb(212,219,49)" rx="2" ry="2" />
<text  x="765.82" y="271.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (6,333 samples, 99.98%)</title><rect x="10.2" y="549" width="1179.8" height="15.0" fill="rgb(237,200,4)" rx="2" ry="2" />
<text  x="13.19" y="559.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>choose::choice::Choice::is_reverse_range (67 samples, 1.06%)</title><rect x="575.6" y="133" width="12.5" height="15.0" fill="rgb(223,131,49)" rx="2" ry="2" />
<text  x="578.60" y="143.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="533" width="0.2" height="15.0" fill="rgb(237,32,19)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find (1,269 samples, 20.03%)</title><rect x="763.4" y="309" width="236.4" height="15.0" fill="rgb(242,42,22)" rx="2" ry="2" />
<text  x="766.38" y="319.5" >core::iter::traits::iterator::I..</text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="67.2" y="277" width="0.2" height="15.0" fill="rgb(220,47,48)" rx="2" ry="2" />
<text  x="70.19" y="287.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memchr (13 samples, 0.21%)</title><rect x="28.6" y="325" width="2.5" height="15.0" fill="rgb(216,185,8)" rx="2" ry="2" />
<text  x="31.63" y="335.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="67.2" y="325" width="0.2" height="15.0" fill="rgb(229,119,20)" rx="2" ry="2" />
<text  x="70.19" y="335.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc (352 samples, 5.56%)</title><rect x="1037.2" y="341" width="65.6" height="15.0" fill="rgb(254,80,2)" rx="2" ry="2" />
<text  x="1040.24" y="351.5" >alloc::..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (187 samples, 2.95%)</title><rect x="553.2" y="165" width="34.9" height="15.0" fill="rgb(214,49,48)" rx="2" ry="2" />
<text  x="556.24" y="175.5" >co..</text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(209,161,11)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (10 samples, 0.16%)</title><rect x="1171.7" y="277" width="1.9" height="15.0" fill="rgb(236,211,2)" rx="2" ry="2" />
<text  x="1174.74" y="287.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice (4,856 samples, 76.67%)</title><rect x="127.2" y="405" width="904.6" height="15.0" fill="rgb(207,35,24)" rx="2" ry="2" />
<text  x="130.18" y="415.5" >choose::choice::Choice::get_choice_slice</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="752.9" y="213" width="0.4" height="15.0" fill="rgb(236,55,19)" rx="2" ry="2" />
<text  x="755.95" y="223.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next (1,778 samples, 28.07%)</title><rect x="190.3" y="197" width="331.3" height="15.0" fill="rgb(251,193,53)" rx="2" ry="2" />
<text  x="193.33" y="207.5" >&lt;regex::re_unicode::Matches as core::iter::t..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="28.4" y="309" width="0.2" height="15.0" fill="rgb(230,225,14)" rx="2" ry="2" />
<text  x="31.44" y="319.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.06%)</title><rect x="1174.5" y="309" width="0.8" height="15.0" fill="rgb(244,122,47)" rx="2" ry="2" />
<text  x="1177.54" y="319.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.02%)</title><rect x="548.0" y="181" width="0.2" height="15.0" fill="rgb(236,20,0)" rx="2" ry="2" />
<text  x="551.02" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (23 samples, 0.36%)</title><rect x="88.4" y="309" width="4.3" height="15.0" fill="rgb(239,217,5)" rx="2" ry="2" />
<text  x="91.43" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="1189.1" y="293" width="0.5" height="15.0" fill="rgb(235,177,25)" rx="2" ry="2" />
<text  x="1192.07" y="303.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 1.37%)</title><rect x="929.0" y="101" width="16.2" height="15.0" fill="rgb(240,157,20)" rx="2" ry="2" />
<text  x="932.00" y="111.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (10 samples, 0.16%)</title><rect x="551.4" y="181" width="1.8" height="15.0" fill="rgb(229,170,7)" rx="2" ry="2" />
<text  x="554.38" y="191.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="1174.9" y="261" width="0.4" height="15.0" fill="rgb(241,1,36)" rx="2" ry="2" />
<text  x="1177.91" y="271.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,310 samples, 36.47%)</title><rect x="158.5" y="293" width="430.3" height="15.0" fill="rgb(245,182,22)" rx="2" ry="2" />
<text  x="161.48" y="303.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="137.2" y="373" width="0.2" height="15.0" fill="rgb(252,99,12)" rx="2" ry="2" />
<text  x="140.24" y="383.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (3 samples, 0.05%)</title><rect x="1171.0" y="245" width="0.6" height="15.0" fill="rgb(205,12,35)" rx="2" ry="2" />
<text  x="1174.00" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (14 samples, 0.22%)</title><rect x="588.8" y="277" width="2.6" height="15.0" fill="rgb(236,79,32)" rx="2" ry="2" />
<text  x="591.82" y="287.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.22%)</title><rect x="26.0" y="325" width="2.6" height="15.0" fill="rgb(216,137,44)" rx="2" ry="2" />
<text  x="29.02" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (102 samples, 1.61%)</title><rect x="99.0" y="325" width="19.1" height="15.0" fill="rgb(246,23,45)" rx="2" ry="2" />
<text  x="102.05" y="335.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_mul (8 samples, 0.13%)</title><rect x="755.0" y="229" width="1.5" height="15.0" fill="rgb(235,13,23)" rx="2" ry="2" />
<text  x="758.00" y="239.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.11%)</title><rect x="1030.5" y="261" width="1.3" height="15.0" fill="rgb(239,228,5)" rx="2" ry="2" />
<text  x="1033.53" y="271.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.06%)</title><rect x="1174.5" y="325" width="0.8" height="15.0" fill="rgb(240,201,8)" rx="2" ry="2" />
<text  x="1177.54" y="335.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.03%)</title><rect x="15.0" y="389" width="0.4" height="15.0" fill="rgb(240,62,5)" rx="2" ry="2" />
<text  x="18.03" y="399.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 1.99%)</title><rect x="475.9" y="69" width="23.5" height="15.0" fill="rgb(218,193,43)" rx="2" ry="2" />
<text  x="478.93" y="79.5" >&lt;..</text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (9 samples, 0.14%)</title><rect x="26.8" y="261" width="1.6" height="15.0" fill="rgb(252,42,6)" rx="2" ry="2" />
<text  x="29.77" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.28%)</title><rect x="57.1" y="325" width="3.4" height="15.0" fill="rgb(251,132,31)" rx="2" ry="2" />
<text  x="60.13" y="335.5" ></text>
</g>
<g >
<title>std::memchr::memrchr (2 samples, 0.03%)</title><rect x="1159.4" y="277" width="0.4" height="15.0" fill="rgb(242,9,30)" rx="2" ry="2" />
<text  x="1162.45" y="287.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="19.3" y="357" width="0.2" height="15.0" fill="rgb(249,229,23)" rx="2" ry="2" />
<text  x="22.31" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (925 samples, 14.60%)</title><rect x="783.1" y="213" width="172.4" height="15.0" fill="rgb(227,18,53)" rx="2" ry="2" />
<text  x="786.13" y="223.5" >&lt;regex::re_trait::Matc..</text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::find_at (1,326 samples, 20.93%)</title><rect x="269.9" y="165" width="247.0" height="15.0" fill="rgb(211,172,28)" rx="2" ry="2" />
<text  x="272.88" y="175.5" >&lt;regex::exec::ExecNoSyncStr as r..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.11%)</title><rect x="1188.7" y="325" width="1.3" height="15.0" fill="rgb(239,210,48)" rx="2" ry="2" />
<text  x="1191.70" y="335.5" ></text>
</g>
<g >
<title>core::cmp::Ord::max (5 samples, 0.08%)</title><rect x="752.9" y="229" width="1.0" height="15.0" fill="rgb(228,176,50)" rx="2" ry="2" />
<text  x="755.95" y="239.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::split (53 samples, 0.84%)</title><rect x="1022.0" y="389" width="9.8" height="15.0" fill="rgb(247,97,14)" rx="2" ry="2" />
<text  x="1024.96" y="399.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="1029.4" y="261" width="0.2" height="15.0" fill="rgb(249,140,29)" rx="2" ry="2" />
<text  x="1032.41" y="271.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.44%)</title><rect x="346.5" y="37" width="5.2" height="15.0" fill="rgb(241,172,22)" rx="2" ry="2" />
<text  x="349.45" y="47.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.13%)</title><rect x="90.7" y="261" width="1.5" height="15.0" fill="rgb(225,176,39)" rx="2" ry="2" />
<text  x="93.67" y="271.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.05%)</title><rect x="969.2" y="213" width="0.6" height="15.0" fill="rgb(210,141,48)" rx="2" ry="2" />
<text  x="972.24" y="223.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (32 samples, 0.51%)</title><rect x="61.2" y="293" width="6.0" height="15.0" fill="rgb(218,195,16)" rx="2" ry="2" />
<text  x="64.23" y="303.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (20 samples, 0.32%)</title><rect x="1186.3" y="421" width="3.7" height="15.0" fill="rgb(227,27,47)" rx="2" ry="2" />
<text  x="1189.27" y="431.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc (12 samples, 0.19%)</title><rect x="1184.0" y="357" width="2.3" height="15.0" fill="rgb(207,73,45)" rx="2" ry="2" />
<text  x="1187.04" y="367.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="970.5" y="213" width="0.2" height="15.0" fill="rgb(253,141,43)" rx="2" ry="2" />
<text  x="973.54" y="223.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.06%)</title><rect x="1174.5" y="293" width="0.8" height="15.0" fill="rgb(228,144,16)" rx="2" ry="2" />
<text  x="1177.54" y="303.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (2 samples, 0.03%)</title><rect x="1183.5" y="421" width="0.4" height="15.0" fill="rgb(209,199,15)" rx="2" ry="2" />
<text  x="1186.48" y="431.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold::ok::_$u7b$$u7b$closure$u7d$$u7d$::hc0d830441ea8c360 (1 samples, 0.02%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(245,179,31)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.22%)</title><rect x="503.9" y="117" width="2.6" height="15.0" fill="rgb(233,208,36)" rx="2" ry="2" />
<text  x="506.87" y="127.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (17 samples, 0.27%)</title><rect x="1031.8" y="405" width="3.2" height="15.0" fill="rgb(238,105,34)" rx="2" ry="2" />
<text  x="1034.83" y="415.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.08%)</title><rect x="1030.5" y="245" width="1.0" height="15.0" fill="rgb(222,14,36)" rx="2" ry="2" />
<text  x="1033.53" y="255.5" ></text>
</g>
<g >
<title>core::str::from_utf8 (25 samples, 0.39%)</title><rect x="19.9" y="373" width="4.6" height="15.0" fill="rgb(243,106,43)" rx="2" ry="2" />
<text  x="22.87" y="383.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.51%)</title><rect x="511.0" y="149" width="5.9" height="15.0" fill="rgb(227,213,52)" rx="2" ry="2" />
<text  x="513.95" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(207,103,4)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (106 samples, 1.67%)</title><rect x="523.8" y="165" width="19.8" height="15.0" fill="rgb(218,143,14)" rx="2" ry="2" />
<text  x="526.80" y="175.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.17%)</title><rect x="319.3" y="133" width="2.0" height="15.0" fill="rgb(215,112,4)" rx="2" ry="2" />
<text  x="322.25" y="143.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (116 samples, 1.83%)</title><rect x="324.8" y="117" width="21.7" height="15.0" fill="rgb(243,90,5)" rx="2" ry="2" />
<text  x="327.84" y="127.5" >c..</text>
</g>
<g >
<title>regex::re_trait::Matches&lt;R&gt;::text (17 samples, 0.27%)</title><rect x="544.9" y="197" width="3.1" height="15.0" fill="rgb(219,49,14)" rx="2" ry="2" />
<text  x="547.86" y="207.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="10.0" y="565" width="0.2" height="15.0" fill="rgb(224,123,41)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::hd07e92f417a33e16 (187 samples, 2.95%)</title><rect x="553.2" y="149" width="34.9" height="15.0" fill="rgb(212,22,11)" rx="2" ry="2" />
<text  x="556.24" y="159.5" >ch..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.06%)</title><rect x="969.8" y="197" width="0.7" height="15.0" fill="rgb(229,229,41)" rx="2" ry="2" />
<text  x="972.80" y="207.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (4 samples, 0.06%)</title><rect x="1172.9" y="261" width="0.7" height="15.0" fill="rgb(242,5,40)" rx="2" ry="2" />
<text  x="1175.86" y="271.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (7 samples, 0.11%)</title><rect x="1188.7" y="341" width="1.3" height="15.0" fill="rgb(239,2,48)" rx="2" ry="2" />
<text  x="1191.70" y="351.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (57 samples, 0.90%)</title><rect x="918.4" y="85" width="10.6" height="15.0" fill="rgb(235,219,9)" rx="2" ry="2" />
<text  x="921.38" y="95.5" ></text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or (17 samples, 0.27%)</title><rect x="1028.7" y="309" width="3.1" height="15.0" fill="rgb(207,63,9)" rx="2" ry="2" />
<text  x="1031.67" y="319.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (14 samples, 0.22%)</title><rect x="1155.2" y="213" width="2.6" height="15.0" fill="rgb(236,49,37)" rx="2" ry="2" />
<text  x="1158.16" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="1127.8" y="341" width="0.5" height="15.0" fill="rgb(251,182,23)" rx="2" ry="2" />
<text  x="1130.78" y="351.5" ></text>
</g>
<g >
<title>core::ptr::write (34 samples, 0.54%)</title><rect x="756.5" y="309" width="6.3" height="15.0" fill="rgb(222,126,35)" rx="2" ry="2" />
<text  x="759.49" y="319.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (36 samples, 0.57%)</title><rect x="60.5" y="309" width="6.7" height="15.0" fill="rgb(227,97,16)" rx="2" ry="2" />
<text  x="63.49" y="319.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="67.2" y="309" width="0.2" height="15.0" fill="rgb(233,71,14)" rx="2" ry="2" />
<text  x="70.19" y="319.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (2 samples, 0.03%)</title><rect x="744.4" y="197" width="0.4" height="15.0" fill="rgb(228,193,7)" rx="2" ry="2" />
<text  x="747.38" y="207.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match (38 samples, 0.60%)</title><rect x="945.2" y="165" width="7.1" height="15.0" fill="rgb(222,219,45)" rx="2" ry="2" />
<text  x="948.21" y="175.5" ></text>
</g>
<g >
<title>regex::exec::Exec::searcher_str (17 samples, 0.27%)</title><rect x="1028.7" y="357" width="3.1" height="15.0" fill="rgb(239,52,34)" rx="2" ry="2" />
<text  x="1031.67" y="367.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::find_at (1,294 samples, 20.43%)</title><rect x="269.9" y="149" width="241.1" height="15.0" fill="rgb(236,178,27)" rx="2" ry="2" />
<text  x="272.88" y="159.5" >&lt;regex::exec::ExecNoSync as rege..</text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,269 samples, 20.03%)</title><rect x="763.4" y="293" width="236.4" height="15.0" fill="rgb(245,28,49)" rx="2" ry="2" />
<text  x="766.38" y="303.5" >&lt;core::iter::adapters::Enumerat..</text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr (2 samples, 0.03%)</title><rect x="1159.4" y="261" width="0.4" height="15.0" fill="rgb(207,180,23)" rx="2" ry="2" />
<text  x="1162.45" y="271.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1189.8" y="277" width="0.2" height="15.0" fill="rgb(237,84,53)" rx="2" ry="2" />
<text  x="1192.81" y="287.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(254,182,26)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h0f3ac708041708be (4 samples, 0.06%)</title><rect x="999.0" y="229" width="0.8" height="15.0" fill="rgb(209,67,44)" rx="2" ry="2" />
<text  x="1002.05" y="239.5" ></text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (14 samples, 0.22%)</title><rect x="54.2" y="357" width="2.6" height="15.0" fill="rgb(235,175,26)" rx="2" ry="2" />
<text  x="57.15" y="367.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (2 samples, 0.03%)</title><rect x="25.6" y="293" width="0.4" height="15.0" fill="rgb(220,206,51)" rx="2" ry="2" />
<text  x="28.65" y="303.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(235,114,47)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (7 samples, 0.11%)</title><rect x="542.2" y="117" width="1.4" height="15.0" fill="rgb(235,19,28)" rx="2" ry="2" />
<text  x="545.25" y="127.5" ></text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.03%)</title><rect x="753.9" y="245" width="0.4" height="15.0" fill="rgb(210,122,10)" rx="2" ry="2" />
<text  x="756.88" y="255.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_capture (1 samples, 0.02%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(213,163,0)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::hc185cff452e4284f (9 samples, 0.14%)</title><rect x="548.0" y="197" width="1.7" height="15.0" fill="rgb(253,66,28)" rx="2" ry="2" />
<text  x="551.02" y="207.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::ends_with (4 samples, 0.06%)</title><rect x="16.7" y="405" width="0.8" height="15.0" fill="rgb(232,24,43)" rx="2" ry="2" />
<text  x="19.71" y="415.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="67.2" y="261" width="0.2" height="15.0" fill="rgb(234,190,14)" rx="2" ry="2" />
<text  x="70.19" y="271.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_try_fold::_$u7b$$u7b$closure$u7d$$u7d$::h0adafc8155ad9d41 (9 samples, 0.14%)</title><rect x="969.1" y="245" width="1.6" height="15.0" fill="rgb(217,192,33)" rx="2" ry="2" />
<text  x="972.05" y="255.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,734 samples, 27.38%)</title><rect x="193.9" y="181" width="323.0" height="15.0" fill="rgb(221,133,37)" rx="2" ry="2" />
<text  x="196.87" y="191.5" >&lt;regex::re_trait::Matches&lt;R&gt; as core::iter:..</text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (352 samples, 5.56%)</title><rect x="1037.2" y="357" width="65.6" height="15.0" fill="rgb(232,130,33)" rx="2" ry="2" />
<text  x="1040.24" y="367.5" >&lt;alloc:..</text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1159.1" y="197" width="0.2" height="15.0" fill="rgb(241,5,25)" rx="2" ry="2" />
<text  x="1162.07" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="999.8" y="341" width="0.4" height="15.0" fill="rgb(248,91,9)" rx="2" ry="2" />
<text  x="1002.79" y="351.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hf2a9e8088ced8fdb (6,333 samples, 99.98%)</title><rect x="10.2" y="453" width="1179.8" height="15.0" fill="rgb(207,24,20)" rx="2" ry="2" />
<text  x="13.19" y="463.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hf2a9e8088ced8fdb</text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.16%)</title><rect x="13.5" y="421" width="1.9" height="15.0" fill="rgb(232,115,41)" rx="2" ry="2" />
<text  x="16.54" y="431.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::_find (477 samples, 7.53%)</title><rect x="410.5" y="85" width="88.9" height="15.0" fill="rgb(217,218,36)" rx="2" ry="2" />
<text  x="413.54" y="95.5" >regex::lit..</text>
</g>
<g >
<title>std::io::BufRead::read_line::_$u7b$$u7b$closure$u7d$$u7d$::hdbb4733f38ba9a1d (35 samples, 0.55%)</title><rect x="24.5" y="373" width="6.6" height="15.0" fill="rgb(214,100,20)" rx="2" ry="2" />
<text  x="27.53" y="383.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="19.7" y="341" width="0.2" height="15.0" fill="rgb(243,113,17)" rx="2" ry="2" />
<text  x="22.69" y="351.5" ></text>
</g>
</g>
</svg>
