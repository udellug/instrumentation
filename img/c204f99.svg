<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>choose (5,527 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(209,59,16)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >choose</text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (291 samples, 5.27%)</title><rect x="1111.0" y="213" width="62.1" height="15.0" fill="rgb(247,208,31)" rx="2" ry="2" />
<text  x="1114.01" y="223.5" >&lt;std::..</text>
</g>
<g >
<title>choose::config::Config::parse_choice (2 samples, 0.04%)</title><rect x="10.2" y="389" width="0.4" height="15.0" fill="rgb(237,104,1)" rx="2" ry="2" />
<text  x="13.21" y="399.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.09%)</title><rect x="1060.6" y="213" width="1.1" height="15.0" fill="rgb(253,12,8)" rx="2" ry="2" />
<text  x="1063.62" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.18%)</title><rect x="25.2" y="213" width="2.1" height="15.0" fill="rgb(235,174,8)" rx="2" ry="2" />
<text  x="28.16" y="223.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (9 samples, 0.16%)</title><rect x="1169.7" y="85" width="1.9" height="15.0" fill="rgb(227,219,23)" rx="2" ry="2" />
<text  x="1172.72" y="95.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (1 samples, 0.02%)</title><rect x="1172.7" y="117" width="0.2" height="15.0" fill="rgb(211,102,36)" rx="2" ry="2" />
<text  x="1175.71" y="127.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,563 samples, 46.37%)</title><rect x="248.3" y="213" width="547.2" height="15.0" fill="rgb(228,226,46)" rx="2" ry="2" />
<text  x="251.26" y="223.5" >&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>&lt;regex::re_unicode::Regex as core::str::FromStr&gt;::from_str (2 samples, 0.04%)</title><rect x="10.2" y="373" width="0.4" height="15.0" fill="rgb(229,15,28)" rx="2" ry="2" />
<text  x="13.21" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.11%)</title><rect x="1187.7" y="197" width="1.2" height="15.0" fill="rgb(235,217,6)" rx="2" ry="2" />
<text  x="1190.65" y="207.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1172.7" y="53" width="0.2" height="15.0" fill="rgb(231,112,27)" rx="2" ry="2" />
<text  x="1175.71" y="63.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.4" y="309" width="0.2" height="15.0" fill="rgb(235,133,44)" rx="2" ry="2" />
<text  x="13.43" y="319.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(215,140,11)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>__rdl_realloc (23 samples, 0.42%)</title><rect x="914.2" y="229" width="4.9" height="15.0" fill="rgb(230,91,53)" rx="2" ry="2" />
<text  x="917.16" y="239.5" ></text>
</g>
<g >
<title>__rust_dealloc (8 samples, 0.14%)</title><rect x="939.1" y="245" width="1.7" height="15.0" fill="rgb(239,192,35)" rx="2" ry="2" />
<text  x="942.14" y="255.5" ></text>
</g>
<g >
<title>ptmalloc_init.part.0 (1 samples, 0.02%)</title><rect x="1189.8" y="277" width="0.2" height="15.0" fill="rgb(245,20,52)" rx="2" ry="2" />
<text  x="1192.79" y="287.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate_matched_args (1 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(242,215,27)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (8 samples, 0.14%)</title><rect x="1108.4" y="213" width="1.8" height="15.0" fill="rgb(251,180,30)" rx="2" ry="2" />
<text  x="1111.44" y="223.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (3,021 samples, 54.66%)</title><rect x="150.5" y="229" width="645.0" height="15.0" fill="rgb(248,14,23)" rx="2" ry="2" />
<text  x="153.48" y="239.5" >&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (16 samples, 0.29%)</title><rect x="1169.7" y="165" width="3.4" height="15.0" fill="rgb(236,14,2)" rx="2" ry="2" />
<text  x="1172.72" y="175.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (5 samples, 0.09%)</title><rect x="1171.6" y="101" width="1.1" height="15.0" fill="rgb(225,65,41)" rx="2" ry="2" />
<text  x="1174.64" y="111.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="10.0" y="437" width="0.6" height="15.0" fill="rgb(211,199,18)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>_start (5,524 samples, 99.95%)</title><rect x="10.6" y="437" width="1179.4" height="15.0" fill="rgb(224,69,35)" rx="2" ry="2" />
<text  x="13.64" y="447.5" >_start</text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.04%)</title><rect x="1182.1" y="197" width="0.4" height="15.0" fill="rgb(228,183,26)" rx="2" ry="2" />
<text  x="1185.10" y="207.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (11 samples, 0.20%)</title><rect x="1077.1" y="229" width="2.3" height="15.0" fill="rgb(248,28,43)" rx="2" ry="2" />
<text  x="1080.06" y="239.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.04%)</title><rect x="843.1" y="197" width="0.4" height="15.0" fill="rgb(252,42,46)" rx="2" ry="2" />
<text  x="846.07" y="207.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1172.7" y="69" width="0.2" height="15.0" fill="rgb(253,29,39)" rx="2" ry="2" />
<text  x="1175.71" y="79.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.4" y="293" width="0.2" height="15.0" fill="rgb(253,210,8)" rx="2" ry="2" />
<text  x="13.43" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.31%)</title><rect x="1063.4" y="229" width="3.6" height="15.0" fill="rgb(211,126,0)" rx="2" ry="2" />
<text  x="1066.40" y="239.5" ></text>
</g>
<g >
<title>core::str::run_utf8_validation (15 samples, 0.27%)</title><rect x="28.8" y="213" width="3.2" height="15.0" fill="rgb(205,37,10)" rx="2" ry="2" />
<text  x="31.79" y="223.5" ></text>
</g>
<g >
<title>__fopen_internal (1 samples, 0.02%)</title><rect x="1189.8" y="309" width="0.2" height="15.0" fill="rgb(229,197,15)" rx="2" ry="2" />
<text  x="1192.79" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (84 samples, 1.52%)</title><rect x="1013.7" y="229" width="17.9" height="15.0" fill="rgb(222,199,35)" rx="2" ry="2" />
<text  x="1016.65" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.02%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(244,172,1)" rx="2" ry="2" />
<text  x="1192.79" y="367.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (5 samples, 0.09%)</title><rect x="1171.6" y="69" width="1.1" height="15.0" fill="rgb(235,102,14)" rx="2" ry="2" />
<text  x="1174.64" y="79.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (4 samples, 0.07%)</title><rect x="21.5" y="197" width="0.9" height="15.0" fill="rgb(244,177,26)" rx="2" ry="2" />
<text  x="24.53" y="207.5" ></text>
</g>
<g >
<title>std::io::append_to_string (86 samples, 1.56%)</title><rect x="19.2" y="245" width="18.3" height="15.0" fill="rgb(252,88,42)" rx="2" ry="2" />
<text  x="22.18" y="255.5" ></text>
</g>
<g >
<title>all (5,527 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(208,119,20)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.18%)</title><rect x="912.0" y="213" width="2.2" height="15.0" fill="rgb(237,49,33)" rx="2" ry="2" />
<text  x="915.03" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (3,980 samples, 72.01%)</title><rect x="71.7" y="245" width="849.7" height="15.0" fill="rgb(206,192,8)" rx="2" ry="2" />
<text  x="74.70" y="255.5" >&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="27.9" y="229" width="0.2" height="15.0" fill="rgb(240,206,0)" rx="2" ry="2" />
<text  x="30.93" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (12 samples, 0.22%)</title><rect x="916.5" y="213" width="2.6" height="15.0" fill="rgb(252,148,9)" rx="2" ry="2" />
<text  x="919.51" y="223.5" ></text>
</g>
<g >
<title>structopt::StructOpt::from_args (2 samples, 0.04%)</title><rect x="10.2" y="421" width="0.4" height="15.0" fill="rgb(230,55,7)" rx="2" ry="2" />
<text  x="13.21" y="431.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="1172.7" y="101" width="0.2" height="15.0" fill="rgb(219,169,6)" rx="2" ry="2" />
<text  x="1175.71" y="111.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (16 samples, 0.29%)</title><rect x="1169.7" y="149" width="3.4" height="15.0" fill="rgb(240,167,39)" rx="2" ry="2" />
<text  x="1172.72" y="159.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (12 samples, 0.22%)</title><rect x="1167.2" y="181" width="2.5" height="15.0" fill="rgb(217,203,23)" rx="2" ry="2" />
<text  x="1170.16" y="191.5" ></text>
</g>
<g >
<title>pthread_getattr_np (1 samples, 0.02%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(249,184,6)" rx="2" ry="2" />
<text  x="1192.79" y="335.5" ></text>
</g>
<g >
<title>core::fmt::write (29 samples, 0.52%)</title><rect x="1183.6" y="245" width="6.2" height="15.0" fill="rgb(224,174,36)" rx="2" ry="2" />
<text  x="1186.60" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_write (9 samples, 0.16%)</title><rect x="1169.7" y="53" width="1.9" height="15.0" fill="rgb(208,7,43)" rx="2" ry="2" />
<text  x="1172.72" y="63.5" ></text>
</g>
<g >
<title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="1173.1" y="213" width="0.2" height="15.0" fill="rgb(206,97,47)" rx="2" ry="2" />
<text  x="1176.13" y="223.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (5,351 samples, 96.82%)</title><rect x="40.1" y="261" width="1142.4" height="15.0" fill="rgb(222,107,53)" rx="2" ry="2" />
<text  x="43.10" y="271.5" >choose::choice::Choice::print_choice</text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (15 samples, 0.27%)</title><rect x="1169.7" y="133" width="3.2" height="15.0" fill="rgb(241,37,27)" rx="2" ry="2" />
<text  x="1172.72" y="143.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.02%)</title><rect x="1172.9" y="101" width="0.2" height="15.0" fill="rgb(246,217,38)" rx="2" ry="2" />
<text  x="1175.92" y="111.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (34 samples, 0.62%)</title><rect x="1182.5" y="261" width="7.3" height="15.0" fill="rgb(241,206,12)" rx="2" ry="2" />
<text  x="1185.53" y="271.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (4 samples, 0.07%)</title><rect x="21.5" y="213" width="0.9" height="15.0" fill="rgb(215,86,44)" rx="2" ry="2" />
<text  x="24.53" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (78 samples, 1.41%)</title><rect x="795.5" y="229" width="16.6" height="15.0" fill="rgb(223,90,24)" rx="2" ry="2" />
<text  x="798.46" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.16%)</title><rect x="937.2" y="229" width="1.9" height="15.0" fill="rgb(242,19,13)" rx="2" ry="2" />
<text  x="940.22" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr (1 samples, 0.02%)</title><rect x="1172.9" y="117" width="0.2" height="15.0" fill="rgb(212,71,15)" rx="2" ry="2" />
<text  x="1175.92" y="127.5" ></text>
</g>
<g >
<title>choose::main (5,523 samples, 99.93%)</title><rect x="10.6" y="277" width="1179.2" height="15.0" fill="rgb(231,198,18)" rx="2" ry="2" />
<text  x="13.64" y="287.5" >choose::main</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="1110.2" y="213" width="0.8" height="15.0" fill="rgb(252,192,39)" rx="2" ry="2" />
<text  x="1113.15" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (115 samples, 2.08%)</title><rect x="885.8" y="197" width="24.5" height="15.0" fill="rgb(240,123,43)" rx="2" ry="2" />
<text  x="888.77" y="207.5" >_..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 0.18%)</title><rect x="22.6" y="229" width="2.1" height="15.0" fill="rgb(209,161,23)" rx="2" ry="2" />
<text  x="25.60" y="239.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(231,126,36)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>__rust_alloc (5 samples, 0.09%)</title><rect x="919.1" y="229" width="1.0" height="15.0" fill="rgb(230,135,26)" rx="2" ry="2" />
<text  x="922.07" y="239.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (10 samples, 0.18%)</title><rect x="908.2" y="181" width="2.1" height="15.0" fill="rgb(224,216,3)" rx="2" ry="2" />
<text  x="911.18" y="191.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (5,523 samples, 99.93%)</title><rect x="10.6" y="373" width="1179.2" height="15.0" fill="rgb(223,69,54)" rx="2" ry="2" />
<text  x="13.64" y="383.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (4 samples, 0.07%)</title><rect x="1110.2" y="197" width="0.8" height="15.0" fill="rgb(243,47,22)" rx="2" ry="2" />
<text  x="1113.15" y="207.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(226,113,5)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (9 samples, 0.16%)</title><rect x="1169.7" y="101" width="1.9" height="15.0" fill="rgb(253,226,54)" rx="2" ry="2" />
<text  x="1172.72" y="111.5" ></text>
</g>
<g >
<title>__rdl_alloc (14 samples, 0.25%)</title><rect x="1058.7" y="229" width="3.0" height="15.0" fill="rgb(254,207,16)" rx="2" ry="2" />
<text  x="1061.70" y="239.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.09%)</title><rect x="39.0" y="261" width="1.1" height="15.0" fill="rgb(205,169,9)" rx="2" ry="2" />
<text  x="42.04" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (127 samples, 2.30%)</title><rect x="1031.6" y="229" width="27.1" height="15.0" fill="rgb(232,147,31)" rx="2" ry="2" />
<text  x="1034.58" y="239.5" >_..</text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.4" y="325" width="0.2" height="15.0" fill="rgb(241,211,39)" rx="2" ry="2" />
<text  x="13.43" y="335.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(230,220,15)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.05%)</title><rect x="1189.1" y="197" width="0.7" height="15.0" fill="rgb(234,140,30)" rx="2" ry="2" />
<text  x="1192.15" y="207.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (18 samples, 0.33%)</title><rect x="1185.9" y="213" width="3.9" height="15.0" fill="rgb(241,165,26)" rx="2" ry="2" />
<text  x="1188.94" y="223.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (5,524 samples, 99.95%)</title><rect x="10.6" y="389" width="1179.4" height="15.0" fill="rgb(216,122,4)" rx="2" ry="2" />
<text  x="13.64" y="399.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h156dc5eab96477ce (5,523 samples, 99.93%)</title><rect x="10.6" y="293" width="1179.2" height="15.0" fill="rgb(219,43,40)" rx="2" ry="2" />
<text  x="13.64" y="303.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h156dc5eab96477ce</text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (2 samples, 0.04%)</title><rect x="10.2" y="341" width="0.4" height="15.0" fill="rgb(241,48,14)" rx="2" ry="2" />
<text  x="13.21" y="351.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.02%)</title><rect x="1189.8" y="341" width="0.2" height="15.0" fill="rgb(205,176,2)" rx="2" ry="2" />
<text  x="1192.79" y="351.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (5 samples, 0.09%)</title><rect x="1171.6" y="53" width="1.1" height="15.0" fill="rgb(236,47,41)" rx="2" ry="2" />
<text  x="1174.64" y="63.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(249,156,20)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (5 samples, 0.09%)</title><rect x="1171.6" y="117" width="1.1" height="15.0" fill="rgb(230,187,23)" rx="2" ry="2" />
<text  x="1174.64" y="127.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.04%)</title><rect x="1182.1" y="213" width="0.4" height="15.0" fill="rgb(212,46,27)" rx="2" ry="2" />
<text  x="1185.10" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_free (6 samples, 0.11%)</title><rect x="37.5" y="261" width="1.3" height="15.0" fill="rgb(237,194,21)" rx="2" ry="2" />
<text  x="40.54" y="271.5" ></text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (454 samples, 8.21%)</title><rect x="970.1" y="245" width="96.9" height="15.0" fill="rgb(232,141,35)" rx="2" ry="2" />
<text  x="973.10" y="255.5" >alloc::str:..</text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (9 samples, 0.16%)</title><rect x="1169.7" y="117" width="1.9" height="15.0" fill="rgb(232,193,48)" rx="2" ry="2" />
<text  x="1172.72" y="127.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::split (58 samples, 1.05%)</title><rect x="1067.0" y="245" width="12.4" height="15.0" fill="rgb(208,80,44)" rx="2" ry="2" />
<text  x="1070.03" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 1.81%)</title><rect x="16.2" y="261" width="21.3" height="15.0" fill="rgb(239,217,26)" rx="2" ry="2" />
<text  x="19.19" y="271.5" >&lt;..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.27%)</title><rect x="24.7" y="229" width="3.2" height="15.0" fill="rgb(227,115,9)" rx="2" ry="2" />
<text  x="27.73" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (80 samples, 1.45%)</title><rect x="843.5" y="197" width="17.1" height="15.0" fill="rgb(209,32,15)" rx="2" ry="2" />
<text  x="846.49" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_free (74 samples, 1.34%)</title><rect x="921.4" y="245" width="15.8" height="15.0" fill="rgb(235,221,41)" rx="2" ry="2" />
<text  x="924.42" y="255.5" ></text>
</g>
<g >
<title>main (5,524 samples, 99.95%)</title><rect x="10.6" y="405" width="1179.4" height="15.0" fill="rgb(250,183,50)" rx="2" ry="2" />
<text  x="13.64" y="415.5" >main</text>
</g>
<g >
<title>choose::config::Opt::augment_clap::_$u7b$$u7b$closure$u7d$$u7d$::h09a007304678755f (1 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(229,134,0)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (5,523 samples, 99.93%)</title><rect x="10.6" y="325" width="1179.2" height="15.0" fill="rgb(235,216,1)" rx="2" ry="2" />
<text  x="13.64" y="335.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>__rdl_alloc (18 samples, 0.33%)</title><rect x="910.3" y="229" width="3.9" height="15.0" fill="rgb(232,70,37)" rx="2" ry="2" />
<text  x="913.32" y="239.5" ></text>
</g>
<g >
<title>_int_free (137 samples, 2.48%)</title><rect x="940.8" y="245" width="29.3" height="15.0" fill="rgb(233,203,51)" rx="2" ry="2" />
<text  x="943.85" y="255.5" >_i..</text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f (5,523 samples, 99.93%)</title><rect x="10.6" y="309" width="1179.2" height="15.0" fill="rgb(213,72,34)" rx="2" ry="2" />
<text  x="13.64" y="319.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f</text>
</g>
<g >
<title>unlink_chunk.isra.0 (5 samples, 0.09%)</title><rect x="969.0" y="229" width="1.1" height="15.0" fill="rgb(211,97,6)" rx="2" ry="2" />
<text  x="972.03" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="22.4" y="229" width="0.2" height="15.0" fill="rgb(248,84,37)" rx="2" ry="2" />
<text  x="25.38" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (460 samples, 8.32%)</title><rect x="812.1" y="229" width="98.2" height="15.0" fill="rgb(225,17,27)" rx="2" ry="2" />
<text  x="815.11" y="239.5" >__GI___libc..</text>
</g>
<g >
<title>__rdl_dealloc (9 samples, 0.16%)</title><rect x="937.2" y="245" width="1.9" height="15.0" fill="rgb(215,165,48)" rx="2" ry="2" />
<text  x="940.22" y="255.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::guard::init (1 samples, 0.02%)</title><rect x="1189.8" y="373" width="0.2" height="15.0" fill="rgb(236,152,14)" rx="2" ry="2" />
<text  x="1192.79" y="383.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="1188.9" y="197" width="0.2" height="15.0" fill="rgb(221,15,44)" rx="2" ry="2" />
<text  x="1191.93" y="207.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (5 samples, 0.09%)</title><rect x="1171.6" y="85" width="1.1" height="15.0" fill="rgb(216,94,21)" rx="2" ry="2" />
<text  x="1174.64" y="95.5" ></text>
</g>
<g >
<title>std::memchr::memrchr (1 samples, 0.02%)</title><rect x="1172.9" y="133" width="0.2" height="15.0" fill="rgb(205,46,42)" rx="2" ry="2" />
<text  x="1175.92" y="143.5" ></text>
</g>
<g >
<title>__memrchr_avx2 (1 samples, 0.02%)</title><rect x="1172.9" y="85" width="0.2" height="15.0" fill="rgb(207,47,6)" rx="2" ry="2" />
<text  x="1175.92" y="95.5" ></text>
</g>
<g >
<title>malloc_hook_ini (1 samples, 0.02%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(213,140,24)" rx="2" ry="2" />
<text  x="1192.79" y="303.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="1172.7" y="85" width="0.2" height="15.0" fill="rgb(213,191,15)" rx="2" ry="2" />
<text  x="1175.71" y="95.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (2 samples, 0.04%)</title><rect x="10.2" y="357" width="0.4" height="15.0" fill="rgb(223,150,48)" rx="2" ry="2" />
<text  x="13.21" y="367.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.02%)</title><rect x="27.7" y="213" width="0.2" height="15.0" fill="rgb(236,177,29)" rx="2" ry="2" />
<text  x="30.72" y="223.5" ></text>
</g>
<g >
<title>core::str::from_utf8 (18 samples, 0.33%)</title><rect x="28.1" y="229" width="3.9" height="15.0" fill="rgb(253,55,42)" rx="2" ry="2" />
<text  x="31.15" y="239.5" ></text>
</g>
<g >
<title>_int_realloc (390 samples, 7.06%)</title><rect x="827.1" y="213" width="83.2" height="15.0" fill="rgb(222,209,30)" rx="2" ry="2" />
<text  x="830.05" y="223.5" >_int_real..</text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(231,176,29)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.24%)</title><rect x="1164.4" y="181" width="2.8" height="15.0" fill="rgb(206,48,1)" rx="2" ry="2" />
<text  x="1167.38" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.04%)</title><rect x="10.2" y="405" width="0.4" height="15.0" fill="rgb(215,72,12)" rx="2" ry="2" />
<text  x="13.21" y="415.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memchr (26 samples, 0.47%)</title><rect x="32.0" y="229" width="5.5" height="15.0" fill="rgb(242,184,50)" rx="2" ry="2" />
<text  x="34.99" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_write (5 samples, 0.09%)</title><rect x="1171.6" y="37" width="1.1" height="15.0" fill="rgb(241,113,42)" rx="2" ry="2" />
<text  x="1174.64" y="47.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (16 samples, 0.29%)</title><rect x="1169.7" y="181" width="3.4" height="15.0" fill="rgb(233,203,9)" rx="2" ry="2" />
<text  x="1172.72" y="191.5" ></text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.02%)</title><rect x="38.8" y="261" width="0.2" height="15.0" fill="rgb(219,15,2)" rx="2" ry="2" />
<text  x="41.82" y="271.5" ></text>
</g>
<g >
<title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="10.2" y="325" width="0.2" height="15.0" fill="rgb(227,13,40)" rx="2" ry="2" />
<text  x="13.21" y="335.5" ></text>
</g>
<g >
<title>_int_realloc (2 samples, 0.04%)</title><rect x="27.3" y="197" width="0.4" height="15.0" fill="rgb(220,134,4)" rx="2" ry="2" />
<text  x="30.29" y="207.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.02%)</title><rect x="27.5" y="181" width="0.2" height="15.0" fill="rgb(236,79,46)" rx="2" ry="2" />
<text  x="30.51" y="191.5" ></text>
</g>
<g >
<title>std::panicking::try (5,523 samples, 99.93%)</title><rect x="10.6" y="357" width="1179.2" height="15.0" fill="rgb(210,195,3)" rx="2" ry="2" />
<text  x="13.64" y="367.5" >std::panicking::try</text>
</g>
<g >
<title>__rust_realloc (6 samples, 0.11%)</title><rect x="920.1" y="229" width="1.3" height="15.0" fill="rgb(249,66,47)" rx="2" ry="2" />
<text  x="923.14" y="239.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad (41 samples, 0.74%)</title><rect x="1173.3" y="213" width="8.8" height="15.0" fill="rgb(235,195,25)" rx="2" ry="2" />
<text  x="1176.35" y="223.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (9 samples, 0.16%)</title><rect x="1169.7" y="69" width="1.9" height="15.0" fill="rgb(235,186,40)" rx="2" ry="2" />
<text  x="1172.72" y="79.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(226,82,23)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.4" y="277" width="0.2" height="15.0" fill="rgb(237,80,10)" rx="2" ry="2" />
<text  x="13.43" y="287.5" ></text>
</g>
<g >
<title>__GI___read (4 samples, 0.07%)</title><rect x="21.5" y="181" width="0.9" height="15.0" fill="rgb(215,126,23)" rx="2" ry="2" />
<text  x="24.53" y="191.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.07%)</title><rect x="21.5" y="229" width="0.9" height="15.0" fill="rgb(217,97,7)" rx="2" ry="2" />
<text  x="24.53" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (80 samples, 1.45%)</title><rect x="1147.3" y="181" width="17.1" height="15.0" fill="rgb(240,197,13)" rx="2" ry="2" />
<text  x="1150.30" y="191.5" ></text>
</g>
<g >
<title>__libc_start_main (5,524 samples, 99.95%)</title><rect x="10.6" y="421" width="1179.4" height="15.0" fill="rgb(225,113,18)" rx="2" ry="2" />
<text  x="13.64" y="431.5" >__libc_start_main</text>
</g>
<g >
<title>std::io::Write::write_fmt (483 samples, 8.74%)</title><rect x="1079.4" y="245" width="103.1" height="15.0" fill="rgb(223,119,26)" rx="2" ry="2" />
<text  x="1082.41" y="255.5" >std::io::Wri..</text>
</g>
<g >
<title>core::fmt::write (390 samples, 7.06%)</title><rect x="1099.3" y="229" width="83.2" height="15.0" fill="rgb(242,17,19)" rx="2" ry="2" />
<text  x="1102.26" y="239.5" >core::fmt..</text>
</g>
<g >
<title>_int_free (118 samples, 2.13%)</title><rect x="860.6" y="197" width="25.2" height="15.0" fill="rgb(207,113,27)" rx="2" ry="2" />
<text  x="863.57" y="207.5" >_..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1172.7" y="37" width="0.2" height="15.0" fill="rgb(209,130,32)" rx="2" ry="2" />
<text  x="1175.71" y="47.5" ></text>
</g>
<g >
<title>__memchr_avx2 (26 samples, 0.47%)</title><rect x="32.0" y="213" width="5.5" height="15.0" fill="rgb(231,135,50)" rx="2" ry="2" />
<text  x="34.99" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="22.4" y="213" width="0.2" height="15.0" fill="rgb(243,52,10)" rx="2" ry="2" />
<text  x="25.38" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (2 samples, 0.04%)</title><rect x="27.3" y="213" width="0.4" height="15.0" fill="rgb(254,58,43)" rx="2" ry="2" />
<text  x="30.29" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc (8 samples, 0.14%)</title><rect x="1061.7" y="229" width="1.7" height="15.0" fill="rgb(221,71,38)" rx="2" ry="2" />
<text  x="1064.69" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Regex as core::str::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(242,129,33)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (250 samples, 4.52%)</title><rect x="1119.8" y="197" width="53.3" height="15.0" fill="rgb(253,76,53)" rx="2" ry="2" />
<text  x="1122.76" y="207.5" >std::..</text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (24 samples, 0.43%)</title><rect x="1184.7" y="229" width="5.1" height="15.0" fill="rgb(205,163,10)" rx="2" ry="2" />
<text  x="1187.66" y="239.5" ></text>
</g>
<g >
<title>__rust_maybe_catch_panic (5,523 samples, 99.93%)</title><rect x="10.6" y="341" width="1179.2" height="15.0" fill="rgb(246,69,13)" rx="2" ry="2" />
<text  x="13.64" y="351.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>__GI__dl_addr (1 samples, 0.02%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(242,53,19)" rx="2" ry="2" />
<text  x="1192.79" y="271.5" ></text>
</g>
</g>
</svg>
