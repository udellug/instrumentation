<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (32 samples, 0.65%)</title><rect x="409.3" y="213" width="7.7" height="15.0" fill="rgb(254,33,42)" rx="2" ry="2" />
<text  x="412.26" y="223.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (6 samples, 0.12%)</title><rect x="1034.5" y="181" width="1.4" height="15.0" fill="rgb(247,176,14)" rx="2" ry="2" />
<text  x="1037.48" y="191.5" ></text>
</g>
<g >
<title>core::fmt::write (1 samples, 0.02%)</title><rect x="1158.0" y="149" width="0.3" height="15.0" fill="rgb(225,29,2)" rx="2" ry="2" />
<text  x="1161.03" y="159.5" ></text>
</g>
<g >
<title>all (4,909 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(208,96,21)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="1042.7" y="101" width="0.2" height="15.0" fill="rgb(206,217,10)" rx="2" ry="2" />
<text  x="1045.65" y="111.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::find_at (1,728 samples, 35.20%)</title><rect x="283.8" y="309" width="415.4" height="15.0" fill="rgb(220,91,44)" rx="2" ry="2" />
<text  x="286.79" y="319.5" >&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularE..</text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals (1,249 samples, 25.44%)</title><rect x="372.0" y="277" width="300.2" height="15.0" fill="rgb(231,102,49)" rx="2" ry="2" />
<text  x="375.00" y="287.5" >regex::exec::ExecNoSync::find_literals</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%)</title><rect x="28.0" y="373" width="0.7" height="15.0" fill="rgb(252,140,41)" rx="2" ry="2" />
<text  x="31.03" y="383.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (21 samples, 0.43%)</title><rect x="1185.0" y="485" width="5.0" height="15.0" fill="rgb(215,189,49)" rx="2" ry="2" />
<text  x="1187.95" y="495.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(242,70,16)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(222,154,28)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="33.3" y="277" width="0.3" height="15.0" fill="rgb(234,15,9)" rx="2" ry="2" />
<text  x="36.32" y="287.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (4,701 samples, 95.76%)</title><rect x="48.5" y="485" width="1130.0" height="15.0" fill="rgb(211,54,11)" rx="2" ry="2" />
<text  x="51.46" y="495.5" >choose::choice::Choice::print_choice</text>
</g>
<g >
<title>_int_realloc (2 samples, 0.04%)</title><rect x="32.8" y="277" width="0.5" height="15.0" fill="rgb(218,114,30)" rx="2" ry="2" />
<text  x="35.84" y="287.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (58 samples, 1.18%)</title><rect x="1110.0" y="133" width="13.9" height="15.0" fill="rgb(250,55,10)" rx="2" ry="2" />
<text  x="1112.96" y="143.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::find_iter (23 samples, 0.47%)</title><rect x="1172.9" y="437" width="5.6" height="15.0" fill="rgb(224,206,41)" rx="2" ry="2" />
<text  x="1175.93" y="447.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.06%)</title><rect x="1123.9" y="117" width="0.7" height="15.0" fill="rgb(213,85,35)" rx="2" ry="2" />
<text  x="1126.90" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,619 samples, 94.09%)</title><rect x="57.1" y="437" width="1110.3" height="15.0" fill="rgb(246,61,8)" rx="2" ry="2" />
<text  x="60.11" y="447.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (32 samples, 0.65%)</title><rect x="409.3" y="261" width="7.7" height="15.0" fill="rgb(211,81,53)" rx="2" ry="2" />
<text  x="412.26" y="271.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (87 samples, 1.77%)</title><rect x="590.7" y="197" width="21.0" height="15.0" fill="rgb(219,9,8)" rx="2" ry="2" />
<text  x="593.75" y="207.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="590.3" y="197" width="0.4" height="15.0" fill="rgb(225,219,17)" rx="2" ry="2" />
<text  x="593.26" y="207.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (914 samples, 18.62%)</title><rect x="916.9" y="229" width="219.7" height="15.0" fill="rgb(220,192,5)" rx="2" ry="2" />
<text  x="919.93" y="239.5" >&lt;std::io::Write::write_fmt::A..</text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (252 samples, 5.13%)</title><rect x="611.7" y="197" width="60.5" height="15.0" fill="rgb(245,63,6)" rx="2" ry="2" />
<text  x="614.66" y="207.5" >&lt;core:..</text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f (4,908 samples, 99.98%)</title><rect x="10.2" y="533" width="1179.8" height="15.0" fill="rgb(227,108,0)" rx="2" ry="2" />
<text  x="13.24" y="543.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f</text>
</g>
<g >
<title>clap::app::parser::Parser::get_matches_with (1 samples, 0.02%)</title><rect x="10.0" y="645" width="0.2" height="15.0" fill="rgb(212,130,4)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>core::str::from_utf8 (22 samples, 0.45%)</title><rect x="21.1" y="437" width="5.2" height="15.0" fill="rgb(242,101,47)" rx="2" ry="2" />
<text  x="24.06" y="447.5" ></text>
</g>
<g >
<title>__rust_maybe_catch_panic (4,908 samples, 99.98%)</title><rect x="10.2" y="565" width="1179.8" height="15.0" fill="rgb(208,203,23)" rx="2" ry="2" />
<text  x="13.24" y="575.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>core::cmp::min (1 samples, 0.02%)</title><rect x="1158.0" y="181" width="0.3" height="15.0" fill="rgb(225,176,46)" rx="2" ry="2" />
<text  x="1161.03" y="191.5" ></text>
</g>
<g >
<title>thread_local::thread_id::THREAD_ID::__getit (3 samples, 0.06%)</title><rect x="1177.3" y="293" width="0.7" height="15.0" fill="rgb(245,37,47)" rx="2" ry="2" />
<text  x="1180.26" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (4,549 samples, 92.67%)</title><rect x="73.9" y="373" width="1093.5" height="15.0" fill="rgb(216,140,52)" rx="2" ry="2" />
<text  x="76.94" y="383.5" >core::iter::traits::iterator::Iterator::try_fold</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.14%)</title><rect x="1188.1" y="373" width="1.7" height="15.0" fill="rgb(252,56,13)" rx="2" ry="2" />
<text  x="1191.08" y="383.5" ></text>
</g>
<g >
<title>core::fmt::write (1,210 samples, 24.65%)</title><rect x="867.9" y="245" width="290.9" height="15.0" fill="rgb(248,33,21)" rx="2" ry="2" />
<text  x="870.90" y="255.5" >core::fmt::write</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(222,196,1)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or_try (23 samples, 0.47%)</title><rect x="1172.9" y="357" width="5.6" height="15.0" fill="rgb(215,172,50)" rx="2" ry="2" />
<text  x="1175.93" y="367.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="1189.5" y="325" width="0.3" height="15.0" fill="rgb(215,104,51)" rx="2" ry="2" />
<text  x="1192.52" y="335.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.04%)</title><rect x="746.0" y="293" width="0.5" height="15.0" fill="rgb(252,87,19)" rx="2" ry="2" />
<text  x="749.03" y="303.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="1158.0" y="165" width="0.3" height="15.0" fill="rgb(251,195,1)" rx="2" ry="2" />
<text  x="1161.03" y="175.5" ></text>
</g>
<g >
<title>__libc_start_main (4,908 samples, 99.98%)</title><rect x="10.2" y="645" width="1179.8" height="15.0" fill="rgb(210,10,40)" rx="2" ry="2" />
<text  x="13.24" y="655.5" >__libc_start_main</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (340 samples, 6.93%)</title><rect x="1042.9" y="181" width="81.7" height="15.0" fill="rgb(225,73,47)" rx="2" ry="2" />
<text  x="1045.89" y="191.5" >std::io::..</text>
</g>
<g >
<title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.8" y="421" width="0.3" height="15.0" fill="rgb(213,16,2)" rx="2" ry="2" />
<text  x="23.82" y="431.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (137 samples, 2.79%)</title><rect x="711.4" y="309" width="32.9" height="15.0" fill="rgb(207,67,17)" rx="2" ry="2" />
<text  x="714.41" y="319.5" >co..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.04%)</title><rect x="20.3" y="437" width="0.5" height="15.0" fill="rgb(228,200,42)" rx="2" ry="2" />
<text  x="23.34" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1042.7" y="37" width="0.2" height="15.0" fill="rgb(213,113,20)" rx="2" ry="2" />
<text  x="1045.65" y="47.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="1189.5" y="309" width="0.3" height="15.0" fill="rgb(222,69,18)" rx="2" ry="2" />
<text  x="1192.52" y="319.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match::imp (13 samples, 0.26%)</title><rect x="684.3" y="261" width="3.1" height="15.0" fill="rgb(225,107,51)" rx="2" ry="2" />
<text  x="687.25" y="271.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (4,908 samples, 99.98%)</title><rect x="10.2" y="597" width="1179.8" height="15.0" fill="rgb(248,47,17)" rx="2" ry="2" />
<text  x="13.24" y="607.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.02%)</title><rect x="1189.8" y="421" width="0.2" height="15.0" fill="rgb(251,114,19)" rx="2" ry="2" />
<text  x="1192.76" y="431.5" ></text>
</g>
<g >
<title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="33.3" y="293" width="0.3" height="15.0" fill="rgb(215,36,5)" rx="2" ry="2" />
<text  x="36.32" y="303.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.06%)</title><rect x="27.1" y="373" width="0.7" height="15.0" fill="rgb(210,59,28)" rx="2" ry="2" />
<text  x="30.07" y="383.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::ends_with (2 samples, 0.04%)</title><rect x="18.9" y="437" width="0.5" height="15.0" fill="rgb(253,90,22)" rx="2" ry="2" />
<text  x="21.89" y="447.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (15 samples, 0.31%)</title><rect x="1036.2" y="69" width="3.6" height="15.0" fill="rgb(235,35,32)" rx="2" ry="2" />
<text  x="1039.16" y="79.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (11 samples, 0.22%)</title><rect x="1040.0" y="53" width="2.7" height="15.0" fill="rgb(252,208,8)" rx="2" ry="2" />
<text  x="1043.01" y="63.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.35%)</title><rect x="29.5" y="357" width="4.1" height="15.0" fill="rgb(246,182,36)" rx="2" ry="2" />
<text  x="32.47" y="367.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.14%)</title><rect x="1176.8" y="325" width="1.7" height="15.0" fill="rgb(244,78,31)" rx="2" ry="2" />
<text  x="1179.78" y="335.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (749 samples, 15.26%)</title><rect x="956.6" y="213" width="180.0" height="15.0" fill="rgb(225,148,8)" rx="2" ry="2" />
<text  x="959.60" y="223.5" >std::io::Write::write_all</text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (12 samples, 0.24%)</title><rect x="30.0" y="325" width="2.8" height="15.0" fill="rgb(234,75,36)" rx="2" ry="2" />
<text  x="32.95" y="335.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (5 samples, 0.10%)</title><rect x="743.1" y="293" width="1.2" height="15.0" fill="rgb(248,88,39)" rx="2" ry="2" />
<text  x="746.14" y="303.5" ></text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.41%)</title><rect x="1179.9" y="469" width="4.8" height="15.0" fill="rgb(236,53,0)" rx="2" ry="2" />
<text  x="1182.90" y="479.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (12 samples, 0.24%)</title><rect x="30.0" y="309" width="2.8" height="15.0" fill="rgb(211,179,36)" rx="2" ry="2" />
<text  x="32.95" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (102 samples, 2.08%)</title><rect x="1085.2" y="133" width="24.5" height="15.0" fill="rgb(237,166,10)" rx="2" ry="2" />
<text  x="1088.20" y="143.5" >a..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (31 samples, 0.63%)</title><rect x="409.5" y="197" width="7.5" height="15.0" fill="rgb(248,148,31)" rx="2" ry="2" />
<text  x="412.50" y="207.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (252 samples, 5.13%)</title><rect x="611.7" y="213" width="60.5" height="15.0" fill="rgb(229,100,42)" rx="2" ry="2" />
<text  x="614.66" y="223.5" >&lt;core:..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (1 samples, 0.02%)</title><rect x="33.3" y="325" width="0.3" height="15.0" fill="rgb(209,189,27)" rx="2" ry="2" />
<text  x="36.32" y="335.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1042.7" y="53" width="0.2" height="15.0" fill="rgb(248,141,25)" rx="2" ry="2" />
<text  x="1045.65" y="63.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad (83 samples, 1.69%)</title><rect x="1138.1" y="229" width="19.9" height="15.0" fill="rgb(231,68,46)" rx="2" ry="2" />
<text  x="1141.08" y="239.5" ></text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="1184.7" y="485" width="0.3" height="15.0" fill="rgb(233,25,52)" rx="2" ry="2" />
<text  x="1187.71" y="495.5" ></text>
</g>
<g >
<title>_int_free (12 samples, 0.24%)</title><rect x="1181.8" y="405" width="2.9" height="15.0" fill="rgb(225,221,0)" rx="2" ry="2" />
<text  x="1184.83" y="415.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.04%)</title><rect x="20.3" y="421" width="0.5" height="15.0" fill="rgb(212,182,9)" rx="2" ry="2" />
<text  x="23.34" y="431.5" ></text>
</g>
<g >
<title>&lt;&amp;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="15.8" y="485" width="0.2" height="15.0" fill="rgb(216,62,49)" rx="2" ry="2" />
<text  x="18.77" y="495.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (31 samples, 0.63%)</title><rect x="800.6" y="261" width="7.4" height="15.0" fill="rgb(253,88,53)" rx="2" ry="2" />
<text  x="803.59" y="271.5" ></text>
</g>
<g >
<title>&lt;str as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="1136.6" y="229" width="1.5" height="15.0" fill="rgb(217,141,14)" rx="2" ry="2" />
<text  x="1139.64" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="30.0" y="293" width="1.9" height="15.0" fill="rgb(218,157,0)" rx="2" ry="2" />
<text  x="32.95" y="303.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate (1 samples, 0.02%)</title><rect x="10.0" y="629" width="0.2" height="15.0" fill="rgb(226,128,45)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(220,154,7)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 1.00%)</title><rect x="687.4" y="293" width="11.8" height="15.0" fill="rgb(216,150,13)" rx="2" ry="2" />
<text  x="690.38" y="303.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="15.8" y="469" width="0.2" height="15.0" fill="rgb(252,208,42)" rx="2" ry="2" />
<text  x="18.77" y="479.5" ></text>
</g>
<g >
<title>regex_syntax::ast::visitor::visit (1 samples, 0.02%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(221,82,0)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (29 samples, 0.59%)</title><rect x="1035.9" y="165" width="7.0" height="15.0" fill="rgb(218,22,40)" rx="2" ry="2" />
<text  x="1038.92" y="175.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hf2a9e8088ced8fdb (4,908 samples, 99.98%)</title><rect x="10.2" y="517" width="1179.8" height="15.0" fill="rgb(248,30,25)" rx="2" ry="2" />
<text  x="13.24" y="527.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hf2a9e8088ced8fdb</text>
</g>
<g >
<title>std::rt::lang_start_internal (4,908 samples, 99.98%)</title><rect x="10.2" y="613" width="1179.8" height="15.0" fill="rgb(226,218,0)" rx="2" ry="2" />
<text  x="13.24" y="623.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="20.6" y="341" width="0.2" height="15.0" fill="rgb(247,121,20)" rx="2" ry="2" />
<text  x="23.58" y="351.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h2dc3237a5a41fd27 (96 samples, 1.96%)</title><rect x="761.2" y="293" width="23.0" height="15.0" fill="rgb(212,9,30)" rx="2" ry="2" />
<text  x="764.17" y="303.5" >c..</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.37%)</title><rect x="1132.3" y="165" width="4.3" height="15.0" fill="rgb(221,40,23)" rx="2" ry="2" />
<text  x="1135.31" y="175.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="1177.7" y="245" width="0.3" height="15.0" fill="rgb(242,41,51)" rx="2" ry="2" />
<text  x="1180.74" y="255.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_char_boundary (69 samples, 1.41%)</title><rect x="726.6" y="293" width="16.5" height="15.0" fill="rgb(212,37,23)" rx="2" ry="2" />
<text  x="729.56" y="303.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.08%)</title><rect x="16.0" y="485" width="1.0" height="15.0" fill="rgb(243,184,38)" rx="2" ry="2" />
<text  x="19.01" y="495.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="533" width="0.2" height="15.0" fill="rgb(241,41,32)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="10.0" y="549" width="0.2" height="15.0" fill="rgb(247,189,47)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 0.12%)</title><rect x="1134.5" y="117" width="1.4" height="15.0" fill="rgb(234,62,24)" rx="2" ry="2" />
<text  x="1137.47" y="127.5" ></text>
</g>
<g >
<title>std::io::BufRead::read_line::_$u7b$$u7b$closure$u7d$$u7d$::hdbb4733f38ba9a1d (92 samples, 1.87%)</title><rect x="26.3" y="437" width="22.2" height="15.0" fill="rgb(248,140,20)" rx="2" ry="2" />
<text  x="29.35" y="447.5" >s..</text>
</g>
<g >
<title>regex::cache::imp::Cached&lt;T&gt;::get_or (23 samples, 0.47%)</title><rect x="1172.9" y="389" width="5.6" height="15.0" fill="rgb(245,150,47)" rx="2" ry="2" />
<text  x="1175.93" y="399.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (20 samples, 0.41%)</title><rect x="1179.9" y="453" width="4.8" height="15.0" fill="rgb(237,58,4)" rx="2" ry="2" />
<text  x="1182.90" y="463.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.06%)</title><rect x="1123.9" y="101" width="0.7" height="15.0" fill="rgb(228,196,4)" rx="2" ry="2" />
<text  x="1126.90" y="111.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h942083efb006d2c6 (31 samples, 0.63%)</title><rect x="1160.0" y="325" width="7.4" height="15.0" fill="rgb(233,209,21)" rx="2" ry="2" />
<text  x="1162.95" y="335.5" ></text>
</g>
<g >
<title>regex::re_trait::Matches&lt;R&gt;::text (15 samples, 0.31%)</title><rect x="746.5" y="341" width="3.6" height="15.0" fill="rgb(215,37,40)" rx="2" ry="2" />
<text  x="749.51" y="351.5" ></text>
</g>
<g >
<title>_start (4,908 samples, 99.98%)</title><rect x="10.2" y="661" width="1179.8" height="15.0" fill="rgb(247,10,47)" rx="2" ry="2" />
<text  x="13.24" y="671.5" >_start</text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.37%)</title><rect x="1132.3" y="181" width="4.3" height="15.0" fill="rgb(222,90,12)" rx="2" ry="2" />
<text  x="1135.31" y="191.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (9 samples, 0.18%)</title><rect x="744.3" y="325" width="2.2" height="15.0" fill="rgb(210,57,26)" rx="2" ry="2" />
<text  x="747.35" y="335.5" ></text>
</g>
<g >
<title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::find_at (1,679 samples, 34.20%)</title><rect x="283.8" y="293" width="403.6" height="15.0" fill="rgb(230,186,49)" rx="2" ry="2" />
<text  x="286.79" y="303.5" >&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExp..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(220,187,28)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (161 samples, 3.28%)</title><rect x="707.8" y="341" width="38.7" height="15.0" fill="rgb(211,54,0)" rx="2" ry="2" />
<text  x="710.81" y="351.5" >cor..</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9 samples, 0.18%)</title><rect x="1134.5" y="149" width="2.1" height="15.0" fill="rgb(216,225,31)" rx="2" ry="2" />
<text  x="1137.47" y="159.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (5 samples, 0.10%)</title><rect x="1158.8" y="245" width="1.2" height="15.0" fill="rgb(211,5,19)" rx="2" ry="2" />
<text  x="1161.75" y="255.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.06%)</title><rect x="1173.7" y="341" width="0.7" height="15.0" fill="rgb(253,204,21)" rx="2" ry="2" />
<text  x="1176.65" y="351.5" ></text>
</g>
<g >
<title>std::thread::local::fast::Key&lt;T&gt;::get (3 samples, 0.06%)</title><rect x="1177.3" y="277" width="0.7" height="15.0" fill="rgb(211,111,54)" rx="2" ry="2" />
<text  x="1180.26" y="287.5" ></text>
</g>
<g >
<title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.02%)</title><rect x="1158.0" y="213" width="0.3" height="15.0" fill="rgb(224,66,44)" rx="2" ry="2" />
<text  x="1161.03" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(216,146,31)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.37%)</title><rect x="1132.3" y="197" width="4.3" height="15.0" fill="rgb(251,160,12)" rx="2" ry="2" />
<text  x="1135.31" y="207.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.65%)</title><rect x="409.3" y="229" width="7.7" height="15.0" fill="rgb(212,213,52)" rx="2" ry="2" />
<text  x="412.26" y="239.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (15 samples, 0.31%)</title><rect x="1036.2" y="85" width="3.6" height="15.0" fill="rgb(226,121,3)" rx="2" ry="2" />
<text  x="1039.16" y="95.5" ></text>
</g>
<g >
<title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.02%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(218,92,5)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (4,908 samples, 99.98%)</title><rect x="10.2" y="549" width="1179.8" height="15.0" fill="rgb(241,41,22)" rx="2" ry="2" />
<text  x="13.24" y="559.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>_int_realloc (1 samples, 0.02%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(252,12,20)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.04%)</title><rect x="1181.1" y="389" width="0.5" height="15.0" fill="rgb(226,68,0)" rx="2" ry="2" />
<text  x="1184.11" y="399.5" ></text>
</g>
<g >
<title>std::memchr::memchr (61 samples, 1.24%)</title><rect x="33.8" y="405" width="14.7" height="15.0" fill="rgb(248,173,37)" rx="2" ry="2" />
<text  x="36.80" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (92 samples, 1.87%)</title><rect x="1063.1" y="133" width="22.1" height="15.0" fill="rgb(211,206,12)" rx="2" ry="2" />
<text  x="1066.08" y="143.5" >_..</text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.22%)</title><rect x="1040.0" y="101" width="2.7" height="15.0" fill="rgb(226,149,34)" rx="2" ry="2" />
<text  x="1043.01" y="111.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.04%)</title><rect x="20.3" y="389" width="0.5" height="15.0" fill="rgb(206,188,20)" rx="2" ry="2" />
<text  x="23.34" y="399.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.14%)</title><rect x="1188.1" y="389" width="1.7" height="15.0" fill="rgb(218,13,32)" rx="2" ry="2" />
<text  x="1191.08" y="399.5" ></text>
</g>
<g >
<title>std::panicking::try (4,908 samples, 99.98%)</title><rect x="10.2" y="581" width="1179.8" height="15.0" fill="rgb(252,179,17)" rx="2" ry="2" />
<text  x="13.24" y="591.5" >std::panicking::try</text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (3 samples, 0.06%)</title><rect x="27.1" y="341" width="0.7" height="15.0" fill="rgb(234,21,30)" rx="2" ry="2" />
<text  x="30.07" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.51%)</title><rect x="27.8" y="389" width="6.0" height="15.0" fill="rgb(228,205,2)" rx="2" ry="2" />
<text  x="30.79" y="399.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate_arg_values (1 samples, 0.02%)</title><rect x="10.0" y="597" width="0.2" height="15.0" fill="rgb(252,220,22)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::_find (730 samples, 14.87%)</title><rect x="496.8" y="229" width="175.4" height="15.0" fill="rgb(245,226,2)" rx="2" ry="2" />
<text  x="499.76" y="239.5" >regex::literal::imp::S..</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (11 samples, 0.22%)</title><rect x="1040.0" y="85" width="2.7" height="15.0" fill="rgb(249,144,51)" rx="2" ry="2" />
<text  x="1043.01" y="95.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (2 samples, 0.04%)</title><rect x="32.8" y="309" width="0.5" height="15.0" fill="rgb(215,60,35)" rx="2" ry="2" />
<text  x="35.84" y="319.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold::ok::_$u7b$$u7b$closure$u7d$$u7d$::he3e03b12b8e2928f (1,736 samples, 35.36%)</title><rect x="750.1" y="357" width="417.3" height="15.0" fill="rgb(231,71,37)" rx="2" ry="2" />
<text  x="753.11" y="367.5" >core::iter::traits::iterator::Iterator::fold::ok::_$u7b$..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.18%)</title><rect x="1134.5" y="133" width="2.1" height="15.0" fill="rgb(205,176,29)" rx="2" ry="2" />
<text  x="1137.47" y="143.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="1189.5" y="341" width="0.3" height="15.0" fill="rgb(254,8,22)" rx="2" ry="2" />
<text  x="1192.52" y="351.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::find_literals::_$u7b$$u7b$closure$u7d$$u7d$::hb03de0d58239394b (120 samples, 2.44%)</title><rect x="380.4" y="245" width="28.9" height="15.0" fill="rgb(251,175,47)" rx="2" ry="2" />
<text  x="383.42" y="255.5" >re..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1189.3" y="357" width="0.2" height="15.0" fill="rgb(253,110,32)" rx="2" ry="2" />
<text  x="1192.28" y="367.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="517" width="0.2" height="15.0" fill="rgb(249,80,6)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (3 samples, 0.06%)</title><rect x="73.2" y="373" width="0.7" height="15.0" fill="rgb(217,32,4)" rx="2" ry="2" />
<text  x="76.22" y="383.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice (4,673 samples, 95.19%)</title><rect x="55.2" y="469" width="1123.3" height="15.0" fill="rgb(233,103,35)" rx="2" ry="2" />
<text  x="58.19" y="479.5" >choose::choice::Choice::get_choice_slice</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (15 samples, 0.31%)</title><rect x="913.3" y="213" width="3.6" height="15.0" fill="rgb(243,5,12)" rx="2" ry="2" />
<text  x="916.33" y="223.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (12 samples, 0.24%)</title><rect x="1187.1" y="437" width="2.9" height="15.0" fill="rgb(217,20,39)" rx="2" ry="2" />
<text  x="1190.12" y="447.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::parse (1 samples, 0.02%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(245,131,45)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (20 samples, 0.41%)</title><rect x="28.7" y="373" width="4.9" height="15.0" fill="rgb(236,109,23)" rx="2" ry="2" />
<text  x="31.75" y="383.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.14%)</title><rect x="1188.1" y="421" width="1.7" height="15.0" fill="rgb(234,49,48)" rx="2" ry="2" />
<text  x="1191.08" y="431.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each::call::_$u7b$$u7b$closure$u7d$$u7d$::h77213921d4afd5db (1,558 samples, 31.74%)</title><rect x="785.4" y="293" width="374.6" height="15.0" fill="rgb(240,104,7)" rx="2" ry="2" />
<text  x="788.45" y="303.5" >core::iter::traits::iterator::Iterator::for_each::..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="1188.1" y="357" width="0.5" height="15.0" fill="rgb(209,219,22)" rx="2" ry="2" />
<text  x="1191.08" y="367.5" ></text>
</g>
<g >
<title>__rdl_alloc (4 samples, 0.08%)</title><rect x="31.9" y="293" width="0.9" height="15.0" fill="rgb(213,151,2)" rx="2" ry="2" />
<text  x="34.87" y="303.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (299 samples, 6.09%)</title><rect x="1052.7" y="149" width="71.9" height="15.0" fill="rgb(232,80,19)" rx="2" ry="2" />
<text  x="1055.75" y="159.5" >&lt;alloc::..</text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(235,173,13)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>__GI___read (3 samples, 0.06%)</title><rect x="27.1" y="325" width="0.7" height="15.0" fill="rgb(212,193,18)" rx="2" ry="2" />
<text  x="30.07" y="335.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::is_empty (32 samples, 0.65%)</title><rect x="1124.6" y="197" width="7.7" height="15.0" fill="rgb(241,188,46)" rx="2" ry="2" />
<text  x="1127.62" y="207.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (20 samples, 0.41%)</title><rect x="1179.9" y="485" width="4.8" height="15.0" fill="rgb(216,35,29)" rx="2" ry="2" />
<text  x="1182.90" y="495.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (181 samples, 3.69%)</title><rect x="434.0" y="245" width="43.5" height="15.0" fill="rgb(228,182,38)" rx="2" ry="2" />
<text  x="437.02" y="255.5" >core..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.04%)</title><rect x="1158.3" y="229" width="0.5" height="15.0" fill="rgb(226,216,43)" rx="2" ry="2" />
<text  x="1161.27" y="239.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (8 samples, 0.16%)</title><rect x="744.6" y="309" width="1.9" height="15.0" fill="rgb(221,57,21)" rx="2" ry="2" />
<text  x="747.59" y="319.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_fold::_$u7b$$u7b$closure$u7d$$u7d$::h018f9ce38a33d8e9 (1,736 samples, 35.36%)</title><rect x="750.1" y="341" width="417.3" height="15.0" fill="rgb(230,61,7)" rx="2" ry="2" />
<text  x="753.11" y="351.5" >core::iter::adapters::filter_fold::_$u7b$$u7b$closure$u7..</text>
</g>
<g >
<title>regex::re_unicode::Regex::split (46 samples, 0.94%)</title><rect x="1167.4" y="453" width="11.1" height="15.0" fill="rgb(227,164,48)" rx="2" ry="2" />
<text  x="1170.40" y="463.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold (4,552 samples, 92.73%)</title><rect x="73.2" y="389" width="1094.2" height="15.0" fill="rgb(212,151,41)" rx="2" ry="2" />
<text  x="76.22" y="399.5" >core::iter::traits::iterator::Iterator::fold</text>
</g>
<g >
<title>__GI___libc_free (4 samples, 0.08%)</title><rect x="1180.1" y="405" width="1.0" height="15.0" fill="rgb(216,200,48)" rx="2" ry="2" />
<text  x="1183.14" y="415.5" ></text>
</g>
<g >
<title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2 samples, 0.04%)</title><rect x="18.9" y="453" width="0.5" height="15.0" fill="rgb(218,208,9)" rx="2" ry="2" />
<text  x="21.89" y="463.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="20.6" y="357" width="0.2" height="15.0" fill="rgb(212,212,19)" rx="2" ry="2" />
<text  x="23.58" y="367.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="1189.5" y="293" width="0.3" height="15.0" fill="rgb(228,63,47)" rx="2" ry="2" />
<text  x="1192.52" y="303.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (2 samples, 0.04%)</title><rect x="1178.0" y="309" width="0.5" height="15.0" fill="rgb(238,70,33)" rx="2" ry="2" />
<text  x="1180.98" y="319.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.10%)</title><rect x="1176.8" y="309" width="1.2" height="15.0" fill="rgb(242,74,14)" rx="2" ry="2" />
<text  x="1179.78" y="319.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next (2,321 samples, 47.28%)</title><rect x="149.9" y="341" width="557.9" height="15.0" fill="rgb(246,172,53)" rx="2" ry="2" />
<text  x="152.90" y="351.5" >&lt;regex::re_unicode::Matches as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>choose::main (4,908 samples, 99.98%)</title><rect x="10.2" y="501" width="1179.8" height="15.0" fill="rgb(254,219,8)" rx="2" ry="2" />
<text  x="13.24" y="511.5" >choose::main</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.06%)</title><rect x="1188.6" y="357" width="0.7" height="15.0" fill="rgb(208,108,36)" rx="2" ry="2" />
<text  x="1191.56" y="367.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find (1,062 samples, 21.63%)</title><rect x="417.0" y="261" width="255.2" height="15.0" fill="rgb(212,8,11)" rx="2" ry="2" />
<text  x="419.95" y="271.5" >regex::literal::imp::LiteralSearch..</text>
</g>
<g >
<title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="20.8" y="437" width="0.3" height="15.0" fill="rgb(230,222,51)" rx="2" ry="2" />
<text  x="23.82" y="447.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (15 samples, 0.31%)</title><rect x="1036.2" y="101" width="3.6" height="15.0" fill="rgb(235,144,20)" rx="2" ry="2" />
<text  x="1039.16" y="111.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="15.8" y="437" width="0.2" height="15.0" fill="rgb(240,153,47)" rx="2" ry="2" />
<text  x="18.77" y="447.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (3 samples, 0.06%)</title><rect x="1123.9" y="133" width="0.7" height="15.0" fill="rgb(235,219,29)" rx="2" ry="2" />
<text  x="1126.90" y="143.5" ></text>
</g>
<g >
<title>std::io::BufRead::read_line (121 samples, 2.46%)</title><rect x="19.4" y="469" width="29.1" height="15.0" fill="rgb(241,70,52)" rx="2" ry="2" />
<text  x="22.37" y="479.5" >st..</text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (13 samples, 0.26%)</title><rect x="1186.9" y="453" width="3.1" height="15.0" fill="rgb(220,25,39)" rx="2" ry="2" />
<text  x="1189.88" y="463.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::capacity (2 samples, 0.04%)</title><rect x="1034.0" y="181" width="0.5" height="15.0" fill="rgb(254,89,25)" rx="2" ry="2" />
<text  x="1037.00" y="191.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (1,459 samples, 29.72%)</title><rect x="809.2" y="261" width="350.8" height="15.0" fill="rgb(246,149,44)" rx="2" ry="2" />
<text  x="812.25" y="271.5" >std::io::Write::write_fmt</text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (2 samples, 0.04%)</title><rect x="32.8" y="325" width="0.5" height="15.0" fill="rgb(232,81,33)" rx="2" ry="2" />
<text  x="35.84" y="335.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.22%)</title><rect x="1040.0" y="117" width="2.7" height="15.0" fill="rgb(205,62,33)" rx="2" ry="2" />
<text  x="1043.01" y="127.5" ></text>
</g>
<g >
<title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(232,149,7)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (16 samples, 0.33%)</title><rect x="1036.2" y="117" width="3.8" height="15.0" fill="rgb(216,14,19)" rx="2" ry="2" />
<text  x="1039.16" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (299 samples, 6.09%)</title><rect x="1052.7" y="165" width="71.9" height="15.0" fill="rgb(226,35,36)" rx="2" ry="2" />
<text  x="1055.75" y="175.5" >alloc::v..</text>
</g>
<g >
<title>alloc::string::String::pop (1 samples, 0.02%)</title><rect x="18.7" y="469" width="0.2" height="15.0" fill="rgb(222,213,14)" rx="2" ry="2" />
<text  x="21.65" y="479.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::is_empty (31 samples, 0.63%)</title><rect x="1160.0" y="309" width="7.4" height="15.0" fill="rgb(228,22,54)" rx="2" ry="2" />
<text  x="1162.95" y="319.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.10%)</title><rect x="743.1" y="277" width="1.2" height="15.0" fill="rgb(247,93,31)" rx="2" ry="2" />
<text  x="746.14" y="287.5" ></text>
</g>
<g >
<title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (131 samples, 2.67%)</title><rect x="17.0" y="485" width="31.5" height="15.0" fill="rgb(215,95,15)" rx="2" ry="2" />
<text  x="19.97" y="495.5" >&lt;s..</text>
</g>
<g >
<title>std::io::append_to_string (121 samples, 2.46%)</title><rect x="19.4" y="453" width="29.1" height="15.0" fill="rgb(247,107,17)" rx="2" ry="2" />
<text  x="22.37" y="463.5" >st..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.02%)</title><rect x="1158.0" y="229" width="0.3" height="15.0" fill="rgb(219,163,39)" rx="2" ry="2" />
<text  x="1161.03" y="239.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (120 samples, 2.44%)</title><rect x="380.4" y="261" width="28.9" height="15.0" fill="rgb(251,54,4)" rx="2" ry="2" />
<text  x="383.42" y="271.5" >co..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="18.7" y="453" width="0.2" height="15.0" fill="rgb(253,4,21)" rx="2" ry="2" />
<text  x="21.65" y="463.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (3 samples, 0.06%)</title><rect x="1135.9" y="117" width="0.7" height="15.0" fill="rgb(223,197,20)" rx="2" ry="2" />
<text  x="1138.92" y="127.5" ></text>
</g>
<g >
<title>regex::literal::imp::SingleByteSet::find (810 samples, 16.50%)</title><rect x="477.5" y="245" width="194.7" height="15.0" fill="rgb(230,221,20)" rx="2" ry="2" />
<text  x="480.53" y="255.5" >regex::literal::imp::Sing..</text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 1.59%)</title><rect x="478.0" y="229" width="18.8" height="15.0" fill="rgb(205,157,42)" rx="2" ry="2" />
<text  x="481.01" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,257 samples, 45.98%)</title><rect x="156.6" y="325" width="542.6" height="15.0" fill="rgb(237,77,14)" rx="2" ry="2" />
<text  x="159.63" y="335.5" >&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::n..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.0" y="661" width="0.2" height="15.0" fill="rgb(208,127,53)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.06%)</title><rect x="1123.9" y="85" width="0.7" height="15.0" fill="rgb(229,144,23)" rx="2" ry="2" />
<text  x="1126.90" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="15.8" y="453" width="0.2" height="15.0" fill="rgb(216,122,4)" rx="2" ry="2" />
<text  x="18.77" y="463.5" ></text>
</g>
<g >
<title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (46 samples, 0.94%)</title><rect x="750.1" y="309" width="11.1" height="15.0" fill="rgb(249,221,13)" rx="2" ry="2" />
<text  x="753.11" y="319.5" ></text>
</g>
<g >
<title>_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::enumerate::_$u7b$$u7b$closure$u7d$$u7d$::hb698d3380d8426f7 (1,705 samples, 34.73%)</title><rect x="750.1" y="325" width="409.9" height="15.0" fill="rgb(250,121,51)" rx="2" ry="2" />
<text  x="753.11" y="335.5" >_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u2..</text>
</g>
<g >
<title>regex_syntax::ast::visitor::HeapVisitor::visit (1 samples, 0.02%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(207,69,10)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>core::cmp::max (1 samples, 0.02%)</title><rect x="33.3" y="309" width="0.3" height="15.0" fill="rgb(241,108,32)" rx="2" ry="2" />
<text  x="36.32" y="319.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (400 samples, 8.15%)</title><rect x="1028.5" y="197" width="96.1" height="15.0" fill="rgb(216,140,51)" rx="2" ry="2" />
<text  x="1031.47" y="207.5" >&lt;std::io::b..</text>
</g>
<g >
<title>std::sys::unix::fs::File::read (3 samples, 0.06%)</title><rect x="27.1" y="357" width="0.7" height="15.0" fill="rgb(212,204,52)" rx="2" ry="2" />
<text  x="30.07" y="367.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (152 samples, 3.10%)</title><rect x="707.8" y="325" width="36.5" height="15.0" fill="rgb(215,3,26)" rx="2" ry="2" />
<text  x="710.81" y="335.5" >cor..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (84 samples, 1.71%)</title><rect x="1089.5" y="117" width="20.2" height="15.0" fill="rgb(205,32,20)" rx="2" ry="2" />
<text  x="1092.52" y="127.5" ></text>
</g>
<g >
<title>choose::config::Opt::augment_clap::_$u7b$$u7b$closure$u7d$$u7d$::hd02345ce6c3e5fb0 (1 samples, 0.02%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(254,63,19)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.02%)</title><rect x="1109.7" y="133" width="0.3" height="15.0" fill="rgb(238,34,26)" rx="2" ry="2" />
<text  x="1112.71" y="143.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_v1 (6 samples, 0.12%)</title><rect x="1178.5" y="485" width="1.4" height="15.0" fill="rgb(210,6,29)" rx="2" ry="2" />
<text  x="1181.46" y="495.5" ></text>
</g>
<g >
<title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1177.7" y="261" width="0.3" height="15.0" fill="rgb(226,200,15)" rx="2" ry="2" />
<text  x="1180.74" y="271.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (14 samples, 0.29%)</title><rect x="1120.5" y="117" width="3.4" height="15.0" fill="rgb(233,158,43)" rx="2" ry="2" />
<text  x="1123.53" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::realloc (1 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(245,76,30)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="1042.7" y="85" width="0.2" height="15.0" fill="rgb(235,71,52)" rx="2" ry="2" />
<text  x="1045.65" y="95.5" ></text>
</g>
<g >
<title>std::io::read_until (91 samples, 1.85%)</title><rect x="26.6" y="421" width="21.9" height="15.0" fill="rgb(254,184,13)" rx="2" ry="2" />
<text  x="29.59" y="431.5" >s..</text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (28 samples, 0.57%)</title><rect x="1036.2" y="133" width="6.7" height="15.0" fill="rgb(210,219,34)" rx="2" ry="2" />
<text  x="1039.16" y="143.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc (20 samples, 0.41%)</title><rect x="1179.9" y="421" width="4.8" height="15.0" fill="rgb(254,4,20)" rx="2" ry="2" />
<text  x="1182.90" y="431.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Read for alloc::boxed::Box&lt;R&gt;&gt;::read (3 samples, 0.06%)</title><rect x="27.1" y="389" width="0.7" height="15.0" fill="rgb(213,77,8)" rx="2" ry="2" />
<text  x="30.07" y="399.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.45%)</title><rect x="678.7" y="261" width="5.3" height="15.0" fill="rgb(228,2,7)" rx="2" ry="2" />
<text  x="681.72" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.06%)</title><rect x="27.1" y="405" width="0.7" height="15.0" fill="rgb(244,199,4)" rx="2" ry="2" />
<text  x="30.07" y="415.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (2,757 samples, 56.16%)</title><rect x="87.4" y="357" width="662.7" height="15.0" fill="rgb(216,53,10)" rx="2" ry="2" />
<text  x="90.40" y="367.5" >&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>&lt;&amp;T as core::fmt::Display&gt;::fmt (16 samples, 0.33%)</title><rect x="909.5" y="229" width="3.8" height="15.0" fill="rgb(222,220,52)" rx="2" ry="2" />
<text  x="912.48" y="239.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.04%)</title><rect x="20.3" y="405" width="0.5" height="15.0" fill="rgb(213,61,5)" rx="2" ry="2" />
<text  x="23.34" y="415.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (20 samples, 0.41%)</title><rect x="1179.9" y="437" width="4.8" height="15.0" fill="rgb(220,100,29)" rx="2" ry="2" />
<text  x="1182.90" y="447.5" ></text>
</g>
<g >
<title>__memchr_avx2 (61 samples, 1.24%)</title><rect x="33.8" y="373" width="14.7" height="15.0" fill="rgb(215,91,29)" rx="2" ry="2" />
<text  x="36.80" y="383.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (11 samples, 0.22%)</title><rect x="1040.0" y="69" width="2.7" height="15.0" fill="rgb(220,80,4)" rx="2" ry="2" />
<text  x="1043.01" y="79.5" ></text>
</g>
<g >
<title>regex::literal::imp::LiteralSearcher::find::_$u7b$$u7b$closure$u7d$$u7d$::hdb1676866af22238 (181 samples, 3.69%)</title><rect x="434.0" y="229" width="43.5" height="15.0" fill="rgb(240,97,5)" rx="2" ry="2" />
<text  x="437.02" y="239.5" >rege..</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (1 samples, 0.02%)</title><rect x="1042.7" y="117" width="0.2" height="15.0" fill="rgb(238,142,15)" rx="2" ry="2" />
<text  x="1045.65" y="127.5" ></text>
</g>
<g >
<title>main (4,908 samples, 99.98%)</title><rect x="10.2" y="629" width="1179.8" height="15.0" fill="rgb(208,166,18)" rx="2" ry="2" />
<text  x="13.24" y="639.5" >main</text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::unwrap (5 samples, 0.10%)</title><rect x="808.0" y="261" width="1.2" height="15.0" fill="rgb(231,8,1)" rx="2" ry="2" />
<text  x="811.04" y="271.5" ></text>
</g>
<g >
<title>core::fmt::write (18 samples, 0.37%)</title><rect x="1185.7" y="469" width="4.3" height="15.0" fill="rgb(248,109,15)" rx="2" ry="2" />
<text  x="1188.67" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="33.1" y="261" width="0.2" height="15.0" fill="rgb(241,95,48)" rx="2" ry="2" />
<text  x="36.08" y="271.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.65%)</title><rect x="409.3" y="245" width="7.7" height="15.0" fill="rgb(223,32,12)" rx="2" ry="2" />
<text  x="412.26" y="255.5" ></text>
</g>
<g >
<title>regex::exec::ExecNoSync::is_anchor_end_match (63 samples, 1.28%)</title><rect x="672.2" y="277" width="15.2" height="15.0" fill="rgb(207,123,28)" rx="2" ry="2" />
<text  x="675.23" y="287.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.02%)</title><rect x="1158.0" y="197" width="0.3" height="15.0" fill="rgb(227,145,26)" rx="2" ry="2" />
<text  x="1161.03" y="207.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (5 samples, 0.10%)</title><rect x="784.2" y="293" width="1.2" height="15.0" fill="rgb(224,164,37)" rx="2" ry="2" />
<text  x="787.25" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (16 samples, 0.33%)</title><rect x="29.7" y="341" width="3.9" height="15.0" fill="rgb(241,201,6)" rx="2" ry="2" />
<text  x="32.71" y="351.5" ></text>
</g>
<g >
<title>regex::exec::Exec::searcher_str (23 samples, 0.47%)</title><rect x="1172.9" y="421" width="5.6" height="15.0" fill="rgb(230,45,53)" rx="2" ry="2" />
<text  x="1175.93" y="431.5" ></text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.02%)</title><rect x="1181.6" y="405" width="0.2" height="15.0" fill="rgb(253,110,35)" rx="2" ry="2" />
<text  x="1184.59" y="415.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="416.7" y="181" width="0.3" height="15.0" fill="rgb(245,151,12)" rx="2" ry="2" />
<text  x="419.71" y="191.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="33.6" y="373" width="0.2" height="15.0" fill="rgb(214,207,51)" rx="2" ry="2" />
<text  x="36.56" y="383.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.61%)</title><rect x="409.5" y="181" width="7.2" height="15.0" fill="rgb(218,109,43)" rx="2" ry="2" />
<text  x="412.50" y="191.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (21 samples, 0.43%)</title><rect x="1104.7" y="101" width="5.0" height="15.0" fill="rgb(237,14,34)" rx="2" ry="2" />
<text  x="1107.67" y="111.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (29 samples, 0.59%)</title><rect x="1035.9" y="149" width="7.0" height="15.0" fill="rgb(249,61,53)" rx="2" ry="2" />
<text  x="1038.92" y="159.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.04%)</title><rect x="1158.3" y="213" width="0.5" height="15.0" fill="rgb(253,139,25)" rx="2" ry="2" />
<text  x="1161.27" y="223.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (29 samples, 0.59%)</title><rect x="1035.9" y="181" width="7.0" height="15.0" fill="rgb(246,145,11)" rx="2" ry="2" />
<text  x="1038.92" y="191.5" ></text>
</g>
<g >
<title>regex_syntax::parser::Parser::parse (1 samples, 0.02%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(215,131,6)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>core::str::run_utf8_validation (17 samples, 0.35%)</title><rect x="22.3" y="421" width="4.0" height="15.0" fill="rgb(239,167,13)" rx="2" ry="2" />
<text  x="25.26" y="431.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (87 samples, 1.77%)</title><rect x="590.7" y="181" width="21.0" height="15.0" fill="rgb(232,84,9)" rx="2" ry="2" />
<text  x="593.75" y="191.5" ></text>
</g>
<g >
<title>choose (4,909 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(238,112,39)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >choose</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="1189.5" y="357" width="0.3" height="15.0" fill="rgb(227,224,29)" rx="2" ry="2" />
<text  x="1192.52" y="367.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1042.7" y="69" width="0.2" height="15.0" fill="rgb(238,142,26)" rx="2" ry="2" />
<text  x="1045.65" y="79.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.10%)</title><rect x="743.1" y="261" width="1.2" height="15.0" fill="rgb(238,74,13)" rx="2" ry="2" />
<text  x="746.14" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_write (11 samples, 0.22%)</title><rect x="1040.0" y="37" width="2.7" height="15.0" fill="rgb(232,125,52)" rx="2" ry="2" />
<text  x="1043.01" y="47.5" ></text>
</g>
<g >
<title>regex::exec::Exec::searcher (23 samples, 0.47%)</title><rect x="1172.9" y="405" width="5.6" height="15.0" fill="rgb(220,50,4)" rx="2" ry="2" />
<text  x="1175.93" y="415.5" ></text>
</g>
<g >
<title>choose::choice::Choice::get_choice_slice::_$u7b$$u7b$closure$u7d$$u7d$::h00631d991abd764d (1,558 samples, 31.74%)</title><rect x="785.4" y="277" width="374.6" height="15.0" fill="rgb(253,71,19)" rx="2" ry="2" />
<text  x="788.45" y="287.5" >choose::choice::Choice::get_choice_slice::_$u7b$$u..</text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.96%)</title><rect x="360.7" y="277" width="11.3" height="15.0" fill="rgb(229,155,38)" rx="2" ry="2" />
<text  x="363.71" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="32.8" y="261" width="0.3" height="15.0" fill="rgb(225,152,0)" rx="2" ry="2" />
<text  x="35.84" y="271.5" ></text>
</g>
<g >
<title>__rdl_dealloc (2 samples, 0.04%)</title><rect x="1181.1" y="405" width="0.5" height="15.0" fill="rgb(254,78,21)" rx="2" ry="2" />
<text  x="1184.11" y="415.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.04%)</title><rect x="1188.8" y="341" width="0.5" height="15.0" fill="rgb(254,141,0)" rx="2" ry="2" />
<text  x="1191.80" y="351.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (89 samples, 1.81%)</title><rect x="590.3" y="213" width="21.4" height="15.0" fill="rgb(220,29,44)" rx="2" ry="2" />
<text  x="593.26" y="223.5" >&lt;..</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="20.6" y="373" width="0.2" height="15.0" fill="rgb(223,150,15)" rx="2" ry="2" />
<text  x="23.58" y="383.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::ends_with (2 samples, 0.04%)</title><rect x="18.9" y="469" width="0.5" height="15.0" fill="rgb(214,211,7)" rx="2" ry="2" />
<text  x="21.89" y="479.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each (4,619 samples, 94.09%)</title><rect x="57.1" y="453" width="1110.3" height="15.0" fill="rgb(237,73,22)" rx="2" ry="2" />
<text  x="60.11" y="463.5" >core::iter::traits::iterator::Iterator::for_each</text>
</g>
<g >
<title>std::sys::unix::memchr::memchr (61 samples, 1.24%)</title><rect x="33.8" y="389" width="14.7" height="15.0" fill="rgb(249,104,31)" rx="2" ry="2" />
<text  x="36.80" y="399.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.71%)</title><rect x="372.0" y="261" width="8.4" height="15.0" fill="rgb(227,225,8)" rx="2" ry="2" />
<text  x="375.00" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_write (15 samples, 0.31%)</title><rect x="1036.2" y="53" width="3.6" height="15.0" fill="rgb(213,49,28)" rx="2" ry="2" />
<text  x="1039.16" y="63.5" ></text>
</g>
<g >
<title>alloc::string::String::new (2 samples, 0.04%)</title><rect x="18.2" y="469" width="0.5" height="15.0" fill="rgb(224,29,12)" rx="2" ry="2" />
<text  x="21.17" y="479.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (7 samples, 0.14%)</title><rect x="1188.1" y="405" width="1.7" height="15.0" fill="rgb(235,222,52)" rx="2" ry="2" />
<text  x="1191.08" y="415.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,619 samples, 94.09%)</title><rect x="57.1" y="421" width="1110.3" height="15.0" fill="rgb(215,34,41)" rx="2" ry="2" />
<text  x="60.11" y="431.5" >&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text>
</g>
<g >
<title>core::num::&lt;impl usize&gt;::wrapping_sub (19 samples, 0.39%)</title><rect x="1105.1" y="85" width="4.6" height="15.0" fill="rgb(249,22,45)" rx="2" ry="2" />
<text  x="1108.15" y="95.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,619 samples, 94.09%)</title><rect x="57.1" y="405" width="1110.3" height="15.0" fill="rgb(228,164,1)" rx="2" ry="2" />
<text  x="60.11" y="415.5" >&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (36 samples, 0.73%)</title><rect x="699.2" y="325" width="8.6" height="15.0" fill="rgb(219,219,36)" rx="2" ry="2" />
<text  x="702.15" y="335.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.0" y="565" width="0.2" height="15.0" fill="rgb(251,82,3)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate_matched_args (1 samples, 0.02%)</title><rect x="10.0" y="613" width="0.2" height="15.0" fill="rgb(243,61,47)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_fold::_$u7b$$u7b$closure$u7d$$u7d$::h8e76d1016174585d (1,659 samples, 33.80%)</title><rect x="761.2" y="309" width="398.8" height="15.0" fill="rgb(207,6,51)" rx="2" ry="2" />
<text  x="764.17" y="319.5" >core::iter::adapters::filter_fold::_$u7b$$u7b$closure$..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (25 samples, 0.51%)</title><rect x="27.8" y="405" width="6.0" height="15.0" fill="rgb(227,54,7)" rx="2" ry="2" />
<text  x="30.79" y="415.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (17 samples, 0.35%)</title><rect x="1174.4" y="341" width="4.1" height="15.0" fill="rgb(207,195,44)" rx="2" ry="2" />
<text  x="1177.38" y="351.5" ></text>
</g>
<g >
<title>std::io::append_to_string (1 samples, 0.02%)</title><rect x="26.3" y="421" width="0.3" height="15.0" fill="rgb(230,123,31)" rx="2" ry="2" />
<text  x="29.35" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (2 samples, 0.04%)</title><rect x="32.8" y="293" width="0.5" height="15.0" fill="rgb(236,205,3)" rx="2" ry="2" />
<text  x="35.84" y="303.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.06%)</title><rect x="1123.9" y="69" width="0.7" height="15.0" fill="rgb(228,89,44)" rx="2" ry="2" />
<text  x="1126.90" y="79.5" ></text>
</g>
<g >
<title>std::io::stdio::handle_ebadf (1 samples, 0.02%)</title><rect x="1039.8" y="101" width="0.2" height="15.0" fill="rgb(221,201,7)" rx="2" ry="2" />
<text  x="1042.77" y="111.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.31%)</title><rect x="913.3" y="229" width="3.6" height="15.0" fill="rgb(240,152,11)" rx="2" ry="2" />
<text  x="916.33" y="239.5" ></text>
</g>
<g >
<title>thread_local::CachedThreadLocal&lt;T&gt;::get_or (23 samples, 0.47%)</title><rect x="1172.9" y="373" width="5.6" height="15.0" fill="rgb(222,215,51)" rx="2" ry="2" />
<text  x="1175.93" y="383.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="684.0" y="261" width="0.3" height="15.0" fill="rgb(209,127,33)" rx="2" ry="2" />
<text  x="687.01" y="271.5" ></text>
</g>
</g>
</svg>
