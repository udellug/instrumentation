<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.4" y="389" width="0.2" height="15.0" fill="rgb(222,208,28)" rx="2" ry="2" />
<text  x="13.42" y="399.5" ></text>
</g>
<g >
<title>regex::compile::CompileClass::c_utf8_seq (1 samples, 0.02%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(217,167,43)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.4" y="293" width="0.2" height="15.0" fill="rgb(208,92,40)" rx="2" ry="2" />
<text  x="13.42" y="303.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="998.7" y="229" width="0.2" height="15.0" fill="rgb(214,101,16)" rx="2" ry="2" />
<text  x="1001.73" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="20.1" y="229" width="0.4" height="15.0" fill="rgb(251,27,26)" rx="2" ry="2" />
<text  x="23.09" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_free (2 samples, 0.04%)</title><rect x="34.8" y="261" width="0.4" height="15.0" fill="rgb(208,209,4)" rx="2" ry="2" />
<text  x="37.80" y="271.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.27%)</title><rect x="21.6" y="229" width="3.1" height="15.0" fill="rgb(209,86,24)" rx="2" ry="2" />
<text  x="24.56" y="239.5" ></text>
</g>
<g >
<title>__rdl_alloc (10 samples, 0.18%)</title><rect x="944.9" y="229" width="2.1" height="15.0" fill="rgb(214,219,48)" rx="2" ry="2" />
<text  x="947.92" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (20 samples, 0.36%)</title><rect x="1171.7" y="133" width="4.2" height="15.0" fill="rgb(246,131,26)" rx="2" ry="2" />
<text  x="1174.71" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.04%)</title><rect x="1175.5" y="101" width="0.4" height="15.0" fill="rgb(214,143,43)" rx="2" ry="2" />
<text  x="1178.50" y="111.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="10.2" y="213" width="0.2" height="15.0" fill="rgb(236,12,34)" rx="2" ry="2" />
<text  x="13.21" y="223.5" ></text>
</g>
<g >
<title>core::str::from_utf8 (21 samples, 0.37%)</title><rect x="24.7" y="229" width="4.4" height="15.0" fill="rgb(218,226,16)" rx="2" ry="2" />
<text  x="27.71" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.27%)</title><rect x="1165.4" y="181" width="3.2" height="15.0" fill="rgb(221,10,0)" rx="2" ry="2" />
<text  x="1168.41" y="191.5" ></text>
</g>
<g >
<title>_start (5,609 samples, 99.91%)</title><rect x="11.1" y="437" width="1178.9" height="15.0" fill="rgb(223,8,18)" rx="2" ry="2" />
<text  x="14.05" y="447.5" >_start</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="1123.8" y="213" width="1.3" height="15.0" fill="rgb(232,22,36)" rx="2" ry="2" />
<text  x="1126.79" y="223.5" ></text>
</g>
<g >
<title>std::memchr::memrchr (3 samples, 0.05%)</title><rect x="1175.9" y="133" width="0.6" height="15.0" fill="rgb(206,168,29)" rx="2" ry="2" />
<text  x="1178.92" y="143.5" ></text>
</g>
<g >
<title>__rust_realloc (7 samples, 0.12%)</title><rect x="954.8" y="229" width="1.5" height="15.0" fill="rgb(242,29,35)" rx="2" ry="2" />
<text  x="957.80" y="239.5" ></text>
</g>
<g >
<title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.02%)</title><rect x="10.2" y="261" width="0.2" height="15.0" fill="rgb(234,0,31)" rx="2" ry="2" />
<text  x="13.21" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 1.66%)</title><rect x="15.3" y="261" width="19.5" height="15.0" fill="rgb(235,220,22)" rx="2" ry="2" />
<text  x="18.25" y="271.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (10 samples, 0.18%)</title><rect x="942.8" y="181" width="2.1" height="15.0" fill="rgb(251,78,27)" rx="2" ry="2" />
<text  x="945.82" y="191.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="10.8" y="245" width="0.3" height="15.0" fill="rgb(249,164,10)" rx="2" ry="2" />
<text  x="13.84" y="255.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (2 samples, 0.04%)</title><rect x="10.6" y="341" width="0.5" height="15.0" fill="rgb(217,162,18)" rx="2" ry="2" />
<text  x="13.63" y="351.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.04%)</title><rect x="1175.5" y="69" width="0.4" height="15.0" fill="rgb(236,41,29)" rx="2" ry="2" />
<text  x="1178.50" y="79.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(253,221,36)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (246 samples, 4.38%)</title><rect x="1125.1" y="213" width="51.7" height="15.0" fill="rgb(223,202,51)" rx="2" ry="2" />
<text  x="1128.05" y="223.5" >&lt;std:..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (22 samples, 0.39%)</title><rect x="1160.8" y="181" width="4.6" height="15.0" fill="rgb(238,105,29)" rx="2" ry="2" />
<text  x="1163.78" y="191.5" ></text>
</g>
<g >
<title>_int_realloc (1 samples, 0.02%)</title><rect x="24.3" y="197" width="0.2" height="15.0" fill="rgb(233,62,29)" rx="2" ry="2" />
<text  x="27.29" y="207.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(246,106,16)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::split (58 samples, 1.03%)</title><rect x="1080.9" y="245" width="12.2" height="15.0" fill="rgb(222,115,45)" rx="2" ry="2" />
<text  x="1083.91" y="255.5" ></text>
</g>
<g >
<title>&lt;str as core::fmt::Display&gt;::fmt (7 samples, 0.12%)</title><rect x="1176.8" y="213" width="1.4" height="15.0" fill="rgb(231,93,29)" rx="2" ry="2" />
<text  x="1179.76" y="223.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.2" y="357" width="0.2" height="15.0" fill="rgb(227,13,53)" rx="2" ry="2" />
<text  x="13.21" y="367.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="1189.6" y="197" width="0.2" height="15.0" fill="rgb(251,63,7)" rx="2" ry="2" />
<text  x="1192.58" y="207.5" ></text>
</g>
<g >
<title>regex_syntax::parser::Parser::parse (1 samples, 0.02%)</title><rect x="10.8" y="325" width="0.3" height="15.0" fill="rgb(229,58,47)" rx="2" ry="2" />
<text  x="13.84" y="335.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="1184.1" y="197" width="0.2" height="15.0" fill="rgb(207,209,0)" rx="2" ry="2" />
<text  x="1187.11" y="207.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (5 samples, 0.09%)</title><rect x="1174.4" y="85" width="1.1" height="15.0" fill="rgb(210,173,25)" rx="2" ry="2" />
<text  x="1177.45" y="95.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.6" y="309" width="0.2" height="15.0" fill="rgb(229,23,34)" rx="2" ry="2" />
<text  x="13.63" y="319.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (5 samples, 0.09%)</title><rect x="1174.4" y="101" width="1.1" height="15.0" fill="rgb(247,81,7)" rx="2" ry="2" />
<text  x="1177.45" y="111.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (2 samples, 0.04%)</title><rect x="10.6" y="389" width="0.5" height="15.0" fill="rgb(229,117,17)" rx="2" ry="2" />
<text  x="13.63" y="399.5" ></text>
</g>
<g >
<title>regex_syntax::ast::visitor::visit (1 samples, 0.02%)</title><rect x="10.2" y="277" width="0.2" height="15.0" fill="rgb(209,97,30)" rx="2" ry="2" />
<text  x="13.21" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="10.2" y="229" width="0.2" height="15.0" fill="rgb(211,52,16)" rx="2" ry="2" />
<text  x="13.21" y="239.5" ></text>
</g>
<g >
<title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.02%)</title><rect x="10.2" y="245" width="0.2" height="15.0" fill="rgb(228,89,46)" rx="2" ry="2" />
<text  x="13.21" y="255.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (5,609 samples, 99.91%)</title><rect x="11.1" y="389" width="1178.9" height="15.0" fill="rgb(214,108,29)" rx="2" ry="2" />
<text  x="14.05" y="399.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (12 samples, 0.21%)</title><rect x="1171.9" y="69" width="2.5" height="15.0" fill="rgb(224,120,17)" rx="2" ry="2" />
<text  x="1174.92" y="79.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(235,189,47)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.2" y="325" width="0.2" height="15.0" fill="rgb(227,74,0)" rx="2" ry="2" />
<text  x="13.21" y="335.5" ></text>
</g>
<g >
<title>_int_realloc (340 samples, 6.06%)</title><rect x="873.5" y="213" width="71.4" height="15.0" fill="rgb(206,39,13)" rx="2" ry="2" />
<text  x="876.46" y="223.5" >_int_rea..</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.02%)</title><rect x="10.8" y="213" width="0.3" height="15.0" fill="rgb(252,221,32)" rx="2" ry="2" />
<text  x="13.84" y="223.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.09%)</title><rect x="10.0" y="437" width="1.1" height="15.0" fill="rgb(248,3,50)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>core::str::run_utf8_validation (16 samples, 0.29%)</title><rect x="25.8" y="213" width="3.3" height="15.0" fill="rgb(225,16,52)" rx="2" ry="2" />
<text  x="28.76" y="223.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (5,609 samples, 99.91%)</title><rect x="11.1" y="373" width="1178.9" height="15.0" fill="rgb(234,128,48)" rx="2" ry="2" />
<text  x="14.05" y="383.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="1176.5" y="149" width="0.3" height="15.0" fill="rgb(223,74,30)" rx="2" ry="2" />
<text  x="1179.55" y="159.5" ></text>
</g>
<g >
<title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.02%)</title><rect x="10.8" y="293" width="0.3" height="15.0" fill="rgb(236,185,48)" rx="2" ry="2" />
<text  x="13.84" y="303.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (23 samples, 0.41%)</title><rect x="949.1" y="213" width="4.9" height="15.0" fill="rgb(212,22,43)" rx="2" ry="2" />
<text  x="952.12" y="223.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.02%)</title><rect x="10.6" y="293" width="0.2" height="15.0" fill="rgb(240,118,23)" rx="2" ry="2" />
<text  x="13.63" y="303.5" ></text>
</g>
<g >
<title>__rust_alloc (9 samples, 0.16%)</title><rect x="1077.1" y="229" width="1.9" height="15.0" fill="rgb(226,118,36)" rx="2" ry="2" />
<text  x="1080.13" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (12 samples, 0.21%)</title><rect x="1171.9" y="117" width="2.5" height="15.0" fill="rgb(213,168,31)" rx="2" ry="2" />
<text  x="1174.92" y="127.5" ></text>
</g>
<g >
<title>core::fmt::write (20 samples, 0.36%)</title><rect x="1185.8" y="245" width="4.2" height="15.0" fill="rgb(220,187,14)" rx="2" ry="2" />
<text  x="1188.80" y="255.5" ></text>
</g>
<g >
<title>regex_syntax::parser::Parser::parse (1 samples, 0.02%)</title><rect x="10.2" y="293" width="0.2" height="15.0" fill="rgb(216,12,44)" rx="2" ry="2" />
<text  x="13.21" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (85 samples, 1.51%)</title><rect x="1033.8" y="229" width="17.9" height="15.0" fill="rgb(244,105,42)" rx="2" ry="2" />
<text  x="1036.83" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(230,221,7)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>choose::main (5,609 samples, 99.91%)</title><rect x="11.1" y="277" width="1178.9" height="15.0" fill="rgb(245,34,2)" rx="2" ry="2" />
<text  x="14.05" y="287.5" >choose::main</text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (12 samples, 0.21%)</title><rect x="1171.9" y="85" width="2.5" height="15.0" fill="rgb(241,188,39)" rx="2" ry="2" />
<text  x="1174.92" y="95.5" ></text>
</g>
<g >
<title>__rust_dealloc (5 samples, 0.09%)</title><rect x="967.4" y="245" width="1.1" height="15.0" fill="rgb(234,65,21)" rx="2" ry="2" />
<text  x="970.41" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (24 samples, 0.43%)</title><rect x="1171.7" y="165" width="5.1" height="15.0" fill="rgb(243,70,15)" rx="2" ry="2" />
<text  x="1174.71" y="175.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(243,87,37)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.14%)</title><rect x="35.4" y="261" width="1.7" height="15.0" fill="rgb(230,58,7)" rx="2" ry="2" />
<text  x="38.43" y="271.5" ></text>
</g>
<g >
<title>__memchr_avx2 (23 samples, 0.41%)</title><rect x="29.8" y="213" width="4.8" height="15.0" fill="rgb(234,30,36)" rx="2" ry="2" />
<text  x="32.76" y="223.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="1187.3" y="229" width="0.4" height="15.0" fill="rgb(230,225,11)" rx="2" ry="2" />
<text  x="1190.27" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (416 samples, 7.41%)</title><rect x="857.5" y="229" width="87.4" height="15.0" fill="rgb(231,85,33)" rx="2" ry="2" />
<text  x="860.48" y="239.5" >__GI___lib..</text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.2" y="309" width="0.2" height="15.0" fill="rgb(207,4,13)" rx="2" ry="2" />
<text  x="13.21" y="319.5" ></text>
</g>
<g >
<title>std::sys::unix::cvt (1 samples, 0.02%)</title><rect x="1174.2" y="53" width="0.2" height="15.0" fill="rgb(228,190,27)" rx="2" ry="2" />
<text  x="1177.24" y="63.5" ></text>
</g>
<g >
<title>__rdl_alloc (10 samples, 0.18%)</title><rect x="1075.0" y="229" width="2.1" height="15.0" fill="rgb(225,120,23)" rx="2" ry="2" />
<text  x="1078.03" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memchr (27 samples, 0.48%)</title><rect x="29.1" y="229" width="5.7" height="15.0" fill="rgb(254,69,10)" rx="2" ry="2" />
<text  x="32.13" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_write (5 samples, 0.09%)</title><rect x="1174.4" y="37" width="1.1" height="15.0" fill="rgb(209,46,36)" rx="2" ry="2" />
<text  x="1177.45" y="47.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.4" y="357" width="0.2" height="15.0" fill="rgb(238,134,51)" rx="2" ry="2" />
<text  x="13.42" y="367.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="35.2" y="261" width="0.2" height="15.0" fill="rgb(245,216,34)" rx="2" ry="2" />
<text  x="38.22" y="271.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.4" y="277" width="0.2" height="15.0" fill="rgb(233,219,42)" rx="2" ry="2" />
<text  x="13.42" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (111 samples, 1.98%)</title><rect x="1051.7" y="229" width="23.3" height="15.0" fill="rgb(234,210,19)" rx="2" ry="2" />
<text  x="1054.70" y="239.5" >_..</text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (2 samples, 0.04%)</title><rect x="19.7" y="197" width="0.4" height="15.0" fill="rgb(243,92,47)" rx="2" ry="2" />
<text  x="22.67" y="207.5" ></text>
</g>
<g >
<title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (11 samples, 0.20%)</title><rect x="1187.7" y="229" width="2.3" height="15.0" fill="rgb(253,101,36)" rx="2" ry="2" />
<text  x="1190.69" y="239.5" ></text>
</g>
<g >
<title>__rust_maybe_catch_panic (5,609 samples, 99.91%)</title><rect x="11.1" y="341" width="1178.9" height="15.0" fill="rgb(217,15,30)" rx="2" ry="2" />
<text  x="14.05" y="351.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>&lt;regex::re_unicode::Regex as core::str::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="10.2" y="341" width="0.2" height="15.0" fill="rgb(249,56,15)" rx="2" ry="2" />
<text  x="13.21" y="351.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Regex as core::str::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(218,188,2)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_class (1 samples, 0.02%)</title><rect x="10.6" y="277" width="0.2" height="15.0" fill="rgb(209,24,2)" rx="2" ry="2" />
<text  x="13.63" y="287.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate_matched_args (1 samples, 0.02%)</title><rect x="10.2" y="389" width="0.2" height="15.0" fill="rgb(223,65,4)" rx="2" ry="2" />
<text  x="13.21" y="399.5" ></text>
</g>
<g >
<title>__rdl_dealloc (6 samples, 0.11%)</title><rect x="966.1" y="245" width="1.3" height="15.0" fill="rgb(254,74,44)" rx="2" ry="2" />
<text  x="969.15" y="255.5" ></text>
</g>
<g >
<title>_int_free (88 samples, 1.57%)</title><rect x="901.6" y="197" width="18.5" height="15.0" fill="rgb(254,68,19)" rx="2" ry="2" />
<text  x="904.62" y="207.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (8 samples, 0.14%)</title><rect x="1122.1" y="213" width="1.7" height="15.0" fill="rgb(207,159,35)" rx="2" ry="2" />
<text  x="1125.11" y="223.5" ></text>
</g>
<g >
<title>regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (1 samples, 0.02%)</title><rect x="10.8" y="277" width="0.3" height="15.0" fill="rgb(252,21,30)" rx="2" ry="2" />
<text  x="13.84" y="287.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.4" y="325" width="0.2" height="15.0" fill="rgb(206,120,8)" rx="2" ry="2" />
<text  x="13.42" y="335.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate_matched_args (1 samples, 0.02%)</title><rect x="10.4" y="421" width="0.2" height="15.0" fill="rgb(243,133,21)" rx="2" ry="2" />
<text  x="13.42" y="431.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (2 samples, 0.04%)</title><rect x="1175.5" y="117" width="0.4" height="15.0" fill="rgb(241,225,5)" rx="2" ry="2" />
<text  x="1178.50" y="127.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(218,160,13)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>clap::app::parser::Parser::get_matches_with (1 samples, 0.02%)</title><rect x="10.2" y="421" width="0.2" height="15.0" fill="rgb(214,130,21)" rx="2" ry="2" />
<text  x="13.21" y="431.5" ></text>
</g>
<g >
<title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (390 samples, 6.95%)</title><rect x="998.9" y="245" width="82.0" height="15.0" fill="rgb(205,139,15)" rx="2" ry="2" />
<text  x="1001.94" y="255.5" >alloc::st..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.09%)</title><rect x="20.5" y="229" width="1.1" height="15.0" fill="rgb(240,137,16)" rx="2" ry="2" />
<text  x="23.51" y="239.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (5,609 samples, 99.91%)</title><rect x="11.1" y="325" width="1178.9" height="15.0" fill="rgb(254,87,13)" rx="2" ry="2" />
<text  x="14.05" y="335.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>std::io::Write::write_all (7 samples, 0.12%)</title><rect x="1188.5" y="213" width="1.5" height="15.0" fill="rgb(220,155,17)" rx="2" ry="2" />
<text  x="1191.53" y="223.5" ></text>
</g>
<g >
<title>choose::config::Config::parse_choice (1 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(211,88,13)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>__libc_start_main (5,609 samples, 99.91%)</title><rect x="11.1" y="421" width="1178.9" height="15.0" fill="rgb(236,123,11)" rx="2" ry="2" />
<text  x="14.05" y="431.5" >__libc_start_main</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="1175.5" y="37" width="0.4" height="15.0" fill="rgb(234,91,50)" rx="2" ry="2" />
<text  x="1178.50" y="47.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (73 samples, 1.30%)</title><rect x="842.1" y="229" width="15.4" height="15.0" fill="rgb(206,175,21)" rx="2" ry="2" />
<text  x="845.14" y="239.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Regex as core::str::FromStr&gt;::from_str (2 samples, 0.04%)</title><rect x="10.6" y="373" width="0.5" height="15.0" fill="rgb(215,181,54)" rx="2" ry="2" />
<text  x="13.63" y="383.5" ></text>
</g>
<g >
<title>__rdl_realloc (1 samples, 0.02%)</title><rect x="10.8" y="229" width="0.3" height="15.0" fill="rgb(229,201,39)" rx="2" ry="2" />
<text  x="13.84" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(213,124,1)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>regex_syntax::ast::visitor::visit (1 samples, 0.02%)</title><rect x="10.8" y="261" width="0.3" height="15.0" fill="rgb(252,8,29)" rx="2" ry="2" />
<text  x="13.84" y="271.5" ></text>
</g>
<g >
<title>choose::config::Opt::augment_clap::_$u7b$$u7b$closure$u7d$$u7d$::h09a007304678755f (1 samples, 0.02%)</title><rect x="10.4" y="405" width="0.2" height="15.0" fill="rgb(248,45,5)" rx="2" ry="2" />
<text  x="13.42" y="415.5" ></text>
</g>
<g >
<title>__memrchr_avx2 (3 samples, 0.05%)</title><rect x="1175.9" y="85" width="0.6" height="15.0" fill="rgb(242,162,23)" rx="2" ry="2" />
<text  x="1178.92" y="95.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (12 samples, 0.21%)</title><rect x="1171.9" y="101" width="2.5" height="15.0" fill="rgb(243,133,31)" rx="2" ry="2" />
<text  x="1174.92" y="111.5" ></text>
</g>
<g >
<title>__rdl_realloc (33 samples, 0.59%)</title><rect x="947.0" y="229" width="7.0" height="15.0" fill="rgb(236,171,32)" rx="2" ry="2" />
<text  x="950.02" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (2 samples, 0.04%)</title><rect x="19.7" y="213" width="0.4" height="15.0" fill="rgb(218,55,30)" rx="2" ry="2" />
<text  x="22.67" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(235,5,13)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (2 samples, 0.04%)</title><rect x="10.6" y="357" width="0.5" height="15.0" fill="rgb(227,5,45)" rx="2" ry="2" />
<text  x="13.63" y="367.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (1 samples, 0.02%)</title><rect x="10.6" y="325" width="0.2" height="15.0" fill="rgb(231,91,34)" rx="2" ry="2" />
<text  x="13.63" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.04%)</title><rect x="1175.5" y="85" width="0.4" height="15.0" fill="rgb(246,131,32)" rx="2" ry="2" />
<text  x="1178.50" y="95.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="1184.1" y="213" width="0.2" height="15.0" fill="rgb(212,130,43)" rx="2" ry="2" />
<text  x="1187.11" y="223.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (5 samples, 0.09%)</title><rect x="1174.4" y="69" width="1.1" height="15.0" fill="rgb(212,98,23)" rx="2" ry="2" />
<text  x="1177.45" y="79.5" ></text>
</g>
<g >
<title>__rdl_alloc (1 samples, 0.02%)</title><rect x="24.5" y="213" width="0.2" height="15.0" fill="rgb(241,164,38)" rx="2" ry="2" />
<text  x="27.50" y="223.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.16%)</title><rect x="945.1" y="213" width="1.9" height="15.0" fill="rgb(206,191,53)" rx="2" ry="2" />
<text  x="948.13" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc (4 samples, 0.07%)</title><rect x="954.0" y="229" width="0.8" height="15.0" fill="rgb(215,174,22)" rx="2" ry="2" />
<text  x="956.96" y="239.5" ></text>
</g>
<g >
<title>_int_realloc (1 samples, 0.02%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(214,180,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="24.5" y="197" width="0.2" height="15.0" fill="rgb(229,124,3)" rx="2" ry="2" />
<text  x="27.50" y="207.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (5 samples, 0.09%)</title><rect x="1174.4" y="117" width="1.1" height="15.0" fill="rgb(254,157,13)" rx="2" ry="2" />
<text  x="1177.45" y="127.5" ></text>
</g>
<g >
<title>choose::config::Opt::augment_clap::_$u7b$$u7b$closure$u7d$$u7d$::h09a007304678755f (1 samples, 0.02%)</title><rect x="10.2" y="373" width="0.2" height="15.0" fill="rgb(250,153,20)" rx="2" ry="2" />
<text  x="13.21" y="383.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="34.6" y="213" width="0.2" height="15.0" fill="rgb(250,219,10)" rx="2" ry="2" />
<text  x="37.59" y="223.5" ></text>
</g>
<g >
<title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.02%)</title><rect x="10.8" y="309" width="0.3" height="15.0" fill="rgb(215,51,48)" rx="2" ry="2" />
<text  x="13.84" y="319.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (23 samples, 0.41%)</title><rect x="1171.7" y="149" width="4.8" height="15.0" fill="rgb(205,52,33)" rx="2" ry="2" />
<text  x="1174.71" y="159.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.4" y="309" width="0.2" height="15.0" fill="rgb(239,11,41)" rx="2" ry="2" />
<text  x="13.42" y="319.5" ></text>
</g>
<g >
<title>_int_free (145 samples, 2.58%)</title><rect x="968.5" y="245" width="30.4" height="15.0" fill="rgb(231,8,52)" rx="2" ry="2" />
<text  x="971.46" y="255.5" >_i..</text>
</g>
<g >
<title>regex::compile::Compiler::c (1 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(251,170,39)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h156dc5eab96477ce (5,609 samples, 99.91%)</title><rect x="11.1" y="293" width="1178.9" height="15.0" fill="rgb(253,197,51)" rx="2" ry="2" />
<text  x="14.05" y="303.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h156dc5eab96477ce</text>
</g>
<g >
<title>all (5,614 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(228,217,1)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>clap::app::validator::Validator::validate (1 samples, 0.02%)</title><rect x="10.2" y="405" width="0.2" height="15.0" fill="rgb(222,168,27)" rx="2" ry="2" />
<text  x="13.21" y="415.5" ></text>
</g>
<g >
<title>choose::choice::Choice::print_choice (5,458 samples, 97.22%)</title><rect x="37.1" y="261" width="1147.2" height="15.0" fill="rgb(252,130,53)" rx="2" ry="2" />
<text  x="40.11" y="271.5" >choose::choice::Choice::print_choice</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.11%)</title><rect x="1123.8" y="197" width="1.3" height="15.0" fill="rgb(232,114,53)" rx="2" ry="2" />
<text  x="1126.79" y="207.5" ></text>
</g>
<g >
<title>__GI___read (2 samples, 0.04%)</title><rect x="19.7" y="181" width="0.4" height="15.0" fill="rgb(230,63,34)" rx="2" ry="2" />
<text  x="22.67" y="191.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="886.7" y="197" width="1.0" height="15.0" fill="rgb(251,149,15)" rx="2" ry="2" />
<text  x="889.70" y="207.5" ></text>
</g>
<g >
<title>std::io::Write::write_all (183 samples, 3.26%)</title><rect x="1138.3" y="197" width="38.5" height="15.0" fill="rgb(234,183,27)" rx="2" ry="2" />
<text  x="1141.29" y="207.5" >std..</text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.18%)</title><rect x="22.2" y="213" width="2.1" height="15.0" fill="rgb(248,183,52)" rx="2" ry="2" />
<text  x="25.19" y="223.5" ></text>
</g>
<g >
<title>thread_local::thread_id::get (13 samples, 0.23%)</title><rect x="1090.4" y="229" width="2.7" height="15.0" fill="rgb(236,88,51)" rx="2" ry="2" />
<text  x="1093.37" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="24.3" y="181" width="0.2" height="15.0" fill="rgb(211,69,43)" rx="2" ry="2" />
<text  x="27.29" y="191.5" ></text>
</g>
<g >
<title>core::fmt::write (355 samples, 6.32%)</title><rect x="1109.7" y="229" width="74.6" height="15.0" fill="rgb(231,91,1)" rx="2" ry="2" />
<text  x="1112.71" y="239.5" >core::fm..</text>
</g>
<g >
<title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.04%)</title><rect x="1187.3" y="213" width="0.4" height="15.0" fill="rgb(224,64,43)" rx="2" ry="2" />
<text  x="1190.27" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.04%)</title><rect x="10.6" y="405" width="0.5" height="15.0" fill="rgb(217,165,14)" rx="2" ry="2" />
<text  x="13.63" y="415.5" ></text>
</g>
<g >
<title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,605 samples, 46.40%)</title><rect x="294.6" y="213" width="547.5" height="15.0" fill="rgb(231,153,40)" rx="2" ry="2" />
<text  x="297.60" y="223.5" >&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.02%)</title><rect x="1174.2" y="37" width="0.2" height="15.0" fill="rgb(219,81,3)" rx="2" ry="2" />
<text  x="1177.24" y="47.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="10.4" y="341" width="0.2" height="15.0" fill="rgb(236,183,18)" rx="2" ry="2" />
<text  x="13.42" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (118 samples, 2.10%)</title><rect x="920.1" y="197" width="24.8" height="15.0" fill="rgb(210,32,6)" rx="2" ry="2" />
<text  x="923.12" y="207.5" >_..</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.11%)</title><rect x="1075.9" y="213" width="1.2" height="15.0" fill="rgb(252,103,28)" rx="2" ry="2" />
<text  x="1078.87" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.16%)</title><rect x="1079.0" y="229" width="1.9" height="15.0" fill="rgb(230,223,48)" rx="2" ry="2" />
<text  x="1082.02" y="239.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f (5,609 samples, 99.91%)</title><rect x="11.1" y="309" width="1178.9" height="15.0" fill="rgb(247,92,3)" rx="2" ry="2" />
<text  x="14.05" y="319.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h53a8977914d52a8f</text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="24.3" y="213" width="0.2" height="15.0" fill="rgb(236,110,38)" rx="2" ry="2" />
<text  x="27.29" y="223.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="19.7" y="229" width="0.4" height="15.0" fill="rgb(212,134,17)" rx="2" ry="2" />
<text  x="22.67" y="239.5" ></text>
</g>
<g >
<title>std::io::append_to_string (85 samples, 1.51%)</title><rect x="16.9" y="245" width="17.9" height="15.0" fill="rgb(243,158,19)" rx="2" ry="2" />
<text  x="19.94" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4,153 samples, 73.98%)</title><rect x="83.4" y="245" width="872.9" height="15.0" fill="rgb(226,167,52)" rx="2" ry="2" />
<text  x="86.36" y="255.5" >&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text>
</g>
<g >
<title>&lt;regex::re_unicode::Regex as core::str::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="10.4" y="373" width="0.2" height="15.0" fill="rgb(234,110,3)" rx="2" ry="2" />
<text  x="13.42" y="383.5" ></text>
</g>
<g >
<title>std::panicking::try (5,609 samples, 99.91%)</title><rect x="11.1" y="357" width="1178.9" height="15.0" fill="rgb(207,203,45)" rx="2" ry="2" />
<text  x="14.05" y="367.5" >std::panicking::try</text>
</g>
<g >
<title>std::io::Write::write_fmt (27 samples, 0.48%)</title><rect x="1184.3" y="261" width="5.7" height="15.0" fill="rgb(235,87,23)" rx="2" ry="2" />
<text  x="1187.32" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (66 samples, 1.18%)</title><rect x="887.7" y="197" width="13.9" height="15.0" fill="rgb(210,127,53)" rx="2" ry="2" />
<text  x="890.75" y="207.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (5 samples, 0.09%)</title><rect x="1174.4" y="53" width="1.1" height="15.0" fill="rgb(229,36,50)" rx="2" ry="2" />
<text  x="1177.45" y="63.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr::memrchr_specific (3 samples, 0.05%)</title><rect x="1175.9" y="101" width="0.6" height="15.0" fill="rgb(217,144,38)" rx="2" ry="2" />
<text  x="1178.92" y="111.5" ></text>
</g>
<g >
<title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (3,081 samples, 54.88%)</title><rect x="194.5" y="229" width="647.6" height="15.0" fill="rgb(243,154,16)" rx="2" ry="2" />
<text  x="197.55" y="239.5" >&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.11%)</title><rect x="966.1" y="229" width="1.3" height="15.0" fill="rgb(248,155,3)" rx="2" ry="2" />
<text  x="969.15" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="35.2" y="245" width="0.2" height="15.0" fill="rgb(218,221,28)" rx="2" ry="2" />
<text  x="38.22" y="255.5" ></text>
</g>
<g >
<title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (25 samples, 0.45%)</title><rect x="1171.5" y="181" width="5.3" height="15.0" fill="rgb(233,140,14)" rx="2" ry="2" />
<text  x="1174.50" y="191.5" ></text>
</g>
<g >
<title>main (5,609 samples, 99.91%)</title><rect x="11.1" y="405" width="1178.9" height="15.0" fill="rgb(219,217,31)" rx="2" ry="2" />
<text  x="14.05" y="415.5" >main</text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="1175.5" y="53" width="0.4" height="15.0" fill="rgb(212,44,22)" rx="2" ry="2" />
<text  x="1178.50" y="63.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad (28 samples, 0.50%)</title><rect x="1178.2" y="213" width="5.9" height="15.0" fill="rgb(238,52,9)" rx="2" ry="2" />
<text  x="1181.23" y="223.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="1189.8" y="197" width="0.2" height="15.0" fill="rgb(230,150,12)" rx="2" ry="2" />
<text  x="1192.79" y="207.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (14 samples, 0.25%)</title><rect x="1168.6" y="181" width="2.9" height="15.0" fill="rgb(244,35,22)" rx="2" ry="2" />
<text  x="1171.56" y="191.5" ></text>
</g>
<g >
<title>structopt::StructOpt::from_args (2 samples, 0.04%)</title><rect x="10.6" y="421" width="0.5" height="15.0" fill="rgb(220,118,11)" rx="2" ry="2" />
<text  x="13.63" y="431.5" ></text>
</g>
<g >
<title>std::sys::unix::memchr::memrchr (3 samples, 0.05%)</title><rect x="1175.9" y="117" width="0.6" height="15.0" fill="rgb(250,134,37)" rx="2" ry="2" />
<text  x="1178.92" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_write (11 samples, 0.20%)</title><rect x="1171.9" y="53" width="2.3" height="15.0" fill="rgb(237,220,17)" rx="2" ry="2" />
<text  x="1174.92" y="63.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt (434 samples, 7.73%)</title><rect x="1093.1" y="245" width="91.2" height="15.0" fill="rgb(248,7,8)" rx="2" ry="2" />
<text  x="1096.10" y="255.5" >std::io::W..</text>
</g>
<g >
<title>choose (5,614 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(241,124,4)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >choose</text>
</g>
<g >
<title>__GI___libc_free (47 samples, 0.84%)</title><rect x="956.3" y="245" width="9.8" height="15.0" fill="rgb(244,227,43)" rx="2" ry="2" />
<text  x="959.27" y="255.5" ></text>
</g>
</g>
</svg>
